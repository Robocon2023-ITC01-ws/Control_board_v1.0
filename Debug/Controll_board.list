
Controll_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004aa8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004bb8  08004bb8  00014bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bd8  08004bd8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004bd8  08004bd8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bd8  08004bd8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bd8  08004bd8  00014bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bdc  08004bdc  00014bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000010  08004bf0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08004bf0  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b16b  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ebf  00000000  00000000  0002b1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  0002d068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a60  00000000  00000000  0002dbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017add  00000000  00000000  0002e620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd82  00000000  00000000  000460fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a200  00000000  00000000  00051e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc07f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030f8  00000000  00000000  000dc0d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004ba0 	.word	0x08004ba0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004ba0 	.word	0x08004ba0

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <__aeabi_d2f>:
 800075c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000760:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000764:	bf24      	itt	cs
 8000766:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800076a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800076e:	d90d      	bls.n	800078c <__aeabi_d2f+0x30>
 8000770:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000774:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000778:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800077c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000780:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000784:	bf08      	it	eq
 8000786:	f020 0001 	biceq.w	r0, r0, #1
 800078a:	4770      	bx	lr
 800078c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000790:	d121      	bne.n	80007d6 <__aeabi_d2f+0x7a>
 8000792:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000796:	bfbc      	itt	lt
 8000798:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800079c:	4770      	bxlt	lr
 800079e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007a6:	f1c2 0218 	rsb	r2, r2, #24
 80007aa:	f1c2 0c20 	rsb	ip, r2, #32
 80007ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80007b2:	fa20 f002 	lsr.w	r0, r0, r2
 80007b6:	bf18      	it	ne
 80007b8:	f040 0001 	orrne.w	r0, r0, #1
 80007bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007c8:	ea40 000c 	orr.w	r0, r0, ip
 80007cc:	fa23 f302 	lsr.w	r3, r3, r2
 80007d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007d4:	e7cc      	b.n	8000770 <__aeabi_d2f+0x14>
 80007d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007da:	d107      	bne.n	80007ec <__aeabi_d2f+0x90>
 80007dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007e0:	bf1e      	ittt	ne
 80007e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007ea:	4770      	bxne	lr
 80007ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop

080007fc <__aeabi_frsub>:
 80007fc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000800:	e002      	b.n	8000808 <__addsf3>
 8000802:	bf00      	nop

08000804 <__aeabi_fsub>:
 8000804:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000808 <__addsf3>:
 8000808:	0042      	lsls	r2, r0, #1
 800080a:	bf1f      	itttt	ne
 800080c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000810:	ea92 0f03 	teqne	r2, r3
 8000814:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000818:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800081c:	d06a      	beq.n	80008f4 <__addsf3+0xec>
 800081e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000822:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000826:	bfc1      	itttt	gt
 8000828:	18d2      	addgt	r2, r2, r3
 800082a:	4041      	eorgt	r1, r0
 800082c:	4048      	eorgt	r0, r1
 800082e:	4041      	eorgt	r1, r0
 8000830:	bfb8      	it	lt
 8000832:	425b      	neglt	r3, r3
 8000834:	2b19      	cmp	r3, #25
 8000836:	bf88      	it	hi
 8000838:	4770      	bxhi	lr
 800083a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800083e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000842:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000846:	bf18      	it	ne
 8000848:	4240      	negne	r0, r0
 800084a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800084e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000852:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000856:	bf18      	it	ne
 8000858:	4249      	negne	r1, r1
 800085a:	ea92 0f03 	teq	r2, r3
 800085e:	d03f      	beq.n	80008e0 <__addsf3+0xd8>
 8000860:	f1a2 0201 	sub.w	r2, r2, #1
 8000864:	fa41 fc03 	asr.w	ip, r1, r3
 8000868:	eb10 000c 	adds.w	r0, r0, ip
 800086c:	f1c3 0320 	rsb	r3, r3, #32
 8000870:	fa01 f103 	lsl.w	r1, r1, r3
 8000874:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000878:	d502      	bpl.n	8000880 <__addsf3+0x78>
 800087a:	4249      	negs	r1, r1
 800087c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000880:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000884:	d313      	bcc.n	80008ae <__addsf3+0xa6>
 8000886:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800088a:	d306      	bcc.n	800089a <__addsf3+0x92>
 800088c:	0840      	lsrs	r0, r0, #1
 800088e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000892:	f102 0201 	add.w	r2, r2, #1
 8000896:	2afe      	cmp	r2, #254	; 0xfe
 8000898:	d251      	bcs.n	800093e <__addsf3+0x136>
 800089a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800089e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008a2:	bf08      	it	eq
 80008a4:	f020 0001 	biceq.w	r0, r0, #1
 80008a8:	ea40 0003 	orr.w	r0, r0, r3
 80008ac:	4770      	bx	lr
 80008ae:	0049      	lsls	r1, r1, #1
 80008b0:	eb40 0000 	adc.w	r0, r0, r0
 80008b4:	3a01      	subs	r2, #1
 80008b6:	bf28      	it	cs
 80008b8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80008bc:	d2ed      	bcs.n	800089a <__addsf3+0x92>
 80008be:	fab0 fc80 	clz	ip, r0
 80008c2:	f1ac 0c08 	sub.w	ip, ip, #8
 80008c6:	ebb2 020c 	subs.w	r2, r2, ip
 80008ca:	fa00 f00c 	lsl.w	r0, r0, ip
 80008ce:	bfaa      	itet	ge
 80008d0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80008d4:	4252      	neglt	r2, r2
 80008d6:	4318      	orrge	r0, r3
 80008d8:	bfbc      	itt	lt
 80008da:	40d0      	lsrlt	r0, r2
 80008dc:	4318      	orrlt	r0, r3
 80008de:	4770      	bx	lr
 80008e0:	f092 0f00 	teq	r2, #0
 80008e4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008e8:	bf06      	itte	eq
 80008ea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ee:	3201      	addeq	r2, #1
 80008f0:	3b01      	subne	r3, #1
 80008f2:	e7b5      	b.n	8000860 <__addsf3+0x58>
 80008f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008fc:	bf18      	it	ne
 80008fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000902:	d021      	beq.n	8000948 <__addsf3+0x140>
 8000904:	ea92 0f03 	teq	r2, r3
 8000908:	d004      	beq.n	8000914 <__addsf3+0x10c>
 800090a:	f092 0f00 	teq	r2, #0
 800090e:	bf08      	it	eq
 8000910:	4608      	moveq	r0, r1
 8000912:	4770      	bx	lr
 8000914:	ea90 0f01 	teq	r0, r1
 8000918:	bf1c      	itt	ne
 800091a:	2000      	movne	r0, #0
 800091c:	4770      	bxne	lr
 800091e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000922:	d104      	bne.n	800092e <__addsf3+0x126>
 8000924:	0040      	lsls	r0, r0, #1
 8000926:	bf28      	it	cs
 8000928:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800092c:	4770      	bx	lr
 800092e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000932:	bf3c      	itt	cc
 8000934:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000938:	4770      	bxcc	lr
 800093a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800093e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000942:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000946:	4770      	bx	lr
 8000948:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800094c:	bf16      	itet	ne
 800094e:	4608      	movne	r0, r1
 8000950:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000954:	4601      	movne	r1, r0
 8000956:	0242      	lsls	r2, r0, #9
 8000958:	bf06      	itte	eq
 800095a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800095e:	ea90 0f01 	teqeq	r0, r1
 8000962:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000966:	4770      	bx	lr

08000968 <__aeabi_ui2f>:
 8000968:	f04f 0300 	mov.w	r3, #0
 800096c:	e004      	b.n	8000978 <__aeabi_i2f+0x8>
 800096e:	bf00      	nop

08000970 <__aeabi_i2f>:
 8000970:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000974:	bf48      	it	mi
 8000976:	4240      	negmi	r0, r0
 8000978:	ea5f 0c00 	movs.w	ip, r0
 800097c:	bf08      	it	eq
 800097e:	4770      	bxeq	lr
 8000980:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000984:	4601      	mov	r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	e01c      	b.n	80009c6 <__aeabi_l2f+0x2a>

0800098c <__aeabi_ul2f>:
 800098c:	ea50 0201 	orrs.w	r2, r0, r1
 8000990:	bf08      	it	eq
 8000992:	4770      	bxeq	lr
 8000994:	f04f 0300 	mov.w	r3, #0
 8000998:	e00a      	b.n	80009b0 <__aeabi_l2f+0x14>
 800099a:	bf00      	nop

0800099c <__aeabi_l2f>:
 800099c:	ea50 0201 	orrs.w	r2, r0, r1
 80009a0:	bf08      	it	eq
 80009a2:	4770      	bxeq	lr
 80009a4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80009a8:	d502      	bpl.n	80009b0 <__aeabi_l2f+0x14>
 80009aa:	4240      	negs	r0, r0
 80009ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009b0:	ea5f 0c01 	movs.w	ip, r1
 80009b4:	bf02      	ittt	eq
 80009b6:	4684      	moveq	ip, r0
 80009b8:	4601      	moveq	r1, r0
 80009ba:	2000      	moveq	r0, #0
 80009bc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80009c0:	bf08      	it	eq
 80009c2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80009c6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80009ca:	fabc f28c 	clz	r2, ip
 80009ce:	3a08      	subs	r2, #8
 80009d0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80009d4:	db10      	blt.n	80009f8 <__aeabi_l2f+0x5c>
 80009d6:	fa01 fc02 	lsl.w	ip, r1, r2
 80009da:	4463      	add	r3, ip
 80009dc:	fa00 fc02 	lsl.w	ip, r0, r2
 80009e0:	f1c2 0220 	rsb	r2, r2, #32
 80009e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009e8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ec:	eb43 0002 	adc.w	r0, r3, r2
 80009f0:	bf08      	it	eq
 80009f2:	f020 0001 	biceq.w	r0, r0, #1
 80009f6:	4770      	bx	lr
 80009f8:	f102 0220 	add.w	r2, r2, #32
 80009fc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a00:	f1c2 0220 	rsb	r2, r2, #32
 8000a04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a08:	fa21 f202 	lsr.w	r2, r1, r2
 8000a0c:	eb43 0002 	adc.w	r0, r3, r2
 8000a10:	bf08      	it	eq
 8000a12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a16:	4770      	bx	lr

08000a18 <__aeabi_fmul>:
 8000a18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a20:	bf1e      	ittt	ne
 8000a22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a26:	ea92 0f0c 	teqne	r2, ip
 8000a2a:	ea93 0f0c 	teqne	r3, ip
 8000a2e:	d06f      	beq.n	8000b10 <__aeabi_fmul+0xf8>
 8000a30:	441a      	add	r2, r3
 8000a32:	ea80 0c01 	eor.w	ip, r0, r1
 8000a36:	0240      	lsls	r0, r0, #9
 8000a38:	bf18      	it	ne
 8000a3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a3e:	d01e      	beq.n	8000a7e <__aeabi_fmul+0x66>
 8000a40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a58:	bf3e      	ittt	cc
 8000a5a:	0049      	lslcc	r1, r1, #1
 8000a5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a60:	005b      	lslcc	r3, r3, #1
 8000a62:	ea40 0001 	orr.w	r0, r0, r1
 8000a66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a6a:	2afd      	cmp	r2, #253	; 0xfd
 8000a6c:	d81d      	bhi.n	8000aaa <__aeabi_fmul+0x92>
 8000a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a76:	bf08      	it	eq
 8000a78:	f020 0001 	biceq.w	r0, r0, #1
 8000a7c:	4770      	bx	lr
 8000a7e:	f090 0f00 	teq	r0, #0
 8000a82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a86:	bf08      	it	eq
 8000a88:	0249      	lsleq	r1, r1, #9
 8000a8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a92:	3a7f      	subs	r2, #127	; 0x7f
 8000a94:	bfc2      	ittt	gt
 8000a96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a9e:	4770      	bxgt	lr
 8000aa0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	3a01      	subs	r2, #1
 8000aaa:	dc5d      	bgt.n	8000b68 <__aeabi_fmul+0x150>
 8000aac:	f112 0f19 	cmn.w	r2, #25
 8000ab0:	bfdc      	itt	le
 8000ab2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ab6:	4770      	bxle	lr
 8000ab8:	f1c2 0200 	rsb	r2, r2, #0
 8000abc:	0041      	lsls	r1, r0, #1
 8000abe:	fa21 f102 	lsr.w	r1, r1, r2
 8000ac2:	f1c2 0220 	rsb	r2, r2, #32
 8000ac6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000aca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ace:	f140 0000 	adc.w	r0, r0, #0
 8000ad2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ad6:	bf08      	it	eq
 8000ad8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000adc:	4770      	bx	lr
 8000ade:	f092 0f00 	teq	r2, #0
 8000ae2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ae6:	bf02      	ittt	eq
 8000ae8:	0040      	lsleq	r0, r0, #1
 8000aea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aee:	3a01      	subeq	r2, #1
 8000af0:	d0f9      	beq.n	8000ae6 <__aeabi_fmul+0xce>
 8000af2:	ea40 000c 	orr.w	r0, r0, ip
 8000af6:	f093 0f00 	teq	r3, #0
 8000afa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000afe:	bf02      	ittt	eq
 8000b00:	0049      	lsleq	r1, r1, #1
 8000b02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b06:	3b01      	subeq	r3, #1
 8000b08:	d0f9      	beq.n	8000afe <__aeabi_fmul+0xe6>
 8000b0a:	ea41 010c 	orr.w	r1, r1, ip
 8000b0e:	e78f      	b.n	8000a30 <__aeabi_fmul+0x18>
 8000b10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b14:	ea92 0f0c 	teq	r2, ip
 8000b18:	bf18      	it	ne
 8000b1a:	ea93 0f0c 	teqne	r3, ip
 8000b1e:	d00a      	beq.n	8000b36 <__aeabi_fmul+0x11e>
 8000b20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b24:	bf18      	it	ne
 8000b26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b2a:	d1d8      	bne.n	8000ade <__aeabi_fmul+0xc6>
 8000b2c:	ea80 0001 	eor.w	r0, r0, r1
 8000b30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b34:	4770      	bx	lr
 8000b36:	f090 0f00 	teq	r0, #0
 8000b3a:	bf17      	itett	ne
 8000b3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b40:	4608      	moveq	r0, r1
 8000b42:	f091 0f00 	teqne	r1, #0
 8000b46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b4a:	d014      	beq.n	8000b76 <__aeabi_fmul+0x15e>
 8000b4c:	ea92 0f0c 	teq	r2, ip
 8000b50:	d101      	bne.n	8000b56 <__aeabi_fmul+0x13e>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d10f      	bne.n	8000b76 <__aeabi_fmul+0x15e>
 8000b56:	ea93 0f0c 	teq	r3, ip
 8000b5a:	d103      	bne.n	8000b64 <__aeabi_fmul+0x14c>
 8000b5c:	024b      	lsls	r3, r1, #9
 8000b5e:	bf18      	it	ne
 8000b60:	4608      	movne	r0, r1
 8000b62:	d108      	bne.n	8000b76 <__aeabi_fmul+0x15e>
 8000b64:	ea80 0001 	eor.w	r0, r0, r1
 8000b68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b74:	4770      	bx	lr
 8000b76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_fdiv>:
 8000b80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b88:	bf1e      	ittt	ne
 8000b8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b8e:	ea92 0f0c 	teqne	r2, ip
 8000b92:	ea93 0f0c 	teqne	r3, ip
 8000b96:	d069      	beq.n	8000c6c <__aeabi_fdiv+0xec>
 8000b98:	eba2 0203 	sub.w	r2, r2, r3
 8000b9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000ba0:	0249      	lsls	r1, r1, #9
 8000ba2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ba6:	d037      	beq.n	8000c18 <__aeabi_fdiv+0x98>
 8000ba8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000bac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000bb0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000bb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	bf38      	it	cc
 8000bbc:	005b      	lslcc	r3, r3, #1
 8000bbe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000bc2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	bf24      	itt	cs
 8000bca:	1a5b      	subcs	r3, r3, r1
 8000bcc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000bd0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000bd4:	bf24      	itt	cs
 8000bd6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000bda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000bde:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000be2:	bf24      	itt	cs
 8000be4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000be8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bf0:	bf24      	itt	cs
 8000bf2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bf6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bfa:	011b      	lsls	r3, r3, #4
 8000bfc:	bf18      	it	ne
 8000bfe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000c02:	d1e0      	bne.n	8000bc6 <__aeabi_fdiv+0x46>
 8000c04:	2afd      	cmp	r2, #253	; 0xfd
 8000c06:	f63f af50 	bhi.w	8000aaa <__aeabi_fmul+0x92>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c20:	327f      	adds	r2, #127	; 0x7f
 8000c22:	bfc2      	ittt	gt
 8000c24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2c:	4770      	bxgt	lr
 8000c2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c32:	f04f 0300 	mov.w	r3, #0
 8000c36:	3a01      	subs	r2, #1
 8000c38:	e737      	b.n	8000aaa <__aeabi_fmul+0x92>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c42:	bf02      	ittt	eq
 8000c44:	0040      	lsleq	r0, r0, #1
 8000c46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c4a:	3a01      	subeq	r2, #1
 8000c4c:	d0f9      	beq.n	8000c42 <__aeabi_fdiv+0xc2>
 8000c4e:	ea40 000c 	orr.w	r0, r0, ip
 8000c52:	f093 0f00 	teq	r3, #0
 8000c56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c5a:	bf02      	ittt	eq
 8000c5c:	0049      	lsleq	r1, r1, #1
 8000c5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c62:	3b01      	subeq	r3, #1
 8000c64:	d0f9      	beq.n	8000c5a <__aeabi_fdiv+0xda>
 8000c66:	ea41 010c 	orr.w	r1, r1, ip
 8000c6a:	e795      	b.n	8000b98 <__aeabi_fdiv+0x18>
 8000c6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c70:	ea92 0f0c 	teq	r2, ip
 8000c74:	d108      	bne.n	8000c88 <__aeabi_fdiv+0x108>
 8000c76:	0242      	lsls	r2, r0, #9
 8000c78:	f47f af7d 	bne.w	8000b76 <__aeabi_fmul+0x15e>
 8000c7c:	ea93 0f0c 	teq	r3, ip
 8000c80:	f47f af70 	bne.w	8000b64 <__aeabi_fmul+0x14c>
 8000c84:	4608      	mov	r0, r1
 8000c86:	e776      	b.n	8000b76 <__aeabi_fmul+0x15e>
 8000c88:	ea93 0f0c 	teq	r3, ip
 8000c8c:	d104      	bne.n	8000c98 <__aeabi_fdiv+0x118>
 8000c8e:	024b      	lsls	r3, r1, #9
 8000c90:	f43f af4c 	beq.w	8000b2c <__aeabi_fmul+0x114>
 8000c94:	4608      	mov	r0, r1
 8000c96:	e76e      	b.n	8000b76 <__aeabi_fmul+0x15e>
 8000c98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c9c:	bf18      	it	ne
 8000c9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ca2:	d1ca      	bne.n	8000c3a <__aeabi_fdiv+0xba>
 8000ca4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ca8:	f47f af5c 	bne.w	8000b64 <__aeabi_fmul+0x14c>
 8000cac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000cb0:	f47f af3c 	bne.w	8000b2c <__aeabi_fmul+0x114>
 8000cb4:	e75f      	b.n	8000b76 <__aeabi_fmul+0x15e>
 8000cb6:	bf00      	nop

08000cb8 <__gesf2>:
 8000cb8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000cbc:	e006      	b.n	8000ccc <__cmpsf2+0x4>
 8000cbe:	bf00      	nop

08000cc0 <__lesf2>:
 8000cc0:	f04f 0c01 	mov.w	ip, #1
 8000cc4:	e002      	b.n	8000ccc <__cmpsf2+0x4>
 8000cc6:	bf00      	nop

08000cc8 <__cmpsf2>:
 8000cc8:	f04f 0c01 	mov.w	ip, #1
 8000ccc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cd0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cdc:	bf18      	it	ne
 8000cde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce2:	d011      	beq.n	8000d08 <__cmpsf2+0x40>
 8000ce4:	b001      	add	sp, #4
 8000ce6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000cea:	bf18      	it	ne
 8000cec:	ea90 0f01 	teqne	r0, r1
 8000cf0:	bf58      	it	pl
 8000cf2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cf6:	bf88      	it	hi
 8000cf8:	17c8      	asrhi	r0, r1, #31
 8000cfa:	bf38      	it	cc
 8000cfc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d00:	bf18      	it	ne
 8000d02:	f040 0001 	orrne.w	r0, r0, #1
 8000d06:	4770      	bx	lr
 8000d08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d0c:	d102      	bne.n	8000d14 <__cmpsf2+0x4c>
 8000d0e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d12:	d105      	bne.n	8000d20 <__cmpsf2+0x58>
 8000d14:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d18:	d1e4      	bne.n	8000ce4 <__cmpsf2+0x1c>
 8000d1a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d1e:	d0e1      	beq.n	8000ce4 <__cmpsf2+0x1c>
 8000d20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <__aeabi_cfrcmple>:
 8000d28:	4684      	mov	ip, r0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	4661      	mov	r1, ip
 8000d2e:	e7ff      	b.n	8000d30 <__aeabi_cfcmpeq>

08000d30 <__aeabi_cfcmpeq>:
 8000d30:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d32:	f7ff ffc9 	bl	8000cc8 <__cmpsf2>
 8000d36:	2800      	cmp	r0, #0
 8000d38:	bf48      	it	mi
 8000d3a:	f110 0f00 	cmnmi.w	r0, #0
 8000d3e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d40 <__aeabi_fcmpeq>:
 8000d40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d44:	f7ff fff4 	bl	8000d30 <__aeabi_cfcmpeq>
 8000d48:	bf0c      	ite	eq
 8000d4a:	2001      	moveq	r0, #1
 8000d4c:	2000      	movne	r0, #0
 8000d4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d52:	bf00      	nop

08000d54 <__aeabi_fcmplt>:
 8000d54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d58:	f7ff ffea 	bl	8000d30 <__aeabi_cfcmpeq>
 8000d5c:	bf34      	ite	cc
 8000d5e:	2001      	movcc	r0, #1
 8000d60:	2000      	movcs	r0, #0
 8000d62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d66:	bf00      	nop

08000d68 <__aeabi_fcmple>:
 8000d68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d6c:	f7ff ffe0 	bl	8000d30 <__aeabi_cfcmpeq>
 8000d70:	bf94      	ite	ls
 8000d72:	2001      	movls	r0, #1
 8000d74:	2000      	movhi	r0, #0
 8000d76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7a:	bf00      	nop

08000d7c <__aeabi_fcmpge>:
 8000d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d80:	f7ff ffd2 	bl	8000d28 <__aeabi_cfrcmple>
 8000d84:	bf94      	ite	ls
 8000d86:	2001      	movls	r0, #1
 8000d88:	2000      	movhi	r0, #0
 8000d8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8e:	bf00      	nop

08000d90 <__aeabi_fcmpgt>:
 8000d90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d94:	f7ff ffc8 	bl	8000d28 <__aeabi_cfrcmple>
 8000d98:	bf34      	ite	cc
 8000d9a:	2001      	movcc	r0, #1
 8000d9c:	2000      	movcs	r0, #0
 8000d9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da2:	bf00      	nop

08000da4 <__aeabi_f2uiz>:
 8000da4:	0042      	lsls	r2, r0, #1
 8000da6:	d20e      	bcs.n	8000dc6 <__aeabi_f2uiz+0x22>
 8000da8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000dac:	d30b      	bcc.n	8000dc6 <__aeabi_f2uiz+0x22>
 8000dae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000db2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000db6:	d409      	bmi.n	8000dcc <__aeabi_f2uiz+0x28>
 8000db8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000dbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000dc4:	4770      	bx	lr
 8000dc6:	f04f 0000 	mov.w	r0, #0
 8000dca:	4770      	bx	lr
 8000dcc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000dd0:	d101      	bne.n	8000dd6 <__aeabi_f2uiz+0x32>
 8000dd2:	0242      	lsls	r2, r0, #9
 8000dd4:	d102      	bne.n	8000ddc <__aeabi_f2uiz+0x38>
 8000dd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dda:	4770      	bx	lr
 8000ddc:	f04f 0000 	mov.w	r0, #0
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <PID_Init>:
 #include "PID.h"

void PID_Init(PIDController *pid, int N_input) {//nMotor is the number of motor to control
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]

	/* Clear controller variables */
	for(int i = 0;i < N_input; i++){
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	e025      	b.n	8000e40 <PID_Init+0x5c>
		pid->integrator[i] = 0.0f;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	3206      	adds	r2, #6
 8000dfa:	f04f 0100 	mov.w	r1, #0
 8000dfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pid->prevError[i]  = 0.0f;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	3208      	adds	r2, #8
 8000e08:	f04f 0100 	mov.w	r1, #0
 8000e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		pid->differentiator[i]  = 0.0f;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	320a      	adds	r2, #10
 8000e16:	f04f 0100 	mov.w	r1, #0
 8000e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pid->prevMeasurement[i] = 0.0f;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	320c      	adds	r2, #12
 8000e24:	f04f 0100 	mov.w	r1, #0
 8000e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		pid->out[i] = 0.0f;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	320e      	adds	r2, #14
 8000e32:	f04f 0100 	mov.w	r1, #0
 8000e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0;i < N_input; i++){
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dbd5      	blt.n	8000df4 <PID_Init+0x10>
	}


}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <PID>:

float PID(PIDController *pid, float setpoint, float measurement,float Kp,float Ki,float Kd, int i){// "i" input identity
 8000e54:	b5b0      	push	{r4, r5, r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	603b      	str	r3, [r7, #0]
	/*
	* -------------------------------------Error signal------------------------------------------
	*/
	float error = setpoint - measurement;;
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	68b8      	ldr	r0, [r7, #8]
 8000e66:	f7ff fccd 	bl	8000804 <__aeabi_fsub>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	617b      	str	r3, [r7, #20]
	/*
	* Proportional
	*/
    float proportional = Kp * error;
 8000e6e:	6979      	ldr	r1, [r7, #20]
 8000e70:	6838      	ldr	r0, [r7, #0]
 8000e72:	f7ff fdd1 	bl	8000a18 <__aeabi_fmul>
 8000e76:	4603      	mov	r3, r0
 8000e78:	613b      	str	r3, [r7, #16]
	/*
	* ----------------------------------------Integral-----------------------------------------------
	*/
    pid->integrator[i]	= pid->integrator[i] + 0.5f * Ki * pid->T
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e7e:	3206      	adds	r2, #6
 8000e80:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8000e84:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8000e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e8a:	f7ff fdc5 	bl	8000a18 <__aeabi_fmul>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	4619      	mov	r1, r3
 8000e98:	4610      	mov	r0, r2
 8000e9a:	f7ff fdbd 	bl	8000a18 <__aeabi_fmul>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	461d      	mov	r5, r3
    					* (error + pid->prevError[i]);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ea6:	3208      	adds	r2, #8
 8000ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eac:	6979      	ldr	r1, [r7, #20]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fcaa 	bl	8000808 <__addsf3>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4628      	mov	r0, r5
 8000eba:	f7ff fdad 	bl	8000a18 <__aeabi_fmul>
 8000ebe:	4603      	mov	r3, r0
    pid->integrator[i]	= pid->integrator[i] + 0.5f * Ki * pid->T
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f7ff fca0 	bl	8000808 <__addsf3>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4619      	mov	r1, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ed0:	3206      	adds	r2, #6
 8000ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator[i] > pid->limMaxInt) {
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000eda:	3206      	adds	r2, #6
 8000edc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	f7ff ff52 	bl	8000d90 <__aeabi_fcmpgt>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d007      	beq.n	8000f02 <PID+0xae>
        pid->integrator[i] = pid->limMaxInt;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6919      	ldr	r1, [r3, #16]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000efa:	3206      	adds	r2, #6
 8000efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000f00:	e01f      	b.n	8000f42 <PID+0xee>
    }
    else if (pid->integrator[i] < pid->limMinInt) {
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f06:	3206      	adds	r2, #6
 8000f08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	4619      	mov	r1, r3
 8000f12:	4610      	mov	r0, r2
 8000f14:	f7ff ff1e 	bl	8000d54 <__aeabi_fcmplt>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d007      	beq.n	8000f2e <PID+0xda>
        pid->integrator[i] = pid->limMinInt;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	68d9      	ldr	r1, [r3, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f26:	3206      	adds	r2, #6
 8000f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000f2c:	e009      	b.n	8000f42 <PID+0xee>
    }
    else{
    	pid->integrator[i] = pid->integrator[i];
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f32:	3206      	adds	r2, #6
 8000f34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f3c:	3206      	adds	r2, #6
 8000f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/*
	* Derivative (band-limited differentator)
	*/

    pid->differentiator[i] = -(2.0f * Kd * (measurement - pid->prevMeasurement[i])	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8000f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f44:	4619      	mov	r1, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fc5e 	bl	8000808 <__addsf3>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461c      	mov	r4, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f54:	320c      	adds	r2, #12
 8000f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff fc51 	bl	8000804 <__aeabi_fsub>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4619      	mov	r1, r3
 8000f66:	4620      	mov	r0, r4
 8000f68:	f7ff fd56 	bl	8000a18 <__aeabi_fmul>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461c      	mov	r4, r3
                        	 + (2.0f * pid->tau - pid->T) * pid->differentiator[i])
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fc46 	bl	8000808 <__addsf3>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	4619      	mov	r1, r3
 8000f86:	4610      	mov	r0, r2
 8000f88:	f7ff fc3c 	bl	8000804 <__aeabi_fsub>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f94:	320a      	adds	r2, #10
 8000f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f7ff fd3c 	bl	8000a18 <__aeabi_fmul>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	f7ff fc2f 	bl	8000808 <__addsf3>
 8000faa:	4603      	mov	r3, r0
    pid->differentiator[i] = -(2.0f * Kd * (measurement - pid->prevMeasurement[i])	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8000fac:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
							 / (2.0f * pid->tau + pid->T);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fc26 	bl	8000808 <__addsf3>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	f7ff fc1e 	bl	8000808 <__addsf3>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f7ff fdd5 	bl	8000b80 <__aeabi_fdiv>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4619      	mov	r1, r3
    pid->differentiator[i] = -(2.0f * Kd * (measurement - pid->prevMeasurement[i])	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fde:	320a      	adds	r2, #10
 8000fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	/*
	* Compute output and apply limits
	*/
    pid->out[i] = proportional + pid->integrator[i] + pid->differentiator[i];
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fe8:	3206      	adds	r2, #6
 8000fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fee:	6939      	ldr	r1, [r7, #16]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fc09 	bl	8000808 <__addsf3>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ffe:	320a      	adds	r2, #10
 8001000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001004:	4619      	mov	r1, r3
 8001006:	f7ff fbff 	bl	8000808 <__addsf3>
 800100a:	4603      	mov	r3, r0
 800100c:	4619      	mov	r1, r3
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001012:	320e      	adds	r2, #14
 8001014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    //sat[i] = pid->out[i];
    if (pid->out[i] > pid->limMax) {
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800101c:	320e      	adds	r2, #14
 800101e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	4619      	mov	r1, r3
 8001028:	4610      	mov	r0, r2
 800102a:	f7ff feb1 	bl	8000d90 <__aeabi_fcmpgt>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d007      	beq.n	8001044 <PID+0x1f0>
        pid->out[i] = pid->limMax;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6899      	ldr	r1, [r3, #8]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800103c:	320e      	adds	r2, #14
 800103e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001042:	e01f      	b.n	8001084 <PID+0x230>
    }
    else if (pid->out[i] < pid->limMin) {
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001048:	320e      	adds	r2, #14
 800104a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	4619      	mov	r1, r3
 8001054:	4610      	mov	r0, r2
 8001056:	f7ff fe7d 	bl	8000d54 <__aeabi_fcmplt>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d007      	beq.n	8001070 <PID+0x21c>
        pid->out[i] = pid->limMin;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6859      	ldr	r1, [r3, #4]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001068:	320e      	adds	r2, #14
 800106a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800106e:	e009      	b.n	8001084 <PID+0x230>
    }
    else{
    	pid->out[i] = pid->out[i];
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001074:	320e      	adds	r2, #14
 8001076:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800107e:	320e      	adds	r2, #14
 8001080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    /* Store error and measurement for later use */
    pid->prevError[i]       = error;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001088:	3208      	adds	r2, #8
 800108a:	6979      	ldr	r1, [r7, #20]
 800108c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pid->prevMeasurement[i] = measurement;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001094:	320c      	adds	r2, #12
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/* Return controller output */
    return pid->out[i];
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010a0:	320e      	adds	r2, #14
 80010a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]

}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080010b0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80010b6:	4b25      	ldr	r3, [pc, #148]	; (800114c <MX_CAN_Init+0x9c>)
 80010b8:	4a25      	ldr	r2, [pc, #148]	; (8001150 <MX_CAN_Init+0xa0>)
 80010ba:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 80010bc:	4b23      	ldr	r3, [pc, #140]	; (800114c <MX_CAN_Init+0x9c>)
 80010be:	2209      	movs	r2, #9
 80010c0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80010c2:	4b22      	ldr	r3, [pc, #136]	; (800114c <MX_CAN_Init+0x9c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010c8:	4b20      	ldr	r3, [pc, #128]	; (800114c <MX_CAN_Init+0x9c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80010ce:	4b1f      	ldr	r3, [pc, #124]	; (800114c <MX_CAN_Init+0x9c>)
 80010d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010d4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_CAN_Init+0x9c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <MX_CAN_Init+0x9c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_CAN_Init+0x9c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <MX_CAN_Init+0x9c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_CAN_Init+0x9c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <MX_CAN_Init+0x9c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_CAN_Init+0x9c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001100:	4812      	ldr	r0, [pc, #72]	; (800114c <MX_CAN_Init+0x9c>)
 8001102:	f001 f93f 	bl	8002384 <HAL_CAN_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800110c:	f000 fdea 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001110:	2301      	movs	r3, #1
 8001112:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8001114:	230a      	movs	r3, #10
 8001116:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8001118:	2301      	movs	r3, #1
 800111a:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x222<<5;
 800111c:	f244 4340 	movw	r3, #17472	; 0x4440
 8001120:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x000<<5;
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001132:	2301      	movs	r3, #1
 8001134:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800113a:	463b      	mov	r3, r7
 800113c:	4619      	mov	r1, r3
 800113e:	4803      	ldr	r0, [pc, #12]	; (800114c <MX_CAN_Init+0x9c>)
 8001140:	f001 fa1b 	bl	800257a <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	3728      	adds	r7, #40	; 0x28
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000002c 	.word	0x2000002c
 8001150:	40006400 	.word	0x40006400

08001154 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a20      	ldr	r2, [pc, #128]	; (80011f0 <HAL_CAN_MspInit+0x9c>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d139      	bne.n	80011e8 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <HAL_CAN_MspInit+0xa0>)
 8001176:	69db      	ldr	r3, [r3, #28]
 8001178:	4a1e      	ldr	r2, [pc, #120]	; (80011f4 <HAL_CAN_MspInit+0xa0>)
 800117a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800117e:	61d3      	str	r3, [r2, #28]
 8001180:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <HAL_CAN_MspInit+0xa0>)
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_CAN_MspInit+0xa0>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a18      	ldr	r2, [pc, #96]	; (80011f4 <HAL_CAN_MspInit+0xa0>)
 8001192:	f043 0304 	orr.w	r3, r3, #4
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <HAL_CAN_MspInit+0xa0>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4619      	mov	r1, r3
 80011b8:	480f      	ldr	r0, [pc, #60]	; (80011f8 <HAL_CAN_MspInit+0xa4>)
 80011ba:	f001 ff53 	bl	8003064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c8:	2303      	movs	r3, #3
 80011ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	4619      	mov	r1, r3
 80011d2:	4809      	ldr	r0, [pc, #36]	; (80011f8 <HAL_CAN_MspInit+0xa4>)
 80011d4:	f001 ff46 	bl	8003064 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2100      	movs	r1, #0
 80011dc:	2015      	movs	r0, #21
 80011de:	f001 ff0a 	bl	8002ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80011e2:	2015      	movs	r0, #21
 80011e4:	f001 ff23 	bl	800302e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80011e8:	bf00      	nop
 80011ea:	3720      	adds	r7, #32
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40006400 	.word	0x40006400
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40010800 	.word	0x40010800

080011fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 0310 	add.w	r3, r7, #16
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001210:	4b40      	ldr	r3, [pc, #256]	; (8001314 <MX_GPIO_Init+0x118>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	4a3f      	ldr	r2, [pc, #252]	; (8001314 <MX_GPIO_Init+0x118>)
 8001216:	f043 0310 	orr.w	r3, r3, #16
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b3d      	ldr	r3, [pc, #244]	; (8001314 <MX_GPIO_Init+0x118>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f003 0310 	and.w	r3, r3, #16
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001228:	4b3a      	ldr	r3, [pc, #232]	; (8001314 <MX_GPIO_Init+0x118>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	4a39      	ldr	r2, [pc, #228]	; (8001314 <MX_GPIO_Init+0x118>)
 800122e:	f043 0320 	orr.w	r3, r3, #32
 8001232:	6193      	str	r3, [r2, #24]
 8001234:	4b37      	ldr	r3, [pc, #220]	; (8001314 <MX_GPIO_Init+0x118>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	f003 0320 	and.w	r3, r3, #32
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	4b34      	ldr	r3, [pc, #208]	; (8001314 <MX_GPIO_Init+0x118>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a33      	ldr	r2, [pc, #204]	; (8001314 <MX_GPIO_Init+0x118>)
 8001246:	f043 0304 	orr.w	r3, r3, #4
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b31      	ldr	r3, [pc, #196]	; (8001314 <MX_GPIO_Init+0x118>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001258:	4b2e      	ldr	r3, [pc, #184]	; (8001314 <MX_GPIO_Init+0x118>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a2d      	ldr	r2, [pc, #180]	; (8001314 <MX_GPIO_Init+0x118>)
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <MX_GPIO_Init+0x118>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M5_dir_Pin|M1_dir_Pin|M3_dir_Pin, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001276:	4828      	ldr	r0, [pc, #160]	; (8001318 <MX_GPIO_Init+0x11c>)
 8001278:	f002 f88f 	bl	800339a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M2_dir_Pin|M4_dir_Pin|GPIO_PIN_2|M6_dir_Pin, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	f240 4107 	movw	r1, #1031	; 0x407
 8001282:	4826      	ldr	r0, [pc, #152]	; (800131c <MX_GPIO_Init+0x120>)
 8001284:	f002 f889 	bl	800339a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = M5_dir_Pin|M1_dir_Pin|M3_dir_Pin;
 8001288:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800128c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	2301      	movs	r3, #1
 8001290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2302      	movs	r3, #2
 8001298:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	4619      	mov	r1, r3
 80012a0:	481d      	ldr	r0, [pc, #116]	; (8001318 <MX_GPIO_Init+0x11c>)
 80012a2:	f001 fedf 	bl	8003064 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA2 PAPin */
  GPIO_InitStruct.Pin = M2_dir_Pin|M4_dir_Pin|GPIO_PIN_2|M6_dir_Pin;
 80012a6:	f240 4307 	movw	r3, #1031	; 0x407
 80012aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2302      	movs	r3, #2
 80012b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	4619      	mov	r1, r3
 80012be:	4817      	ldr	r0, [pc, #92]	; (800131c <MX_GPIO_Init+0x120>)
 80012c0:	f001 fed0 	bl	8003064 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = En1_C1_Pin|En1_C2_Pin|En2_C1_Pin|En2_C2_Pin;
 80012c4:	2378      	movs	r3, #120	; 0x78
 80012c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <MX_GPIO_Init+0x124>)
 80012ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	4619      	mov	r1, r3
 80012d6:	4811      	ldr	r0, [pc, #68]	; (800131c <MX_GPIO_Init+0x120>)
 80012d8:	f001 fec4 	bl	8003064 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80012dc:	2200      	movs	r2, #0
 80012de:	2100      	movs	r1, #0
 80012e0:	2009      	movs	r0, #9
 80012e2:	f001 fe88 	bl	8002ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80012e6:	2009      	movs	r0, #9
 80012e8:	f001 fea1 	bl	800302e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	200a      	movs	r0, #10
 80012f2:	f001 fe80 	bl	8002ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80012f6:	200a      	movs	r0, #10
 80012f8:	f001 fe99 	bl	800302e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2100      	movs	r1, #0
 8001300:	2017      	movs	r0, #23
 8001302:	f001 fe78 	bl	8002ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001306:	2017      	movs	r0, #23
 8001308:	f001 fe91 	bl	800302e <HAL_NVIC_EnableIRQ>

}
 800130c:	bf00      	nop
 800130e:	3720      	adds	r7, #32
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40021000 	.word	0x40021000
 8001318:	40011000 	.word	0x40011000
 800131c:	40010800 	.word	0x40010800
 8001320:	10310000 	.word	0x10310000

08001324 <map>:
uint8_t TxData[4];
uint32_t TxMailbox;
uint8_t cntt;

float map(float Input, float Min_Input, float Max_Input, float Min_Output, float Max_Output)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	603b      	str	r3, [r7, #0]

	return (float)((Input - Min_Input) * (Max_Output - Min_Output) / (Max_Input - Min_Input) + Min_Output);
 8001332:	68b9      	ldr	r1, [r7, #8]
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f7ff fa65 	bl	8000804 <__aeabi_fsub>
 800133a:	4603      	mov	r3, r0
 800133c:	461c      	mov	r4, r3
 800133e:	6839      	ldr	r1, [r7, #0]
 8001340:	6a38      	ldr	r0, [r7, #32]
 8001342:	f7ff fa5f 	bl	8000804 <__aeabi_fsub>
 8001346:	4603      	mov	r3, r0
 8001348:	4619      	mov	r1, r3
 800134a:	4620      	mov	r0, r4
 800134c:	f7ff fb64 	bl	8000a18 <__aeabi_fmul>
 8001350:	4603      	mov	r3, r0
 8001352:	461c      	mov	r4, r3
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff fa54 	bl	8000804 <__aeabi_fsub>
 800135c:	4603      	mov	r3, r0
 800135e:	4619      	mov	r1, r3
 8001360:	4620      	mov	r0, r4
 8001362:	f7ff fc0d 	bl	8000b80 <__aeabi_fdiv>
 8001366:	4603      	mov	r3, r0
 8001368:	6839      	ldr	r1, [r7, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fa4c 	bl	8000808 <__addsf3>
 8001370:	4603      	mov	r3, r0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	bd90      	pop	{r4, r7, pc}
	...

0800137c <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af02      	add	r7, sp, #8
 8001382:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001384:	4b40      	ldr	r3, [pc, #256]	; (8001488 <HAL_CAN_RxFifo1MsgPendingCallback+0x10c>)
 8001386:	4a41      	ldr	r2, [pc, #260]	; (800148c <HAL_CAN_RxFifo1MsgPendingCallback+0x110>)
 8001388:	2101      	movs	r1, #1
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f001 fa02 	bl	8002794 <HAL_CAN_GetRxMessage>
	cntt++;
 8001390:	4b3f      	ldr	r3, [pc, #252]	; (8001490 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	3301      	adds	r3, #1
 8001396:	b2da      	uxtb	r2, r3
 8001398:	4b3d      	ldr	r3, [pc, #244]	; (8001490 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800139a:	701a      	strb	r2, [r3, #0]
	while (cntt - 100 > 0)
 800139c:	e006      	b.n	80013ac <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 800139e:	2104      	movs	r1, #4
 80013a0:	483c      	ldr	r0, [pc, #240]	; (8001494 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 80013a2:	f002 f812 	bl	80033ca <HAL_GPIO_TogglePin>
		cntt = 0;
 80013a6:	4b3a      	ldr	r3, [pc, #232]	; (8001490 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
	while (cntt - 100 > 0)
 80013ac:	4b38      	ldr	r3, [pc, #224]	; (8001490 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b64      	cmp	r3, #100	; 0x64
 80013b2:	d8f4      	bhi.n	800139e <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
	}

	if (RxHeader.DLC == 3 && RxHeader.StdId == 0x222)
 80013b4:	4b35      	ldr	r3, [pc, #212]	; (800148c <HAL_CAN_RxFifo1MsgPendingCallback+0x110>)
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d126      	bne.n	800140a <HAL_CAN_RxFifo1MsgPendingCallback+0x8e>
 80013bc:	4b33      	ldr	r3, [pc, #204]	; (800148c <HAL_CAN_RxFifo1MsgPendingCallback+0x110>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f240 2222 	movw	r2, #546	; 0x222
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d120      	bne.n	800140a <HAL_CAN_RxFifo1MsgPendingCallback+0x8e>
	{
		data_16 = (RxData[0] << 8) | RxData[1];
 80013c8:	4b2f      	ldr	r3, [pc, #188]	; (8001488 <HAL_CAN_RxFifo1MsgPendingCallback+0x10c>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	4b2d      	ldr	r3, [pc, #180]	; (8001488 <HAL_CAN_RxFifo1MsgPendingCallback+0x10c>)
 80013d2:	785b      	ldrb	r3, [r3, #1]
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	4313      	orrs	r3, r2
 80013d8:	b21b      	sxth	r3, r3
 80013da:	b29a      	uxth	r2, r3
 80013dc:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 80013de:	801a      	strh	r2, [r3, #0]
		speed = map(data_16,0,65535,0,1500);
 80013e0:	4b2d      	ldr	r3, [pc, #180]	; (8001498 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fabf 	bl	8000968 <__aeabi_ui2f>
 80013ea:	4b2c      	ldr	r3, [pc, #176]	; (800149c <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	4a2b      	ldr	r2, [pc, #172]	; (80014a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 80013f4:	f04f 0100 	mov.w	r1, #0
 80013f8:	f7ff ff94 	bl	8001324 <map>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4a29      	ldr	r2, [pc, #164]	; (80014a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 8001400:	6013      	str	r3, [r2, #0]
		load = RxData[2];
 8001402:	4b21      	ldr	r3, [pc, #132]	; (8001488 <HAL_CAN_RxFifo1MsgPendingCallback+0x10c>)
 8001404:	789a      	ldrb	r2, [r3, #2]
 8001406:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>)
 8001408:	701a      	strb	r2, [r3, #0]
	}
	if (RxHeader.DLC == 2 && RxHeader.StdId == 0x444){
 800140a:	4b20      	ldr	r3, [pc, #128]	; (800148c <HAL_CAN_RxFifo1MsgPendingCallback+0x110>)
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d10c      	bne.n	800142c <HAL_CAN_RxFifo1MsgPendingCallback+0xb0>
 8001412:	4b1e      	ldr	r3, [pc, #120]	; (800148c <HAL_CAN_RxFifo1MsgPendingCallback+0x110>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f240 4244 	movw	r2, #1092	; 0x444
 800141a:	4293      	cmp	r3, r2
 800141c:	d106      	bne.n	800142c <HAL_CAN_RxFifo1MsgPendingCallback+0xb0>
		reload_feedback = RxData[0] >> 0 & 1;
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <HAL_CAN_RxFifo1MsgPendingCallback+0x10c>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	b2da      	uxtb	r2, r3
 8001428:	4b20      	ldr	r3, [pc, #128]	; (80014ac <HAL_CAN_RxFifo1MsgPendingCallback+0x130>)
 800142a:	701a      	strb	r2, [r3, #0]

	}
	if (RxHeader.DLC == 1 && RxHeader.StdId == 0x450){
 800142c:	4b17      	ldr	r3, [pc, #92]	; (800148c <HAL_CAN_RxFifo1MsgPendingCallback+0x110>)
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d10c      	bne.n	800144e <HAL_CAN_RxFifo1MsgPendingCallback+0xd2>
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_CAN_RxFifo1MsgPendingCallback+0x110>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800143c:	d107      	bne.n	800144e <HAL_CAN_RxFifo1MsgPendingCallback+0xd2>
		if(reload_error == 0)
 800143e:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x134>)
 8001440:	f993 3000 	ldrsb.w	r3, [r3]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d102      	bne.n	800144e <HAL_CAN_RxFifo1MsgPendingCallback+0xd2>
		{
			reload_control = 1;
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>)
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
		}
	}
	if (RxHeader.DLC == 1 && RxHeader.StdId == 0x460){
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <HAL_CAN_RxFifo1MsgPendingCallback+0x110>)
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d113      	bne.n	800147e <HAL_CAN_RxFifo1MsgPendingCallback+0x102>
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <HAL_CAN_RxFifo1MsgPendingCallback+0x110>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 800145e:	d10e      	bne.n	800147e <HAL_CAN_RxFifo1MsgPendingCallback+0x102>
		if(RxData[0] == 1){
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_CAN_RxFifo1MsgPendingCallback+0x10c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d103      	bne.n	8001470 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>
			input_degree = 90;
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x13c>)
 800146a:	225a      	movs	r2, #90	; 0x5a
 800146c:	701a      	strb	r2, [r3, #0]
		}
		else if (RxData[0] == 0){
			input_degree = 150;
		}
	}
}
 800146e:	e006      	b.n	800147e <HAL_CAN_RxFifo1MsgPendingCallback+0x102>
		else if (RxData[0] == 0){
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_CAN_RxFifo1MsgPendingCallback+0x10c>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d102      	bne.n	800147e <HAL_CAN_RxFifo1MsgPendingCallback+0x102>
			input_degree = 150;
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x13c>)
 800147a:	2296      	movs	r2, #150	; 0x96
 800147c:	701a      	strb	r2, [r3, #0]
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2000010c 	.word	0x2000010c
 800148c:	200000f0 	.word	0x200000f0
 8001490:	20000114 	.word	0x20000114
 8001494:	40010800 	.word	0x40010800
 8001498:	20000054 	.word	0x20000054
 800149c:	44bb8000 	.word	0x44bb8000
 80014a0:	477fff00 	.word	0x477fff00
 80014a4:	20000058 	.word	0x20000058
 80014a8:	2000005c 	.word	0x2000005c
 80014ac:	200000ec 	.word	0x200000ec
 80014b0:	200000ee 	.word	0x200000ee
 80014b4:	200000ed 	.word	0x200000ed
 80014b8:	20000000 	.word	0x20000000
 80014bc:	00000000 	.word	0x00000000

080014c0 <servo_rotation>:

void servo_rotation(uint8_t degree){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
	float y = 0.556 * (float) degree + 25;
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fa4b 	bl	8000968 <__aeabi_ui2f>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f8c9 	bl	800066c <__aeabi_f2d>
 80014da:	a317      	add	r3, pc, #92	; (adr r3, 8001538 <servo_rotation+0x78>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7fe fe36 	bl	8000150 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <servo_rotation+0x80>)
 80014f2:	f7fe ff5d 	bl	80003b0 <__adddf3>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f7ff f92d 	bl	800075c <__aeabi_d2f>
 8001502:	4603      	mov	r3, r0
 8001504:	60fb      	str	r3, [r7, #12]
	uint8_t pwm = round(y);
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f7ff f8b0 	bl	800066c <__aeabi_f2d>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f003 fafc 	bl	8004b10 <round>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f7ff f8fc 	bl	800071c <__aeabi_d2uiz>
 8001524:	4603      	mov	r3, r0
 8001526:	72fb      	strb	r3, [r7, #11]
	TIM3->CCR2 = pwm;
 8001528:	4a06      	ldr	r2, [pc, #24]	; (8001544 <servo_rotation+0x84>)
 800152a:	7afb      	ldrb	r3, [r7, #11]
 800152c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	83126e98 	.word	0x83126e98
 800153c:	3fe1cac0 	.word	0x3fe1cac0
 8001540:	40390000 	.word	0x40390000
 8001544:	40000400 	.word	0x40000400

08001548 <encoder>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
uint16_t encoder(int i)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	if (nowA[i] != lastA[i])
 8001550:	4a6e      	ldr	r2, [pc, #440]	; (800170c <encoder+0x1c4>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	496d      	ldr	r1, [pc, #436]	; (8001710 <encoder+0x1c8>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	440b      	add	r3, r1
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	429a      	cmp	r2, r3
 8001566:	d05d      	beq.n	8001624 <encoder+0xdc>
	{
		lastA[i] = nowA[i];
 8001568:	4a68      	ldr	r2, [pc, #416]	; (800170c <encoder+0x1c4>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	b2d9      	uxtb	r1, r3
 8001572:	4a67      	ldr	r2, [pc, #412]	; (8001710 <encoder+0x1c8>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4413      	add	r3, r2
 8001578:	460a      	mov	r2, r1
 800157a:	701a      	strb	r2, [r3, #0]
		if (lastA[i] == 0)
 800157c:	4a64      	ldr	r2, [pc, #400]	; (8001710 <encoder+0x1c8>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d126      	bne.n	80015d8 <encoder+0x90>
		{
			if (nowB[i] == 0)
 800158a:	4a62      	ldr	r2, [pc, #392]	; (8001714 <encoder+0x1cc>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4413      	add	r3, r2
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10f      	bne.n	80015b8 <encoder+0x70>
			{
				dir[i] = 0;
 8001598:	4a5f      	ldr	r2, [pc, #380]	; (8001718 <encoder+0x1d0>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
				cnt[i]--;
 80015a2:	4a5e      	ldr	r2, [pc, #376]	; (800171c <encoder+0x1d4>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	b299      	uxth	r1, r3
 80015ae:	4a5b      	ldr	r2, [pc, #364]	; (800171c <encoder+0x1d4>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80015b6:	e035      	b.n	8001624 <encoder+0xdc>
			}
			else
			{
				dir[i] = 1;
 80015b8:	4a57      	ldr	r2, [pc, #348]	; (8001718 <encoder+0x1d0>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
				cnt[i]++;
 80015c2:	4a56      	ldr	r2, [pc, #344]	; (800171c <encoder+0x1d4>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015ca:	3301      	adds	r3, #1
 80015cc:	b299      	uxth	r1, r3
 80015ce:	4a53      	ldr	r2, [pc, #332]	; (800171c <encoder+0x1d4>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80015d6:	e025      	b.n	8001624 <encoder+0xdc>
			}
		}
		else
		{
			if (nowB[i] == 1)
 80015d8:	4a4e      	ldr	r2, [pc, #312]	; (8001714 <encoder+0x1cc>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d10f      	bne.n	8001606 <encoder+0xbe>
			{
				dir[i] = 0;
 80015e6:	4a4c      	ldr	r2, [pc, #304]	; (8001718 <encoder+0x1d0>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4413      	add	r3, r2
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
				cnt[i]--;
 80015f0:	4a4a      	ldr	r2, [pc, #296]	; (800171c <encoder+0x1d4>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	b299      	uxth	r1, r3
 80015fc:	4a47      	ldr	r2, [pc, #284]	; (800171c <encoder+0x1d4>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001604:	e00e      	b.n	8001624 <encoder+0xdc>
			}
			else
			{
				dir[i] = 1;
 8001606:	4a44      	ldr	r2, [pc, #272]	; (8001718 <encoder+0x1d0>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
				cnt[i]++;
 8001610:	4a42      	ldr	r2, [pc, #264]	; (800171c <encoder+0x1d4>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001618:	3301      	adds	r3, #1
 800161a:	b299      	uxth	r1, r3
 800161c:	4a3f      	ldr	r2, [pc, #252]	; (800171c <encoder+0x1d4>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
		}
	}
	if (nowB[i] != lastB[i])
 8001624:	4a3b      	ldr	r2, [pc, #236]	; (8001714 <encoder+0x1cc>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	b2da      	uxtb	r2, r3
 800162e:	493c      	ldr	r1, [pc, #240]	; (8001720 <encoder+0x1d8>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	440b      	add	r3, r1
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	429a      	cmp	r2, r3
 800163a:	d05d      	beq.n	80016f8 <encoder+0x1b0>
	{
		lastB[i] = nowB[i];
 800163c:	4a35      	ldr	r2, [pc, #212]	; (8001714 <encoder+0x1cc>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	b2d9      	uxtb	r1, r3
 8001646:	4a36      	ldr	r2, [pc, #216]	; (8001720 <encoder+0x1d8>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4413      	add	r3, r2
 800164c:	460a      	mov	r2, r1
 800164e:	701a      	strb	r2, [r3, #0]
		if (lastB[i] == 0)
 8001650:	4a33      	ldr	r2, [pc, #204]	; (8001720 <encoder+0x1d8>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d126      	bne.n	80016ac <encoder+0x164>
		{
			if (nowA[i] == 1)
 800165e:	4a2b      	ldr	r2, [pc, #172]	; (800170c <encoder+0x1c4>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4413      	add	r3, r2
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b01      	cmp	r3, #1
 800166a:	d10f      	bne.n	800168c <encoder+0x144>
			{
				dir[i] = 0;
 800166c:	4a2a      	ldr	r2, [pc, #168]	; (8001718 <encoder+0x1d0>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
				cnt[i]--;
 8001676:	4a29      	ldr	r2, [pc, #164]	; (800171c <encoder+0x1d4>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800167e:	3b01      	subs	r3, #1
 8001680:	b299      	uxth	r1, r3
 8001682:	4a26      	ldr	r2, [pc, #152]	; (800171c <encoder+0x1d4>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800168a:	e035      	b.n	80016f8 <encoder+0x1b0>
			}
			else
			{
				dir[i] = 1;
 800168c:	4a22      	ldr	r2, [pc, #136]	; (8001718 <encoder+0x1d0>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
				cnt[i]++;
 8001696:	4a21      	ldr	r2, [pc, #132]	; (800171c <encoder+0x1d4>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800169e:	3301      	adds	r3, #1
 80016a0:	b299      	uxth	r1, r3
 80016a2:	4a1e      	ldr	r2, [pc, #120]	; (800171c <encoder+0x1d4>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80016aa:	e025      	b.n	80016f8 <encoder+0x1b0>
			}
		}
		else
		{
			if (nowA[i] == 0)
 80016ac:	4a17      	ldr	r2, [pc, #92]	; (800170c <encoder+0x1c4>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10f      	bne.n	80016da <encoder+0x192>
			{
				dir[i] = 0;
 80016ba:	4a17      	ldr	r2, [pc, #92]	; (8001718 <encoder+0x1d0>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4413      	add	r3, r2
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
				cnt[i]--;
 80016c4:	4a15      	ldr	r2, [pc, #84]	; (800171c <encoder+0x1d4>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016cc:	3b01      	subs	r3, #1
 80016ce:	b299      	uxth	r1, r3
 80016d0:	4a12      	ldr	r2, [pc, #72]	; (800171c <encoder+0x1d4>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80016d8:	e00e      	b.n	80016f8 <encoder+0x1b0>
			}
			else
			{
				dir[i] = 1;
 80016da:	4a0f      	ldr	r2, [pc, #60]	; (8001718 <encoder+0x1d0>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	2201      	movs	r2, #1
 80016e2:	701a      	strb	r2, [r3, #0]
				cnt[i]++;
 80016e4:	4a0d      	ldr	r2, [pc, #52]	; (800171c <encoder+0x1d4>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016ec:	3301      	adds	r3, #1
 80016ee:	b299      	uxth	r1, r3
 80016f0:	4a0a      	ldr	r2, [pc, #40]	; (800171c <encoder+0x1d4>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
		}
	}
	return cnt[i];
 80016f8:	4a08      	ldr	r2, [pc, #32]	; (800171c <encoder+0x1d4>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	200000a0 	.word	0x200000a0
 8001710:	200000a8 	.word	0x200000a8
 8001714:	200000a4 	.word	0x200000a4
 8001718:	200000b0 	.word	0x200000b0
 800171c:	200000b4 	.word	0x200000b4
 8001720:	200000ac 	.word	0x200000ac
 8001724:	00000000 	.word	0x00000000

08001728 <Motors_RPS>:
float Motors_RPS(int j, float SampleTime, float N_round)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
	new_count[Motor1] = Enc_count[0];
 8001734:	4b72      	ldr	r3, [pc, #456]	; (8001900 <Motors_RPS+0x1d8>)
 8001736:	881a      	ldrh	r2, [r3, #0]
 8001738:	4b72      	ldr	r3, [pc, #456]	; (8001904 <Motors_RPS+0x1dc>)
 800173a:	801a      	strh	r2, [r3, #0]
	new_count[Motor2] = Enc_count[1];
 800173c:	4b70      	ldr	r3, [pc, #448]	; (8001900 <Motors_RPS+0x1d8>)
 800173e:	885a      	ldrh	r2, [r3, #2]
 8001740:	4b70      	ldr	r3, [pc, #448]	; (8001904 <Motors_RPS+0x1dc>)
 8001742:	805a      	strh	r2, [r3, #2]

	count_state[Motor1] = !dir[0];
 8001744:	4b70      	ldr	r3, [pc, #448]	; (8001908 <Motors_RPS+0x1e0>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	bf0c      	ite	eq
 800174e:	2301      	moveq	r3, #1
 8001750:	2300      	movne	r3, #0
 8001752:	b2db      	uxtb	r3, r3
 8001754:	461a      	mov	r2, r3
 8001756:	4b6d      	ldr	r3, [pc, #436]	; (800190c <Motors_RPS+0x1e4>)
 8001758:	701a      	strb	r2, [r3, #0]
	count_state[Motor2] = !dir[1];
 800175a:	4b6b      	ldr	r3, [pc, #428]	; (8001908 <Motors_RPS+0x1e0>)
 800175c:	785b      	ldrb	r3, [r3, #1]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	bf0c      	ite	eq
 8001764:	2301      	moveq	r3, #1
 8001766:	2300      	movne	r3, #0
 8001768:	b2db      	uxtb	r3, r3
 800176a:	461a      	mov	r2, r3
 800176c:	4b67      	ldr	r3, [pc, #412]	; (800190c <Motors_RPS+0x1e4>)
 800176e:	705a      	strb	r2, [r3, #1]

	if (count_state[j])
 8001770:	4a66      	ldr	r2, [pc, #408]	; (800190c <Motors_RPS+0x1e4>)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4413      	add	r3, r2
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d04f      	beq.n	800181c <Motors_RPS+0xf4>
	{
		if (new_count[j] <= count[j])
 800177c:	4a61      	ldr	r2, [pc, #388]	; (8001904 <Motors_RPS+0x1dc>)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001784:	4962      	ldr	r1, [pc, #392]	; (8001910 <Motors_RPS+0x1e8>)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800178c:	429a      	cmp	r2, r3
 800178e:	d80e      	bhi.n	80017ae <Motors_RPS+0x86>
		{ // Check for counter underflow
			diff[j] = count[j] - new_count[j];
 8001790:	4a5f      	ldr	r2, [pc, #380]	; (8001910 <Motors_RPS+0x1e8>)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001798:	495a      	ldr	r1, [pc, #360]	; (8001904 <Motors_RPS+0x1dc>)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	b299      	uxth	r1, r3
 80017a4:	4a5b      	ldr	r2, [pc, #364]	; (8001914 <Motors_RPS+0x1ec>)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80017ac:	e00d      	b.n	80017ca <Motors_RPS+0xa2>
		}
		else
		{
			diff[j] = (65536 - new_count[j]) + count[j];
 80017ae:	4a58      	ldr	r2, [pc, #352]	; (8001910 <Motors_RPS+0x1e8>)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80017b6:	4953      	ldr	r1, [pc, #332]	; (8001904 <Motors_RPS+0x1dc>)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	b299      	uxth	r1, r3
 80017c2:	4a54      	ldr	r2, [pc, #336]	; (8001914 <Motors_RPS+0x1ec>)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		speedM[j] = (float)diff[j] * 1000.0f / (N_round * SampleTime) * -1.0;
 80017ca:	4a52      	ldr	r2, [pc, #328]	; (8001914 <Motors_RPS+0x1ec>)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff f8c8 	bl	8000968 <__aeabi_ui2f>
 80017d8:	4603      	mov	r3, r0
 80017da:	494f      	ldr	r1, [pc, #316]	; (8001918 <Motors_RPS+0x1f0>)
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff f91b 	bl	8000a18 <__aeabi_fmul>
 80017e2:	4603      	mov	r3, r0
 80017e4:	461c      	mov	r4, r3
 80017e6:	68b9      	ldr	r1, [r7, #8]
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff f915 	bl	8000a18 <__aeabi_fmul>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4619      	mov	r1, r3
 80017f2:	4620      	mov	r0, r4
 80017f4:	f7ff f9c4 	bl	8000b80 <__aeabi_fdiv>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe ff36 	bl	800066c <__aeabi_f2d>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f7fe ffa8 	bl	800075c <__aeabi_d2f>
 800180c:	4603      	mov	r3, r0
 800180e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001812:	4942      	ldr	r1, [pc, #264]	; (800191c <Motors_RPS+0x1f4>)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800181a:	e043      	b.n	80018a4 <Motors_RPS+0x17c>
	}
	else
	{
		if (new_count[j] >= count[j])
 800181c:	4a39      	ldr	r2, [pc, #228]	; (8001904 <Motors_RPS+0x1dc>)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001824:	493a      	ldr	r1, [pc, #232]	; (8001910 <Motors_RPS+0x1e8>)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800182c:	429a      	cmp	r2, r3
 800182e:	d30e      	bcc.n	800184e <Motors_RPS+0x126>
		{ // Check for counter overflow
			diff[j] = new_count[j] - count[j];
 8001830:	4a34      	ldr	r2, [pc, #208]	; (8001904 <Motors_RPS+0x1dc>)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001838:	4935      	ldr	r1, [pc, #212]	; (8001910 <Motors_RPS+0x1e8>)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	b299      	uxth	r1, r3
 8001844:	4a33      	ldr	r2, [pc, #204]	; (8001914 <Motors_RPS+0x1ec>)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800184c:	e00d      	b.n	800186a <Motors_RPS+0x142>
		}
		else
		{
			diff[j] = (65536 - count[j]) + new_count[j];
 800184e:	4a2d      	ldr	r2, [pc, #180]	; (8001904 <Motors_RPS+0x1dc>)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001856:	492e      	ldr	r1, [pc, #184]	; (8001910 <Motors_RPS+0x1e8>)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	b299      	uxth	r1, r3
 8001862:	4a2c      	ldr	r2, [pc, #176]	; (8001914 <Motors_RPS+0x1ec>)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		speedM[j] = (float)diff[j] * 1000.0f / (N_round * SampleTime);
 800186a:	4a2a      	ldr	r2, [pc, #168]	; (8001914 <Motors_RPS+0x1ec>)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff f878 	bl	8000968 <__aeabi_ui2f>
 8001878:	4603      	mov	r3, r0
 800187a:	4927      	ldr	r1, [pc, #156]	; (8001918 <Motors_RPS+0x1f0>)
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff f8cb 	bl	8000a18 <__aeabi_fmul>
 8001882:	4603      	mov	r3, r0
 8001884:	461c      	mov	r4, r3
 8001886:	68b9      	ldr	r1, [r7, #8]
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff f8c5 	bl	8000a18 <__aeabi_fmul>
 800188e:	4603      	mov	r3, r0
 8001890:	4619      	mov	r1, r3
 8001892:	4620      	mov	r0, r4
 8001894:	f7ff f974 	bl	8000b80 <__aeabi_fdiv>
 8001898:	4603      	mov	r3, r0
 800189a:	4619      	mov	r1, r3
 800189c:	4a1f      	ldr	r2, [pc, #124]	; (800191c <Motors_RPS+0x1f4>)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

	rdps[j] = -2.0f * pi * speedM[j];
 80018a4:	4a1d      	ldr	r2, [pc, #116]	; (800191c <Motors_RPS+0x1f4>)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fedd 	bl	800066c <__aeabi_f2d>
 80018b2:	a311      	add	r3, pc, #68	; (adr r3, 80018f8 <Motors_RPS+0x1d0>)
 80018b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b8:	f7fe fc4a 	bl	8000150 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f7fe ff4a 	bl	800075c <__aeabi_d2f>
 80018c8:	4602      	mov	r2, r0
 80018ca:	4915      	ldr	r1, [pc, #84]	; (8001920 <Motors_RPS+0x1f8>)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	count[j] = new_count[j];
 80018d2:	4a0c      	ldr	r2, [pc, #48]	; (8001904 <Motors_RPS+0x1dc>)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80018da:	4a0d      	ldr	r2, [pc, #52]	; (8001910 <Motors_RPS+0x1e8>)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return rdps[j];
 80018e2:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <Motors_RPS+0x1f8>)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd90      	pop	{r4, r7, pc}
 80018f2:	bf00      	nop
 80018f4:	f3af 8000 	nop.w
 80018f8:	c083126f 	.word	0xc083126f
 80018fc:	c01921ca 	.word	0xc01921ca
 8001900:	200000b8 	.word	0x200000b8
 8001904:	200000c0 	.word	0x200000c0
 8001908:	200000b0 	.word	0x200000b0
 800190c:	200000c4 	.word	0x200000c4
 8001910:	200000bc 	.word	0x200000bc
 8001914:	200000c8 	.word	0x200000c8
 8001918:	447a0000 	.word	0x447a0000
 800191c:	200000cc 	.word	0x200000cc
 8001920:	200000d4 	.word	0x200000d4

08001924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001928:	f000 fca6 	bl	8002278 <HAL_Init>

  /* USER CODE BEGIN Init */
	PID_Init(&MPID, 2);
 800192c:	2102      	movs	r1, #2
 800192e:	482a      	ldr	r0, [pc, #168]	; (80019d8 <main+0xb4>)
 8001930:	f7ff fa58 	bl	8000de4 <PID_Init>
	MPID.T = 0.01; // T = 20ms
 8001934:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <main+0xb4>)
 8001936:	4a29      	ldr	r2, [pc, #164]	; (80019dc <main+0xb8>)
 8001938:	615a      	str	r2, [r3, #20]
	MPID.limMax = 1000;
 800193a:	4b27      	ldr	r3, [pc, #156]	; (80019d8 <main+0xb4>)
 800193c:	4a28      	ldr	r2, [pc, #160]	; (80019e0 <main+0xbc>)
 800193e:	609a      	str	r2, [r3, #8]
	MPID.limMin = -10;
 8001940:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <main+0xb4>)
 8001942:	4a28      	ldr	r2, [pc, #160]	; (80019e4 <main+0xc0>)
 8001944:	605a      	str	r2, [r3, #4]
	MPID.limMaxInt = 1000;
 8001946:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <main+0xb4>)
 8001948:	4a25      	ldr	r2, [pc, #148]	; (80019e0 <main+0xbc>)
 800194a:	611a      	str	r2, [r3, #16]
	MPID.limMinInt = -10;
 800194c:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <main+0xb4>)
 800194e:	4a25      	ldr	r2, [pc, #148]	; (80019e4 <main+0xc0>)
 8001950:	60da      	str	r2, [r3, #12]
	MPID.tau = 0; // for Kd
 8001952:	4b21      	ldr	r3, [pc, #132]	; (80019d8 <main+0xb4>)
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800195a:	f000 f851 	bl	8001a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800195e:	f7ff fc4d 	bl	80011fc <MX_GPIO_Init>
  MX_TIM2_Init();
 8001962:	f000 fa51 	bl	8001e08 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001966:	f000 fb15 	bl	8001f94 <MX_TIM4_Init>
  MX_CAN_Init();
 800196a:	f7ff fba1 	bl	80010b0 <MX_CAN_Init>
  MX_TIM3_Init();
 800196e:	f000 fa99 	bl	8001ea4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);						// TIMER INTERUPT
 8001972:	481d      	ldr	r0, [pc, #116]	; (80019e8 <main+0xc4>)
 8001974:	f002 f992 	bl	8003c9c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);				// M1
 8001978:	2100      	movs	r1, #0
 800197a:	481c      	ldr	r0, [pc, #112]	; (80019ec <main+0xc8>)
 800197c:	f002 fa38 	bl	8003df0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);				// M2
 8001980:	2104      	movs	r1, #4
 8001982:	481a      	ldr	r0, [pc, #104]	; (80019ec <main+0xc8>)
 8001984:	f002 fa34 	bl	8003df0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);				// M1
 8001988:	2108      	movs	r1, #8
 800198a:	4818      	ldr	r0, [pc, #96]	; (80019ec <main+0xc8>)
 800198c:	f002 fa30 	bl	8003df0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);				// M2
 8001990:	210c      	movs	r1, #12
 8001992:	4816      	ldr	r0, [pc, #88]	; (80019ec <main+0xc8>)
 8001994:	f002 fa2c 	bl	8003df0 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);				// servo
 8001998:	2104      	movs	r1, #4
 800199a:	4815      	ldr	r0, [pc, #84]	; (80019f0 <main+0xcc>)
 800199c:	f002 fa28 	bl	8003df0 <HAL_TIM_PWM_Start>
	HAL_CAN_Start(&hcan);
 80019a0:	4814      	ldr	r0, [pc, #80]	; (80019f4 <main+0xd0>)
 80019a2:	f000 feb3 	bl	800270c <HAL_CAN_Start>

	// Activate the notification
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 80019a6:	2110      	movs	r1, #16
 80019a8:	4812      	ldr	r0, [pc, #72]	; (80019f4 <main+0xd0>)
 80019aa:	f001 f804 	bl	80029b6 <HAL_CAN_ActivateNotification>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GetTick() < 5000){
 80019ae:	f000 fcbb 	bl	8002328 <HAL_GetTick>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f241 3287 	movw	r2, #4999	; 0x1387
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d806      	bhi.n	80019ca <main+0xa6>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80019bc:	2104      	movs	r1, #4
 80019be:	480e      	ldr	r0, [pc, #56]	; (80019f8 <main+0xd4>)
 80019c0:	f001 fd03 	bl	80033ca <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 80019c4:	2064      	movs	r0, #100	; 0x64
 80019c6:	f000 fcb9 	bl	800233c <HAL_Delay>
	  }
	  servo_rotation(input_degree);
 80019ca:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <main+0xd8>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fd76 	bl	80014c0 <servo_rotation>
	  if(HAL_GetTick() < 5000){
 80019d4:	e7eb      	b.n	80019ae <main+0x8a>
 80019d6:	bf00      	nop
 80019d8:	20000060 	.word	0x20000060
 80019dc:	3c23d70a 	.word	0x3c23d70a
 80019e0:	447a0000 	.word	0x447a0000
 80019e4:	c1200000 	.word	0xc1200000
 80019e8:	20000118 	.word	0x20000118
 80019ec:	200001a8 	.word	0x200001a8
 80019f0:	20000160 	.word	0x20000160
 80019f4:	2000002c 	.word	0x2000002c
 80019f8:	40010800 	.word	0x40010800
 80019fc:	20000000 	.word	0x20000000

08001a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b090      	sub	sp, #64	; 0x40
 8001a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a06:	f107 0318 	add.w	r3, r7, #24
 8001a0a:	2228      	movs	r2, #40	; 0x28
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 f876 	bl	8004b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
 8001a20:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a22:	2301      	movs	r3, #1
 8001a24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a30:	2301      	movs	r3, #1
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a34:	2302      	movs	r3, #2
 8001a36:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a3e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a44:	f107 0318 	add.w	r3, r7, #24
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f001 fcef 	bl	800342c <HAL_RCC_OscConfig>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a54:	f000 f946 	bl	8001ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a58:	230f      	movs	r3, #15
 8001a5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	2102      	movs	r1, #2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f001 ff5c 	bl	8003930 <HAL_RCC_ClockConfig>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a7e:	f000 f931 	bl	8001ce4 <Error_Handler>
  }
}
 8001a82:	bf00      	nop
 8001a84:	3740      	adds	r7, #64	; 0x40
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == En1_C1_Pin || En1_C2_Pin)
	{ // ENCODER Motor 1
		nowA[0] = HAL_GPIO_ReadPin(En1_C1_GPIO_Port, En1_C1_Pin);
 8001a96:	2108      	movs	r1, #8
 8001a98:	4818      	ldr	r0, [pc, #96]	; (8001afc <HAL_GPIO_EXTI_Callback+0x70>)
 8001a9a:	f001 fc67 	bl	800336c <HAL_GPIO_ReadPin>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <HAL_GPIO_EXTI_Callback+0x74>)
 8001aa4:	701a      	strb	r2, [r3, #0]
		nowB[0] = HAL_GPIO_ReadPin(En1_C2_GPIO_Port, En1_C2_Pin);
 8001aa6:	2110      	movs	r1, #16
 8001aa8:	4814      	ldr	r0, [pc, #80]	; (8001afc <HAL_GPIO_EXTI_Callback+0x70>)
 8001aaa:	f001 fc5f 	bl	800336c <HAL_GPIO_ReadPin>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <HAL_GPIO_EXTI_Callback+0x78>)
 8001ab4:	701a      	strb	r2, [r3, #0]
		Enc_count[0] = encoder(0);
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f7ff fd46 	bl	8001548 <encoder>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001ac2:	801a      	strh	r2, [r3, #0]
	}
	if (GPIO_Pin == En2_C1_Pin || En2_C2_Pin)
	{ // ENCODER Motor 1
		nowA[1] = HAL_GPIO_ReadPin(En2_C1_GPIO_Port, En2_C1_Pin);
 8001ac4:	2120      	movs	r1, #32
 8001ac6:	480d      	ldr	r0, [pc, #52]	; (8001afc <HAL_GPIO_EXTI_Callback+0x70>)
 8001ac8:	f001 fc50 	bl	800336c <HAL_GPIO_ReadPin>
 8001acc:	4603      	mov	r3, r0
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_GPIO_EXTI_Callback+0x74>)
 8001ad2:	705a      	strb	r2, [r3, #1]
		nowB[1] = HAL_GPIO_ReadPin(En2_C2_GPIO_Port, En2_C2_Pin);
 8001ad4:	2140      	movs	r1, #64	; 0x40
 8001ad6:	4809      	ldr	r0, [pc, #36]	; (8001afc <HAL_GPIO_EXTI_Callback+0x70>)
 8001ad8:	f001 fc48 	bl	800336c <HAL_GPIO_ReadPin>
 8001adc:	4603      	mov	r3, r0
 8001ade:	461a      	mov	r2, r3
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_GPIO_EXTI_Callback+0x78>)
 8001ae2:	705a      	strb	r2, [r3, #1]
		Enc_count[1] = encoder(1);
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f7ff fd2f 	bl	8001548 <encoder>
 8001aea:	4603      	mov	r3, r0
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001af0:	805a      	strh	r2, [r3, #2]
	}
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40010800 	.word	0x40010800
 8001b00:	200000a0 	.word	0x200000a0
 8001b04:	200000a4 	.word	0x200000a4
 8001b08:	200000b8 	.word	0x200000b8

08001b0c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001b0c:	b590      	push	{r4, r7, lr}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af04      	add	r7, sp, #16
 8001b12:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b1c:	f040 80bc 	bne.w	8001c98 <HAL_TIM_PeriodElapsedCallback+0x18c>
		// PID // need to change for using
		pwm_M1 = PID(&MPID, speed, Motor1_speed, MKp, MKi, MKd, Motor1);
 8001b20:	4b5f      	ldr	r3, [pc, #380]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001b22:	6819      	ldr	r1, [r3, #0]
 8001b24:	4b5f      	ldr	r3, [pc, #380]	; (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	9302      	str	r3, [sp, #8]
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	4b5d      	ldr	r3, [pc, #372]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	4b5d      	ldr	r3, [pc, #372]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001b38:	485d      	ldr	r0, [pc, #372]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001b3a:	f7ff f98b 	bl	8000e54 <PID>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4a5c      	ldr	r2, [pc, #368]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001b42:	6013      	str	r3, [r2, #0]
		pwm_M2 = PID(&MPID, speed, Motor2_speed, MKp, MKi, MKd, Motor2);
 8001b44:	4b56      	ldr	r3, [pc, #344]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001b46:	6819      	ldr	r1, [r3, #0]
 8001b48:	4b5b      	ldr	r3, [pc, #364]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	9302      	str	r3, [sp, #8]
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	4b54      	ldr	r3, [pc, #336]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	4b54      	ldr	r3, [pc, #336]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001b5c:	4854      	ldr	r0, [pc, #336]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001b5e:	f7ff f979 	bl	8000e54 <PID>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4a55      	ldr	r2, [pc, #340]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001b66:	6013      	str	r3, [r2, #0]
		// feedback speed
		Motor1_speed = (float)fabs(Motors_RPS(Motor1, Sample_time, CPR));
 8001b68:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 8001b6c:	4954      	ldr	r1, [pc, #336]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f7ff fdda 	bl	8001728 <Motors_RPS>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b7a:	4a4a      	ldr	r2, [pc, #296]	; (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001b7c:	6013      	str	r3, [r2, #0]
		Motor2_speed = (float)fabs(Motors_RPS(Motor2, Sample_time, CPR));
 8001b7e:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 8001b82:	494f      	ldr	r1, [pc, #316]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001b84:	2001      	movs	r0, #1
 8001b86:	f7ff fdcf 	bl	8001728 <Motors_RPS>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b90:	4a49      	ldr	r2, [pc, #292]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001b92:	6013      	str	r3, [r2, #0]

		// dir
		HAL_GPIO_WritePin(M1_dir_GPIO_Port, M1_dir_Pin, 1);		// need to config
 8001b94:	2201      	movs	r2, #1
 8001b96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b9a:	484a      	ldr	r0, [pc, #296]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001b9c:	f001 fbfd 	bl	800339a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_dir_GPIO_Port, M2_dir_Pin, 1);
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	4848      	ldr	r0, [pc, #288]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001ba6:	f001 fbf8 	bl	800339a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M3_dir_GPIO_Port, M3_dir_Pin, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bb0:	4844      	ldr	r0, [pc, #272]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001bb2:	f001 fbf2 	bl	800339a <HAL_GPIO_WritePin>
		// pwm
		if (pwm_M1 > 20)	// M1
 8001bb6:	4b3f      	ldr	r3, [pc, #252]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4944      	ldr	r1, [pc, #272]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff f8e7 	bl	8000d90 <__aeabi_fcmpgt>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <HAL_TIM_PeriodElapsedCallback+0xce>
		{
			TIM4->CCR2 = pwm_M1;
 8001bc8:	4b3a      	ldr	r3, [pc, #232]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4c40      	ldr	r4, [pc, #256]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff f8e8 	bl	8000da4 <__aeabi_f2uiz>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	63a3      	str	r3, [r4, #56]	; 0x38
 8001bd8:	e002      	b.n	8001be0 <HAL_TIM_PeriodElapsedCallback+0xd4>
		}
		else
		{
			TIM4->CCR2 = 0;
 8001bda:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	639a      	str	r2, [r3, #56]	; 0x38
		}
		if (pwm_M2 > 20)	// M2
 8001be0:	4b36      	ldr	r3, [pc, #216]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4939      	ldr	r1, [pc, #228]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff f8d2 	bl	8000d90 <__aeabi_fcmpgt>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d008      	beq.n	8001c04 <HAL_TIM_PeriodElapsedCallback+0xf8>
		{
			TIM4->CCR1 = pwm_M2;
 8001bf2:	4b32      	ldr	r3, [pc, #200]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4c36      	ldr	r4, [pc, #216]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff f8d3 	bl	8000da4 <__aeabi_f2uiz>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6363      	str	r3, [r4, #52]	; 0x34
 8001c02:	e002      	b.n	8001c0a <HAL_TIM_PeriodElapsedCallback+0xfe>
		}
		else
		{
			TIM4->CCR1 = 0;
 8001c04:	4b32      	ldr	r3, [pc, #200]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(load == 1){		// load for shoot // M3
 8001c0a:	4b32      	ldr	r3, [pc, #200]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d104      	bne.n	8001c1c <HAL_TIM_PeriodElapsedCallback+0x110>
			TIM4->CCR3 = 500;
 8001c12:	4b2f      	ldr	r3, [pc, #188]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001c14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c18:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c1a:	e002      	b.n	8001c22 <HAL_TIM_PeriodElapsedCallback+0x116>
		}
		else {
			TIM4->CCR3 = 0;
 8001c1c:	4b2c      	ldr	r3, [pc, #176]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	63da      	str	r2, [r3, #60]	; 0x3c
		}


		// reload
		reload_error = reload_control - reload_feedback;
 8001c22:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001c24:	781a      	ldrb	r2, [r3, #0]
 8001c26:	4b2d      	ldr	r3, [pc, #180]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	b25a      	sxtb	r2, r3
 8001c30:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001c32:	701a      	strb	r2, [r3, #0]

		if(reload_error > 0){	// M4
 8001c34:	4b2a      	ldr	r3, [pc, #168]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001c36:	f993 3000 	ldrsb.w	r3, [r3]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	dd09      	ble.n	8001c52 <HAL_TIM_PeriodElapsedCallback+0x146>

			HAL_GPIO_WritePin(M4_dir_GPIO_Port, M4_dir_Pin, 0);		// CW
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2102      	movs	r1, #2
 8001c42:	4821      	ldr	r0, [pc, #132]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001c44:	f001 fba9 	bl	800339a <HAL_GPIO_WritePin>
			TIM4->CCR4 = 600;
 8001c48:	4b21      	ldr	r3, [pc, #132]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001c4a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001c4e:	641a      	str	r2, [r3, #64]	; 0x40
 8001c50:	e016      	b.n	8001c80 <HAL_TIM_PeriodElapsedCallback+0x174>
		}
		else if(reload_error < 0){
 8001c52:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001c54:	f993 3000 	ldrsb.w	r3, [r3]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	da09      	bge.n	8001c70 <HAL_TIM_PeriodElapsedCallback+0x164>

			HAL_GPIO_WritePin(M4_dir_GPIO_Port, M4_dir_Pin, 1);		// CCW
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	2102      	movs	r1, #2
 8001c60:	4819      	ldr	r0, [pc, #100]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001c62:	f001 fb9a 	bl	800339a <HAL_GPIO_WritePin>
			TIM4->CCR4 = 600;
 8001c66:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001c68:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001c6c:	641a      	str	r2, [r3, #64]	; 0x40
 8001c6e:	e007      	b.n	8001c80 <HAL_TIM_PeriodElapsedCallback+0x174>
		}
		else {

			HAL_GPIO_WritePin(M4_dir_GPIO_Port, M4_dir_Pin, 0);
 8001c70:	2200      	movs	r2, #0
 8001c72:	2102      	movs	r1, #2
 8001c74:	4814      	ldr	r0, [pc, #80]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001c76:	f001 fb90 	bl	800339a <HAL_GPIO_WritePin>
			TIM4->CCR4 = 0;
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(reload_feedback == 1 && reload_error == 0){
 8001c80:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d107      	bne.n	8001c98 <HAL_TIM_PeriodElapsedCallback+0x18c>
 8001c88:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001c8a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d102      	bne.n	8001c98 <HAL_TIM_PeriodElapsedCallback+0x18c>
			reload_control = 0;
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd90      	pop	{r4, r7, pc}
 8001ca0:	20000058 	.word	0x20000058
 8001ca4:	200000dc 	.word	0x200000dc
 8001ca8:	41ccb852 	.word	0x41ccb852
 8001cac:	3f91eb85 	.word	0x3f91eb85
 8001cb0:	20000060 	.word	0x20000060
 8001cb4:	200000e4 	.word	0x200000e4
 8001cb8:	200000e0 	.word	0x200000e0
 8001cbc:	200000e8 	.word	0x200000e8
 8001cc0:	41200000 	.word	0x41200000
 8001cc4:	40011000 	.word	0x40011000
 8001cc8:	40010800 	.word	0x40010800
 8001ccc:	41a00000 	.word	0x41a00000
 8001cd0:	40000800 	.word	0x40000800
 8001cd4:	2000005c 	.word	0x2000005c
 8001cd8:	200000ed 	.word	0x200000ed
 8001cdc:	200000ec 	.word	0x200000ec
 8001ce0:	200000ee 	.word	0x200000ee

08001ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce8:	b672      	cpsid	i
}
 8001cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cec:	e7fe      	b.n	8001cec <Error_Handler+0x8>
	...

08001cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf6:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <HAL_MspInit+0x5c>)
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	4a14      	ldr	r2, [pc, #80]	; (8001d4c <HAL_MspInit+0x5c>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6193      	str	r3, [r2, #24]
 8001d02:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_MspInit+0x5c>)
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <HAL_MspInit+0x5c>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	4a0e      	ldr	r2, [pc, #56]	; (8001d4c <HAL_MspInit+0x5c>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d18:	61d3      	str	r3, [r2, #28]
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <HAL_MspInit+0x5c>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_MspInit+0x60>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <HAL_MspInit+0x60>)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d42:	bf00      	nop
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40010000 	.word	0x40010000

08001d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <NMI_Handler+0x4>

08001d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d5e:	e7fe      	b.n	8001d5e <HardFault_Handler+0x4>

08001d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <MemManage_Handler+0x4>

08001d66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d6a:	e7fe      	b.n	8001d6a <BusFault_Handler+0x4>

08001d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d70:	e7fe      	b.n	8001d70 <UsageFault_Handler+0x4>

08001d72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr

08001d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr

08001d96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d9a:	f000 fab3 	bl	8002304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(En1_C1_Pin);
 8001da6:	2008      	movs	r0, #8
 8001da8:	f001 fb28 	bl	80033fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(En1_C2_Pin);
 8001db4:	2010      	movs	r0, #16
 8001db6:	f001 fb21 	bl	80033fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <CAN1_RX1_IRQHandler+0x10>)
 8001dc6:	f000 fe1b 	bl	8002a00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2000002c 	.word	0x2000002c

08001dd4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(En2_C1_Pin);
 8001dd8:	2020      	movs	r0, #32
 8001dda:	f001 fb0f 	bl	80033fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(En2_C2_Pin);
 8001dde:	2040      	movs	r0, #64	; 0x40
 8001de0:	f001 fb0c 	bl	80033fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dec:	4802      	ldr	r0, [pc, #8]	; (8001df8 <TIM2_IRQHandler+0x10>)
 8001dee:	f002 f8a1 	bl	8003f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000118 	.word	0x20000118

08001dfc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e0e:	f107 0308 	add.w	r3, r7, #8
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]
 8001e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e24:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <MX_TIM2_Init+0x98>)
 8001e26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 8001e2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <MX_TIM2_Init+0x98>)
 8001e2e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001e32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e34:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <MX_TIM2_Init+0x98>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001e3a:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <MX_TIM2_Init+0x98>)
 8001e3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e42:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <MX_TIM2_Init+0x98>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <MX_TIM2_Init+0x98>)
 8001e4a:	2280      	movs	r2, #128	; 0x80
 8001e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e4e:	4814      	ldr	r0, [pc, #80]	; (8001ea0 <MX_TIM2_Init+0x98>)
 8001e50:	f001 fed4 	bl	8003bfc <HAL_TIM_Base_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001e5a:	f7ff ff43 	bl	8001ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e64:	f107 0308 	add.w	r3, r7, #8
 8001e68:	4619      	mov	r1, r3
 8001e6a:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <MX_TIM2_Init+0x98>)
 8001e6c:	f002 fa28 	bl	80042c0 <HAL_TIM_ConfigClockSource>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001e76:	f7ff ff35 	bl	8001ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e82:	463b      	mov	r3, r7
 8001e84:	4619      	mov	r1, r3
 8001e86:	4806      	ldr	r0, [pc, #24]	; (8001ea0 <MX_TIM2_Init+0x98>)
 8001e88:	f002 fda6 	bl	80049d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001e92:	f7ff ff27 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e96:	bf00      	nop
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000118 	.word	0x20000118

08001ea4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08e      	sub	sp, #56	; 0x38
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb8:	f107 0320 	add.w	r3, r7, #32
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
 8001ed0:	615a      	str	r2, [r3, #20]
 8001ed2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <MX_TIM3_Init+0xe8>)
 8001ed6:	4a2e      	ldr	r2, [pc, #184]	; (8001f90 <MX_TIM3_Init+0xec>)
 8001ed8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1439;
 8001eda:	4b2c      	ldr	r3, [pc, #176]	; (8001f8c <MX_TIM3_Init+0xe8>)
 8001edc:	f240 529f 	movw	r2, #1439	; 0x59f
 8001ee0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee2:	4b2a      	ldr	r3, [pc, #168]	; (8001f8c <MX_TIM3_Init+0xe8>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001ee8:	4b28      	ldr	r3, [pc, #160]	; (8001f8c <MX_TIM3_Init+0xe8>)
 8001eea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef0:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <MX_TIM3_Init+0xe8>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ef6:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <MX_TIM3_Init+0xe8>)
 8001ef8:	2280      	movs	r2, #128	; 0x80
 8001efa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001efc:	4823      	ldr	r0, [pc, #140]	; (8001f8c <MX_TIM3_Init+0xe8>)
 8001efe:	f001 fe7d 	bl	8003bfc <HAL_TIM_Base_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001f08:	f7ff feec 	bl	8001ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f16:	4619      	mov	r1, r3
 8001f18:	481c      	ldr	r0, [pc, #112]	; (8001f8c <MX_TIM3_Init+0xe8>)
 8001f1a:	f002 f9d1 	bl	80042c0 <HAL_TIM_ConfigClockSource>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001f24:	f7ff fede 	bl	8001ce4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f28:	4818      	ldr	r0, [pc, #96]	; (8001f8c <MX_TIM3_Init+0xe8>)
 8001f2a:	f001 ff09 	bl	8003d40 <HAL_TIM_PWM_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001f34:	f7ff fed6 	bl	8001ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f40:	f107 0320 	add.w	r3, r7, #32
 8001f44:	4619      	mov	r1, r3
 8001f46:	4811      	ldr	r0, [pc, #68]	; (8001f8c <MX_TIM3_Init+0xe8>)
 8001f48:	f002 fd46 	bl	80049d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001f52:	f7ff fec7 	bl	8001ce4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f56:	2360      	movs	r3, #96	; 0x60
 8001f58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	2204      	movs	r2, #4
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4807      	ldr	r0, [pc, #28]	; (8001f8c <MX_TIM3_Init+0xe8>)
 8001f6e:	f002 f8e9 	bl	8004144 <HAL_TIM_PWM_ConfigChannel>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001f78:	f7ff feb4 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f7c:	4803      	ldr	r0, [pc, #12]	; (8001f8c <MX_TIM3_Init+0xe8>)
 8001f7e:	f000 f8ed 	bl	800215c <HAL_TIM_MspPostInit>

}
 8001f82:	bf00      	nop
 8001f84:	3738      	adds	r7, #56	; 0x38
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000160 	.word	0x20000160
 8001f90:	40000400 	.word	0x40000400

08001f94 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08e      	sub	sp, #56	; 0x38
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa8:	f107 0320 	add.w	r3, r7, #32
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fb2:	1d3b      	adds	r3, r7, #4
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
 8001fc0:	615a      	str	r2, [r3, #20]
 8001fc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fc4:	4b3d      	ldr	r3, [pc, #244]	; (80020bc <MX_TIM4_Init+0x128>)
 8001fc6:	4a3e      	ldr	r2, [pc, #248]	; (80020c0 <MX_TIM4_Init+0x12c>)
 8001fc8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 8001fca:	4b3c      	ldr	r3, [pc, #240]	; (80020bc <MX_TIM4_Init+0x128>)
 8001fcc:	220a      	movs	r2, #10
 8001fce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd0:	4b3a      	ldr	r3, [pc, #232]	; (80020bc <MX_TIM4_Init+0x128>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001fd6:	4b39      	ldr	r3, [pc, #228]	; (80020bc <MX_TIM4_Init+0x128>)
 8001fd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fdc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fde:	4b37      	ldr	r3, [pc, #220]	; (80020bc <MX_TIM4_Init+0x128>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fe4:	4b35      	ldr	r3, [pc, #212]	; (80020bc <MX_TIM4_Init+0x128>)
 8001fe6:	2280      	movs	r2, #128	; 0x80
 8001fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fea:	4834      	ldr	r0, [pc, #208]	; (80020bc <MX_TIM4_Init+0x128>)
 8001fec:	f001 fe06 	bl	8003bfc <HAL_TIM_Base_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001ff6:	f7ff fe75 	bl	8001ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002000:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002004:	4619      	mov	r1, r3
 8002006:	482d      	ldr	r0, [pc, #180]	; (80020bc <MX_TIM4_Init+0x128>)
 8002008:	f002 f95a 	bl	80042c0 <HAL_TIM_ConfigClockSource>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002012:	f7ff fe67 	bl	8001ce4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002016:	4829      	ldr	r0, [pc, #164]	; (80020bc <MX_TIM4_Init+0x128>)
 8002018:	f001 fe92 	bl	8003d40 <HAL_TIM_PWM_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002022:	f7ff fe5f 	bl	8001ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800202e:	f107 0320 	add.w	r3, r7, #32
 8002032:	4619      	mov	r1, r3
 8002034:	4821      	ldr	r0, [pc, #132]	; (80020bc <MX_TIM4_Init+0x128>)
 8002036:	f002 fccf 	bl	80049d8 <HAL_TIMEx_MasterConfigSynchronization>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002040:	f7ff fe50 	bl	8001ce4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002044:	2360      	movs	r3, #96	; 0x60
 8002046:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	2200      	movs	r2, #0
 8002058:	4619      	mov	r1, r3
 800205a:	4818      	ldr	r0, [pc, #96]	; (80020bc <MX_TIM4_Init+0x128>)
 800205c:	f002 f872 	bl	8004144 <HAL_TIM_PWM_ConfigChannel>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002066:	f7ff fe3d 	bl	8001ce4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	2204      	movs	r2, #4
 800206e:	4619      	mov	r1, r3
 8002070:	4812      	ldr	r0, [pc, #72]	; (80020bc <MX_TIM4_Init+0x128>)
 8002072:	f002 f867 	bl	8004144 <HAL_TIM_PWM_ConfigChannel>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800207c:	f7ff fe32 	bl	8001ce4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	2208      	movs	r2, #8
 8002084:	4619      	mov	r1, r3
 8002086:	480d      	ldr	r0, [pc, #52]	; (80020bc <MX_TIM4_Init+0x128>)
 8002088:	f002 f85c 	bl	8004144 <HAL_TIM_PWM_ConfigChannel>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8002092:	f7ff fe27 	bl	8001ce4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	220c      	movs	r2, #12
 800209a:	4619      	mov	r1, r3
 800209c:	4807      	ldr	r0, [pc, #28]	; (80020bc <MX_TIM4_Init+0x128>)
 800209e:	f002 f851 	bl	8004144 <HAL_TIM_PWM_ConfigChannel>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 80020a8:	f7ff fe1c 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80020ac:	4803      	ldr	r0, [pc, #12]	; (80020bc <MX_TIM4_Init+0x128>)
 80020ae:	f000 f855 	bl	800215c <HAL_TIM_MspPostInit>

}
 80020b2:	bf00      	nop
 80020b4:	3738      	adds	r7, #56	; 0x38
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200001a8 	.word	0x200001a8
 80020c0:	40000800 	.word	0x40000800

080020c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d4:	d114      	bne.n	8002100 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020d6:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <HAL_TIM_Base_MspInit+0x8c>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	4a1d      	ldr	r2, [pc, #116]	; (8002150 <HAL_TIM_Base_MspInit+0x8c>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	61d3      	str	r3, [r2, #28]
 80020e2:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <HAL_TIM_Base_MspInit+0x8c>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2100      	movs	r1, #0
 80020f2:	201c      	movs	r0, #28
 80020f4:	f000 ff7f 	bl	8002ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020f8:	201c      	movs	r0, #28
 80020fa:	f000 ff98 	bl	800302e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80020fe:	e022      	b.n	8002146 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a13      	ldr	r2, [pc, #76]	; (8002154 <HAL_TIM_Base_MspInit+0x90>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d10c      	bne.n	8002124 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <HAL_TIM_Base_MspInit+0x8c>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	4a10      	ldr	r2, [pc, #64]	; (8002150 <HAL_TIM_Base_MspInit+0x8c>)
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	61d3      	str	r3, [r2, #28]
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <HAL_TIM_Base_MspInit+0x8c>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	693b      	ldr	r3, [r7, #16]
}
 8002122:	e010      	b.n	8002146 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM4)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0b      	ldr	r2, [pc, #44]	; (8002158 <HAL_TIM_Base_MspInit+0x94>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d10b      	bne.n	8002146 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HAL_TIM_Base_MspInit+0x8c>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	4a07      	ldr	r2, [pc, #28]	; (8002150 <HAL_TIM_Base_MspInit+0x8c>)
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	61d3      	str	r3, [r2, #28]
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_TIM_Base_MspInit+0x8c>)
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
}
 8002146:	bf00      	nop
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000
 8002154:	40000400 	.word	0x40000400
 8002158:	40000800 	.word	0x40000800

0800215c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a28      	ldr	r2, [pc, #160]	; (8002218 <HAL_TIM_MspPostInit+0xbc>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d12a      	bne.n	80021d2 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800217c:	4b27      	ldr	r3, [pc, #156]	; (800221c <HAL_TIM_MspPostInit+0xc0>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	4a26      	ldr	r2, [pc, #152]	; (800221c <HAL_TIM_MspPostInit+0xc0>)
 8002182:	f043 0308 	orr.w	r3, r3, #8
 8002186:	6193      	str	r3, [r2, #24]
 8002188:	4b24      	ldr	r3, [pc, #144]	; (800221c <HAL_TIM_MspPostInit+0xc0>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Servo_Pin_Pin;
 8002194:	2320      	movs	r3, #32
 8002196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
 800219a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2302      	movs	r3, #2
 800219e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(Servo_Pin_GPIO_Port, &GPIO_InitStruct);
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	4619      	mov	r1, r3
 80021a6:	481e      	ldr	r0, [pc, #120]	; (8002220 <HAL_TIM_MspPostInit+0xc4>)
 80021a8:	f000 ff5c 	bl	8003064 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80021ac:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <HAL_TIM_MspPostInit+0xc8>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ca:	4a16      	ldr	r2, [pc, #88]	; (8002224 <HAL_TIM_MspPostInit+0xc8>)
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80021d0:	e01d      	b.n	800220e <HAL_TIM_MspPostInit+0xb2>
  else if(timHandle->Instance==TIM4)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a14      	ldr	r2, [pc, #80]	; (8002228 <HAL_TIM_MspPostInit+0xcc>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d118      	bne.n	800220e <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <HAL_TIM_MspPostInit+0xc0>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	4a0e      	ldr	r2, [pc, #56]	; (800221c <HAL_TIM_MspPostInit+0xc0>)
 80021e2:	f043 0308 	orr.w	r3, r3, #8
 80021e6:	6193      	str	r3, [r2, #24]
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <HAL_TIM_MspPostInit+0xc0>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80021f4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80021f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2302      	movs	r3, #2
 8002200:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	4619      	mov	r1, r3
 8002208:	4805      	ldr	r0, [pc, #20]	; (8002220 <HAL_TIM_MspPostInit+0xc4>)
 800220a:	f000 ff2b 	bl	8003064 <HAL_GPIO_Init>
}
 800220e:	bf00      	nop
 8002210:	3728      	adds	r7, #40	; 0x28
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40000400 	.word	0x40000400
 800221c:	40021000 	.word	0x40021000
 8002220:	40010c00 	.word	0x40010c00
 8002224:	40010000 	.word	0x40010000
 8002228:	40000800 	.word	0x40000800

0800222c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800222c:	480c      	ldr	r0, [pc, #48]	; (8002260 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800222e:	490d      	ldr	r1, [pc, #52]	; (8002264 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002230:	4a0d      	ldr	r2, [pc, #52]	; (8002268 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002234:	e002      	b.n	800223c <LoopCopyDataInit>

08002236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223a:	3304      	adds	r3, #4

0800223c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800223c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002240:	d3f9      	bcc.n	8002236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002242:	4a0a      	ldr	r2, [pc, #40]	; (800226c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002244:	4c0a      	ldr	r4, [pc, #40]	; (8002270 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002248:	e001      	b.n	800224e <LoopFillZerobss>

0800224a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800224c:	3204      	adds	r2, #4

0800224e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002250:	d3fb      	bcc.n	800224a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002252:	f7ff fdd3 	bl	8001dfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002256:	f002 fc2f 	bl	8004ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800225a:	f7ff fb63 	bl	8001924 <main>
  bx lr
 800225e:	4770      	bx	lr
  ldr r0, =_sdata
 8002260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002264:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002268:	08004be0 	.word	0x08004be0
  ldr r2, =_sbss
 800226c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002270:	200001f4 	.word	0x200001f4

08002274 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002274:	e7fe      	b.n	8002274 <ADC1_2_IRQHandler>
	...

08002278 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800227c:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <HAL_Init+0x28>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <HAL_Init+0x28>)
 8002282:	f043 0310 	orr.w	r3, r3, #16
 8002286:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002288:	2003      	movs	r0, #3
 800228a:	f000 fea9 	bl	8002fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800228e:	200f      	movs	r0, #15
 8002290:	f000 f808 	bl	80022a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002294:	f7ff fd2c 	bl	8001cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40022000 	.word	0x40022000

080022a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <HAL_InitTick+0x54>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <HAL_InitTick+0x58>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	4619      	mov	r1, r3
 80022b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80022be:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 fec1 	bl	800304a <HAL_SYSTICK_Config>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e00e      	b.n	80022f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b0f      	cmp	r3, #15
 80022d6:	d80a      	bhi.n	80022ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d8:	2200      	movs	r2, #0
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022e0:	f000 fe89 	bl	8002ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e4:	4a06      	ldr	r2, [pc, #24]	; (8002300 <HAL_InitTick+0x5c>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	e000      	b.n	80022f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000004 	.word	0x20000004
 80022fc:	2000000c 	.word	0x2000000c
 8002300:	20000008 	.word	0x20000008

08002304 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_IncTick+0x1c>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	4b05      	ldr	r3, [pc, #20]	; (8002324 <HAL_IncTick+0x20>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4413      	add	r3, r2
 8002314:	4a03      	ldr	r2, [pc, #12]	; (8002324 <HAL_IncTick+0x20>)
 8002316:	6013      	str	r3, [r2, #0]
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	2000000c 	.word	0x2000000c
 8002324:	200001f0 	.word	0x200001f0

08002328 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return uwTick;
 800232c:	4b02      	ldr	r3, [pc, #8]	; (8002338 <HAL_GetTick+0x10>)
 800232e:	681b      	ldr	r3, [r3, #0]
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr
 8002338:	200001f0 	.word	0x200001f0

0800233c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002344:	f7ff fff0 	bl	8002328 <HAL_GetTick>
 8002348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002354:	d005      	beq.n	8002362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002356:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <HAL_Delay+0x44>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	461a      	mov	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4413      	add	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002362:	bf00      	nop
 8002364:	f7ff ffe0 	bl	8002328 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	429a      	cmp	r2, r3
 8002372:	d8f7      	bhi.n	8002364 <HAL_Delay+0x28>
  {
  }
}
 8002374:	bf00      	nop
 8002376:	bf00      	nop
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2000000c 	.word	0x2000000c

08002384 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e0ed      	b.n	8002572 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3020 	ldrb.w	r3, [r3, #32]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d102      	bne.n	80023a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fe fed6 	bl	8001154 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023b8:	f7ff ffb6 	bl	8002328 <HAL_GetTick>
 80023bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023be:	e012      	b.n	80023e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023c0:	f7ff ffb2 	bl	8002328 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b0a      	cmp	r3, #10
 80023cc:	d90b      	bls.n	80023e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2205      	movs	r2, #5
 80023de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e0c5      	b.n	8002572 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0e5      	beq.n	80023c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0202 	bic.w	r2, r2, #2
 8002402:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002404:	f7ff ff90 	bl	8002328 <HAL_GetTick>
 8002408:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800240a:	e012      	b.n	8002432 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800240c:	f7ff ff8c 	bl	8002328 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b0a      	cmp	r3, #10
 8002418:	d90b      	bls.n	8002432 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2205      	movs	r2, #5
 800242a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e09f      	b.n	8002572 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1e5      	bne.n	800240c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	7e1b      	ldrb	r3, [r3, #24]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d108      	bne.n	800245a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	e007      	b.n	800246a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002468:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	7e5b      	ldrb	r3, [r3, #25]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d108      	bne.n	8002484 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	e007      	b.n	8002494 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002492:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	7e9b      	ldrb	r3, [r3, #26]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d108      	bne.n	80024ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0220 	orr.w	r2, r2, #32
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	e007      	b.n	80024be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0220 	bic.w	r2, r2, #32
 80024bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	7edb      	ldrb	r3, [r3, #27]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d108      	bne.n	80024d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0210 	bic.w	r2, r2, #16
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	e007      	b.n	80024e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0210 	orr.w	r2, r2, #16
 80024e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	7f1b      	ldrb	r3, [r3, #28]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d108      	bne.n	8002502 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0208 	orr.w	r2, r2, #8
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	e007      	b.n	8002512 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0208 	bic.w	r2, r2, #8
 8002510:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	7f5b      	ldrb	r3, [r3, #29]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d108      	bne.n	800252c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0204 	orr.w	r2, r2, #4
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	e007      	b.n	800253c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0204 	bic.w	r2, r2, #4
 800253a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	ea42 0103 	orr.w	r1, r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	1e5a      	subs	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800257a:	b480      	push	{r7}
 800257c:	b087      	sub	sp, #28
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002590:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002592:	7cfb      	ldrb	r3, [r7, #19]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d003      	beq.n	80025a0 <HAL_CAN_ConfigFilter+0x26>
 8002598:	7cfb      	ldrb	r3, [r7, #19]
 800259a:	2b02      	cmp	r3, #2
 800259c:	f040 80aa 	bne.w	80026f4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025a6:	f043 0201 	orr.w	r2, r3, #1
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	2201      	movs	r2, #1
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	401a      	ands	r2, r3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d123      	bne.n	8002622 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	401a      	ands	r2, r3
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025fc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	3248      	adds	r2, #72	; 0x48
 8002602:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002616:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002618:	6979      	ldr	r1, [r7, #20]
 800261a:	3348      	adds	r3, #72	; 0x48
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	440b      	add	r3, r1
 8002620:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d122      	bne.n	8002670 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	431a      	orrs	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800264a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	3248      	adds	r2, #72	; 0x48
 8002650:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002664:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002666:	6979      	ldr	r1, [r7, #20]
 8002668:	3348      	adds	r3, #72	; 0x48
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	440b      	add	r3, r1
 800266e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d109      	bne.n	800268c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	43db      	mvns	r3, r3
 8002682:	401a      	ands	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800268a:	e007      	b.n	800269c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	431a      	orrs	r2, r3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d109      	bne.n	80026b8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	401a      	ands	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80026b6:	e007      	b.n	80026c8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	431a      	orrs	r2, r3
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d107      	bne.n	80026e0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	431a      	orrs	r2, r3
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026e6:	f023 0201 	bic.w	r2, r3, #1
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	e006      	b.n	8002702 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
  }
}
 8002702:	4618      	mov	r0, r3
 8002704:	371c      	adds	r7, #28
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 3020 	ldrb.w	r3, [r3, #32]
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b01      	cmp	r3, #1
 800271e:	d12e      	bne.n	800277e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002738:	f7ff fdf6 	bl	8002328 <HAL_GetTick>
 800273c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800273e:	e012      	b.n	8002766 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002740:	f7ff fdf2 	bl	8002328 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b0a      	cmp	r3, #10
 800274c:	d90b      	bls.n	8002766 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2205      	movs	r2, #5
 800275e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e012      	b.n	800278c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1e5      	bne.n	8002740 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	e006      	b.n	800278c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
  }
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027a8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80027aa:	7dfb      	ldrb	r3, [r7, #23]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d003      	beq.n	80027b8 <HAL_CAN_GetRxMessage+0x24>
 80027b0:	7dfb      	ldrb	r3, [r7, #23]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	f040 80f3 	bne.w	800299e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10e      	bne.n	80027dc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d116      	bne.n	80027fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0e7      	b.n	80029ac <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d107      	bne.n	80027fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e0d8      	b.n	80029ac <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	331b      	adds	r3, #27
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	4413      	add	r3, r2
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0204 	and.w	r2, r3, #4
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10c      	bne.n	8002832 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	331b      	adds	r3, #27
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	4413      	add	r3, r2
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	0d5b      	lsrs	r3, r3, #21
 8002828:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	e00b      	b.n	800284a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	331b      	adds	r3, #27
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	4413      	add	r3, r2
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	08db      	lsrs	r3, r3, #3
 8002842:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	331b      	adds	r3, #27
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	4413      	add	r3, r2
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0202 	and.w	r2, r3, #2
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	331b      	adds	r3, #27
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	4413      	add	r3, r2
 800286c:	3304      	adds	r3, #4
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 020f 	and.w	r2, r3, #15
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	331b      	adds	r3, #27
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	4413      	add	r3, r2
 8002884:	3304      	adds	r3, #4
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	0a1b      	lsrs	r3, r3, #8
 800288a:	b2da      	uxtb	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	331b      	adds	r3, #27
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	4413      	add	r3, r2
 800289c:	3304      	adds	r3, #4
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	0c1b      	lsrs	r3, r3, #16
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	4413      	add	r3, r2
 80028b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	0a1a      	lsrs	r2, r3, #8
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	3301      	adds	r3, #1
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	0c1a      	lsrs	r2, r3, #16
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	3302      	adds	r3, #2
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	0e1a      	lsrs	r2, r3, #24
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	3303      	adds	r3, #3
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	4413      	add	r3, r2
 8002916:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	3304      	adds	r3, #4
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	4413      	add	r3, r2
 800292e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	0a1a      	lsrs	r2, r3, #8
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	3305      	adds	r3, #5
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	4413      	add	r3, r2
 8002948:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	0c1a      	lsrs	r2, r3, #16
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	3306      	adds	r3, #6
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	4413      	add	r3, r2
 8002962:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0e1a      	lsrs	r2, r3, #24
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	3307      	adds	r3, #7
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d108      	bne.n	800298a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0220 	orr.w	r2, r2, #32
 8002986:	60da      	str	r2, [r3, #12]
 8002988:	e007      	b.n	800299a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f042 0220 	orr.w	r2, r2, #32
 8002998:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	e006      	b.n	80029ac <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
  }
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	371c      	adds	r7, #28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr

080029b6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b085      	sub	sp, #20
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029c6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d002      	beq.n	80029d4 <HAL_CAN_ActivateNotification+0x1e>
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d109      	bne.n	80029e8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6959      	ldr	r1, [r3, #20]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	e006      	b.n	80029f6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
  }
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	; 0x28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d07c      	beq.n	8002b40 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d023      	beq.n	8002a98 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2201      	movs	r2, #1
 8002a56:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f983 	bl	8002d6e <HAL_CAN_TxMailbox0CompleteCallback>
 8002a68:	e016      	b.n	8002a98 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d004      	beq.n	8002a7e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7c:	e00c      	b.n	8002a98 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d004      	beq.n	8002a92 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a90:	e002      	b.n	8002a98 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f986 	bl	8002da4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d024      	beq.n	8002aec <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aaa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f962 	bl	8002d80 <HAL_CAN_TxMailbox1CompleteCallback>
 8002abc:	e016      	b.n	8002aec <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d004      	beq.n	8002ad2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad0:	e00c      	b.n	8002aec <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d004      	beq.n	8002ae6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae4:	e002      	b.n	8002aec <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f965 	bl	8002db6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d024      	beq.n	8002b40 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002afe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f941 	bl	8002d92 <HAL_CAN_TxMailbox2CompleteCallback>
 8002b10:	e016      	b.n	8002b40 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
 8002b24:	e00c      	b.n	8002b40 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d004      	beq.n	8002b3a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
 8002b38:	e002      	b.n	8002b40 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f944 	bl	8002dc8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00c      	beq.n	8002b64 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d007      	beq.n	8002b64 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2210      	movs	r2, #16
 8002b62:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00b      	beq.n	8002b86 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d006      	beq.n	8002b86 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2208      	movs	r2, #8
 8002b7e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f933 	bl	8002dec <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d009      	beq.n	8002ba4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f91b 	bl	8002dda <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00c      	beq.n	8002bc8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d007      	beq.n	8002bc8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2210      	movs	r2, #16
 8002bc6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00b      	beq.n	8002bea <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d006      	beq.n	8002bea <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2208      	movs	r2, #8
 8002be2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f90a 	bl	8002dfe <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d009      	beq.n	8002c08 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d002      	beq.n	8002c08 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7fe fbba 	bl	800137c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00b      	beq.n	8002c2a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d006      	beq.n	8002c2a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2210      	movs	r2, #16
 8002c22:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f8f3 	bl	8002e10 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00b      	beq.n	8002c4c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d006      	beq.n	8002c4c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2208      	movs	r2, #8
 8002c44:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f8eb 	bl	8002e22 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d07b      	beq.n	8002d4e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d072      	beq.n	8002d46 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d008      	beq.n	8002c98 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	f043 0302 	orr.w	r3, r3, #2
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d008      	beq.n	8002cb4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	f043 0304 	orr.w	r3, r3, #4
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d043      	beq.n	8002d46 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d03e      	beq.n	8002d46 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cce:	2b60      	cmp	r3, #96	; 0x60
 8002cd0:	d02b      	beq.n	8002d2a <HAL_CAN_IRQHandler+0x32a>
 8002cd2:	2b60      	cmp	r3, #96	; 0x60
 8002cd4:	d82e      	bhi.n	8002d34 <HAL_CAN_IRQHandler+0x334>
 8002cd6:	2b50      	cmp	r3, #80	; 0x50
 8002cd8:	d022      	beq.n	8002d20 <HAL_CAN_IRQHandler+0x320>
 8002cda:	2b50      	cmp	r3, #80	; 0x50
 8002cdc:	d82a      	bhi.n	8002d34 <HAL_CAN_IRQHandler+0x334>
 8002cde:	2b40      	cmp	r3, #64	; 0x40
 8002ce0:	d019      	beq.n	8002d16 <HAL_CAN_IRQHandler+0x316>
 8002ce2:	2b40      	cmp	r3, #64	; 0x40
 8002ce4:	d826      	bhi.n	8002d34 <HAL_CAN_IRQHandler+0x334>
 8002ce6:	2b30      	cmp	r3, #48	; 0x30
 8002ce8:	d010      	beq.n	8002d0c <HAL_CAN_IRQHandler+0x30c>
 8002cea:	2b30      	cmp	r3, #48	; 0x30
 8002cec:	d822      	bhi.n	8002d34 <HAL_CAN_IRQHandler+0x334>
 8002cee:	2b10      	cmp	r3, #16
 8002cf0:	d002      	beq.n	8002cf8 <HAL_CAN_IRQHandler+0x2f8>
 8002cf2:	2b20      	cmp	r3, #32
 8002cf4:	d005      	beq.n	8002d02 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002cf6:	e01d      	b.n	8002d34 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	f043 0308 	orr.w	r3, r3, #8
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d00:	e019      	b.n	8002d36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	f043 0310 	orr.w	r3, r3, #16
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d0a:	e014      	b.n	8002d36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	f043 0320 	orr.w	r3, r3, #32
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d14:	e00f      	b.n	8002d36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d1e:	e00a      	b.n	8002d36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d28:	e005      	b.n	8002d36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d32:	e000      	b.n	8002d36 <HAL_CAN_IRQHandler+0x336>
            break;
 8002d34:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699a      	ldr	r2, [r3, #24]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002d44:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2204      	movs	r2, #4
 8002d4c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d008      	beq.n	8002d66 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f867 	bl	8002e34 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002d66:	bf00      	nop
 8002d68:	3728      	adds	r7, #40	; 0x28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr

08002d80 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr

08002d92 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr

08002db6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr

08002dda <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr

08002dfe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr
	...

08002e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e58:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <__NVIC_SetPriorityGrouping+0x44>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e64:	4013      	ands	r3, r2
 8002e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e7a:	4a04      	ldr	r2, [pc, #16]	; (8002e8c <__NVIC_SetPriorityGrouping+0x44>)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	60d3      	str	r3, [r2, #12]
}
 8002e80:	bf00      	nop
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e94:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	0a1b      	lsrs	r3, r3, #8
 8002e9a:	f003 0307 	and.w	r3, r3, #7
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	db0b      	blt.n	8002ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	f003 021f 	and.w	r2, r3, #31
 8002ec4:	4906      	ldr	r1, [pc, #24]	; (8002ee0 <__NVIC_EnableIRQ+0x34>)
 8002ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	2001      	movs	r0, #1
 8002ece:	fa00 f202 	lsl.w	r2, r0, r2
 8002ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr
 8002ee0:	e000e100 	.word	0xe000e100

08002ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	6039      	str	r1, [r7, #0]
 8002eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	db0a      	blt.n	8002f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	490c      	ldr	r1, [pc, #48]	; (8002f30 <__NVIC_SetPriority+0x4c>)
 8002efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f02:	0112      	lsls	r2, r2, #4
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	440b      	add	r3, r1
 8002f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f0c:	e00a      	b.n	8002f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	4908      	ldr	r1, [pc, #32]	; (8002f34 <__NVIC_SetPriority+0x50>)
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	3b04      	subs	r3, #4
 8002f1c:	0112      	lsls	r2, r2, #4
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	440b      	add	r3, r1
 8002f22:	761a      	strb	r2, [r3, #24]
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	e000e100 	.word	0xe000e100
 8002f34:	e000ed00 	.word	0xe000ed00

08002f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b089      	sub	sp, #36	; 0x24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f1c3 0307 	rsb	r3, r3, #7
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	bf28      	it	cs
 8002f56:	2304      	movcs	r3, #4
 8002f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	2b06      	cmp	r3, #6
 8002f60:	d902      	bls.n	8002f68 <NVIC_EncodePriority+0x30>
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	3b03      	subs	r3, #3
 8002f66:	e000      	b.n	8002f6a <NVIC_EncodePriority+0x32>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43da      	mvns	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8a:	43d9      	mvns	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f90:	4313      	orrs	r3, r2
         );
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3724      	adds	r7, #36	; 0x24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fac:	d301      	bcc.n	8002fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e00f      	b.n	8002fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fb2:	4a0a      	ldr	r2, [pc, #40]	; (8002fdc <SysTick_Config+0x40>)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fba:	210f      	movs	r1, #15
 8002fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fc0:	f7ff ff90 	bl	8002ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fc4:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <SysTick_Config+0x40>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fca:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <SysTick_Config+0x40>)
 8002fcc:	2207      	movs	r2, #7
 8002fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	e000e010 	.word	0xe000e010

08002fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7ff ff2d 	bl	8002e48 <__NVIC_SetPriorityGrouping>
}
 8002fee:	bf00      	nop
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b086      	sub	sp, #24
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	607a      	str	r2, [r7, #4]
 8003002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003008:	f7ff ff42 	bl	8002e90 <__NVIC_GetPriorityGrouping>
 800300c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68b9      	ldr	r1, [r7, #8]
 8003012:	6978      	ldr	r0, [r7, #20]
 8003014:	f7ff ff90 	bl	8002f38 <NVIC_EncodePriority>
 8003018:	4602      	mov	r2, r0
 800301a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800301e:	4611      	mov	r1, r2
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff ff5f 	bl	8002ee4 <__NVIC_SetPriority>
}
 8003026:	bf00      	nop
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	4603      	mov	r3, r0
 8003036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff ff35 	bl	8002eac <__NVIC_EnableIRQ>
}
 8003042:	bf00      	nop
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b082      	sub	sp, #8
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff ffa2 	bl	8002f9c <SysTick_Config>
 8003058:	4603      	mov	r3, r0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003064:	b480      	push	{r7}
 8003066:	b08b      	sub	sp, #44	; 0x2c
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800306e:	2300      	movs	r3, #0
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003072:	2300      	movs	r3, #0
 8003074:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003076:	e169      	b.n	800334c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003078:	2201      	movs	r2, #1
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	429a      	cmp	r2, r3
 8003092:	f040 8158 	bne.w	8003346 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4a9a      	ldr	r2, [pc, #616]	; (8003304 <HAL_GPIO_Init+0x2a0>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d05e      	beq.n	800315e <HAL_GPIO_Init+0xfa>
 80030a0:	4a98      	ldr	r2, [pc, #608]	; (8003304 <HAL_GPIO_Init+0x2a0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d875      	bhi.n	8003192 <HAL_GPIO_Init+0x12e>
 80030a6:	4a98      	ldr	r2, [pc, #608]	; (8003308 <HAL_GPIO_Init+0x2a4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d058      	beq.n	800315e <HAL_GPIO_Init+0xfa>
 80030ac:	4a96      	ldr	r2, [pc, #600]	; (8003308 <HAL_GPIO_Init+0x2a4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d86f      	bhi.n	8003192 <HAL_GPIO_Init+0x12e>
 80030b2:	4a96      	ldr	r2, [pc, #600]	; (800330c <HAL_GPIO_Init+0x2a8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d052      	beq.n	800315e <HAL_GPIO_Init+0xfa>
 80030b8:	4a94      	ldr	r2, [pc, #592]	; (800330c <HAL_GPIO_Init+0x2a8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d869      	bhi.n	8003192 <HAL_GPIO_Init+0x12e>
 80030be:	4a94      	ldr	r2, [pc, #592]	; (8003310 <HAL_GPIO_Init+0x2ac>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d04c      	beq.n	800315e <HAL_GPIO_Init+0xfa>
 80030c4:	4a92      	ldr	r2, [pc, #584]	; (8003310 <HAL_GPIO_Init+0x2ac>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d863      	bhi.n	8003192 <HAL_GPIO_Init+0x12e>
 80030ca:	4a92      	ldr	r2, [pc, #584]	; (8003314 <HAL_GPIO_Init+0x2b0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d046      	beq.n	800315e <HAL_GPIO_Init+0xfa>
 80030d0:	4a90      	ldr	r2, [pc, #576]	; (8003314 <HAL_GPIO_Init+0x2b0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d85d      	bhi.n	8003192 <HAL_GPIO_Init+0x12e>
 80030d6:	2b12      	cmp	r3, #18
 80030d8:	d82a      	bhi.n	8003130 <HAL_GPIO_Init+0xcc>
 80030da:	2b12      	cmp	r3, #18
 80030dc:	d859      	bhi.n	8003192 <HAL_GPIO_Init+0x12e>
 80030de:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <HAL_GPIO_Init+0x80>)
 80030e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e4:	0800315f 	.word	0x0800315f
 80030e8:	08003139 	.word	0x08003139
 80030ec:	0800314b 	.word	0x0800314b
 80030f0:	0800318d 	.word	0x0800318d
 80030f4:	08003193 	.word	0x08003193
 80030f8:	08003193 	.word	0x08003193
 80030fc:	08003193 	.word	0x08003193
 8003100:	08003193 	.word	0x08003193
 8003104:	08003193 	.word	0x08003193
 8003108:	08003193 	.word	0x08003193
 800310c:	08003193 	.word	0x08003193
 8003110:	08003193 	.word	0x08003193
 8003114:	08003193 	.word	0x08003193
 8003118:	08003193 	.word	0x08003193
 800311c:	08003193 	.word	0x08003193
 8003120:	08003193 	.word	0x08003193
 8003124:	08003193 	.word	0x08003193
 8003128:	08003141 	.word	0x08003141
 800312c:	08003155 	.word	0x08003155
 8003130:	4a79      	ldr	r2, [pc, #484]	; (8003318 <HAL_GPIO_Init+0x2b4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d013      	beq.n	800315e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003136:	e02c      	b.n	8003192 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	623b      	str	r3, [r7, #32]
          break;
 800313e:	e029      	b.n	8003194 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	3304      	adds	r3, #4
 8003146:	623b      	str	r3, [r7, #32]
          break;
 8003148:	e024      	b.n	8003194 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	3308      	adds	r3, #8
 8003150:	623b      	str	r3, [r7, #32]
          break;
 8003152:	e01f      	b.n	8003194 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	330c      	adds	r3, #12
 800315a:	623b      	str	r3, [r7, #32]
          break;
 800315c:	e01a      	b.n	8003194 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d102      	bne.n	800316c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003166:	2304      	movs	r3, #4
 8003168:	623b      	str	r3, [r7, #32]
          break;
 800316a:	e013      	b.n	8003194 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d105      	bne.n	8003180 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003174:	2308      	movs	r3, #8
 8003176:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	611a      	str	r2, [r3, #16]
          break;
 800317e:	e009      	b.n	8003194 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003180:	2308      	movs	r3, #8
 8003182:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	615a      	str	r2, [r3, #20]
          break;
 800318a:	e003      	b.n	8003194 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800318c:	2300      	movs	r3, #0
 800318e:	623b      	str	r3, [r7, #32]
          break;
 8003190:	e000      	b.n	8003194 <HAL_GPIO_Init+0x130>
          break;
 8003192:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2bff      	cmp	r3, #255	; 0xff
 8003198:	d801      	bhi.n	800319e <HAL_GPIO_Init+0x13a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	e001      	b.n	80031a2 <HAL_GPIO_Init+0x13e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3304      	adds	r3, #4
 80031a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2bff      	cmp	r3, #255	; 0xff
 80031a8:	d802      	bhi.n	80031b0 <HAL_GPIO_Init+0x14c>
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	e002      	b.n	80031b6 <HAL_GPIO_Init+0x152>
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	3b08      	subs	r3, #8
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	210f      	movs	r1, #15
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	fa01 f303 	lsl.w	r3, r1, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	401a      	ands	r2, r3
 80031c8:	6a39      	ldr	r1, [r7, #32]
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	fa01 f303 	lsl.w	r3, r1, r3
 80031d0:	431a      	orrs	r2, r3
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 80b1 	beq.w	8003346 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031e4:	4b4d      	ldr	r3, [pc, #308]	; (800331c <HAL_GPIO_Init+0x2b8>)
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	4a4c      	ldr	r2, [pc, #304]	; (800331c <HAL_GPIO_Init+0x2b8>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6193      	str	r3, [r2, #24]
 80031f0:	4b4a      	ldr	r3, [pc, #296]	; (800331c <HAL_GPIO_Init+0x2b8>)
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031fc:	4a48      	ldr	r2, [pc, #288]	; (8003320 <HAL_GPIO_Init+0x2bc>)
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	089b      	lsrs	r3, r3, #2
 8003202:	3302      	adds	r3, #2
 8003204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003208:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	f003 0303 	and.w	r3, r3, #3
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	220f      	movs	r2, #15
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	4013      	ands	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a40      	ldr	r2, [pc, #256]	; (8003324 <HAL_GPIO_Init+0x2c0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d013      	beq.n	8003250 <HAL_GPIO_Init+0x1ec>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a3f      	ldr	r2, [pc, #252]	; (8003328 <HAL_GPIO_Init+0x2c4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00d      	beq.n	800324c <HAL_GPIO_Init+0x1e8>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a3e      	ldr	r2, [pc, #248]	; (800332c <HAL_GPIO_Init+0x2c8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d007      	beq.n	8003248 <HAL_GPIO_Init+0x1e4>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a3d      	ldr	r2, [pc, #244]	; (8003330 <HAL_GPIO_Init+0x2cc>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d101      	bne.n	8003244 <HAL_GPIO_Init+0x1e0>
 8003240:	2303      	movs	r3, #3
 8003242:	e006      	b.n	8003252 <HAL_GPIO_Init+0x1ee>
 8003244:	2304      	movs	r3, #4
 8003246:	e004      	b.n	8003252 <HAL_GPIO_Init+0x1ee>
 8003248:	2302      	movs	r3, #2
 800324a:	e002      	b.n	8003252 <HAL_GPIO_Init+0x1ee>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <HAL_GPIO_Init+0x1ee>
 8003250:	2300      	movs	r3, #0
 8003252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003254:	f002 0203 	and.w	r2, r2, #3
 8003258:	0092      	lsls	r2, r2, #2
 800325a:	4093      	lsls	r3, r2
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003262:	492f      	ldr	r1, [pc, #188]	; (8003320 <HAL_GPIO_Init+0x2bc>)
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	089b      	lsrs	r3, r3, #2
 8003268:	3302      	adds	r3, #2
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d006      	beq.n	800328a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800327c:	4b2d      	ldr	r3, [pc, #180]	; (8003334 <HAL_GPIO_Init+0x2d0>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	492c      	ldr	r1, [pc, #176]	; (8003334 <HAL_GPIO_Init+0x2d0>)
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	4313      	orrs	r3, r2
 8003286:	600b      	str	r3, [r1, #0]
 8003288:	e006      	b.n	8003298 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800328a:	4b2a      	ldr	r3, [pc, #168]	; (8003334 <HAL_GPIO_Init+0x2d0>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	43db      	mvns	r3, r3
 8003292:	4928      	ldr	r1, [pc, #160]	; (8003334 <HAL_GPIO_Init+0x2d0>)
 8003294:	4013      	ands	r3, r2
 8003296:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d006      	beq.n	80032b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032a4:	4b23      	ldr	r3, [pc, #140]	; (8003334 <HAL_GPIO_Init+0x2d0>)
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	4922      	ldr	r1, [pc, #136]	; (8003334 <HAL_GPIO_Init+0x2d0>)
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
 80032b0:	e006      	b.n	80032c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032b2:	4b20      	ldr	r3, [pc, #128]	; (8003334 <HAL_GPIO_Init+0x2d0>)
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	43db      	mvns	r3, r3
 80032ba:	491e      	ldr	r1, [pc, #120]	; (8003334 <HAL_GPIO_Init+0x2d0>)
 80032bc:	4013      	ands	r3, r2
 80032be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d006      	beq.n	80032da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <HAL_GPIO_Init+0x2d0>)
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	4918      	ldr	r1, [pc, #96]	; (8003334 <HAL_GPIO_Init+0x2d0>)
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	608b      	str	r3, [r1, #8]
 80032d8:	e006      	b.n	80032e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032da:	4b16      	ldr	r3, [pc, #88]	; (8003334 <HAL_GPIO_Init+0x2d0>)
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	43db      	mvns	r3, r3
 80032e2:	4914      	ldr	r1, [pc, #80]	; (8003334 <HAL_GPIO_Init+0x2d0>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d021      	beq.n	8003338 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032f4:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <HAL_GPIO_Init+0x2d0>)
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	490e      	ldr	r1, [pc, #56]	; (8003334 <HAL_GPIO_Init+0x2d0>)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60cb      	str	r3, [r1, #12]
 8003300:	e021      	b.n	8003346 <HAL_GPIO_Init+0x2e2>
 8003302:	bf00      	nop
 8003304:	10320000 	.word	0x10320000
 8003308:	10310000 	.word	0x10310000
 800330c:	10220000 	.word	0x10220000
 8003310:	10210000 	.word	0x10210000
 8003314:	10120000 	.word	0x10120000
 8003318:	10110000 	.word	0x10110000
 800331c:	40021000 	.word	0x40021000
 8003320:	40010000 	.word	0x40010000
 8003324:	40010800 	.word	0x40010800
 8003328:	40010c00 	.word	0x40010c00
 800332c:	40011000 	.word	0x40011000
 8003330:	40011400 	.word	0x40011400
 8003334:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003338:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <HAL_GPIO_Init+0x304>)
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	43db      	mvns	r3, r3
 8003340:	4909      	ldr	r1, [pc, #36]	; (8003368 <HAL_GPIO_Init+0x304>)
 8003342:	4013      	ands	r3, r2
 8003344:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	3301      	adds	r3, #1
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	fa22 f303 	lsr.w	r3, r2, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	f47f ae8e 	bne.w	8003078 <HAL_GPIO_Init+0x14>
  }
}
 800335c:	bf00      	nop
 800335e:	bf00      	nop
 8003360:	372c      	adds	r7, #44	; 0x2c
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr
 8003368:	40010400 	.word	0x40010400

0800336c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	887b      	ldrh	r3, [r7, #2]
 800337e:	4013      	ands	r3, r2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d002      	beq.n	800338a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003384:	2301      	movs	r3, #1
 8003386:	73fb      	strb	r3, [r7, #15]
 8003388:	e001      	b.n	800338e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800338a:	2300      	movs	r3, #0
 800338c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800338e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr

0800339a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	460b      	mov	r3, r1
 80033a4:	807b      	strh	r3, [r7, #2]
 80033a6:	4613      	mov	r3, r2
 80033a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033aa:	787b      	ldrb	r3, [r7, #1]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033b0:	887a      	ldrh	r2, [r7, #2]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033b6:	e003      	b.n	80033c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033b8:	887b      	ldrh	r3, [r7, #2]
 80033ba:	041a      	lsls	r2, r3, #16
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	611a      	str	r2, [r3, #16]
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bc80      	pop	{r7}
 80033c8:	4770      	bx	lr

080033ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b085      	sub	sp, #20
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
 80033d2:	460b      	mov	r3, r1
 80033d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033dc:	887a      	ldrh	r2, [r7, #2]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4013      	ands	r3, r2
 80033e2:	041a      	lsls	r2, r3, #16
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	43d9      	mvns	r1, r3
 80033e8:	887b      	ldrh	r3, [r7, #2]
 80033ea:	400b      	ands	r3, r1
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	611a      	str	r2, [r3, #16]
}
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr

080033fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003406:	4b08      	ldr	r3, [pc, #32]	; (8003428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003408:	695a      	ldr	r2, [r3, #20]
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	4013      	ands	r3, r2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d006      	beq.n	8003420 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003412:	4a05      	ldr	r2, [pc, #20]	; (8003428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003418:	88fb      	ldrh	r3, [r7, #6]
 800341a:	4618      	mov	r0, r3
 800341c:	f7fe fb36 	bl	8001a8c <HAL_GPIO_EXTI_Callback>
  }
}
 8003420:	bf00      	nop
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40010400 	.word	0x40010400

0800342c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e272      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 8087 	beq.w	800355a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800344c:	4b92      	ldr	r3, [pc, #584]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 030c 	and.w	r3, r3, #12
 8003454:	2b04      	cmp	r3, #4
 8003456:	d00c      	beq.n	8003472 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003458:	4b8f      	ldr	r3, [pc, #572]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 030c 	and.w	r3, r3, #12
 8003460:	2b08      	cmp	r3, #8
 8003462:	d112      	bne.n	800348a <HAL_RCC_OscConfig+0x5e>
 8003464:	4b8c      	ldr	r3, [pc, #560]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800346c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003470:	d10b      	bne.n	800348a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003472:	4b89      	ldr	r3, [pc, #548]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d06c      	beq.n	8003558 <HAL_RCC_OscConfig+0x12c>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d168      	bne.n	8003558 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e24c      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003492:	d106      	bne.n	80034a2 <HAL_RCC_OscConfig+0x76>
 8003494:	4b80      	ldr	r3, [pc, #512]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a7f      	ldr	r2, [pc, #508]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 800349a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349e:	6013      	str	r3, [r2, #0]
 80034a0:	e02e      	b.n	8003500 <HAL_RCC_OscConfig+0xd4>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10c      	bne.n	80034c4 <HAL_RCC_OscConfig+0x98>
 80034aa:	4b7b      	ldr	r3, [pc, #492]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a7a      	ldr	r2, [pc, #488]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	4b78      	ldr	r3, [pc, #480]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a77      	ldr	r2, [pc, #476]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	e01d      	b.n	8003500 <HAL_RCC_OscConfig+0xd4>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034cc:	d10c      	bne.n	80034e8 <HAL_RCC_OscConfig+0xbc>
 80034ce:	4b72      	ldr	r3, [pc, #456]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a71      	ldr	r2, [pc, #452]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	4b6f      	ldr	r3, [pc, #444]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a6e      	ldr	r2, [pc, #440]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 80034e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	e00b      	b.n	8003500 <HAL_RCC_OscConfig+0xd4>
 80034e8:	4b6b      	ldr	r3, [pc, #428]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a6a      	ldr	r2, [pc, #424]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 80034ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f2:	6013      	str	r3, [r2, #0]
 80034f4:	4b68      	ldr	r3, [pc, #416]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a67      	ldr	r2, [pc, #412]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 80034fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d013      	beq.n	8003530 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003508:	f7fe ff0e 	bl	8002328 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003510:	f7fe ff0a 	bl	8002328 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b64      	cmp	r3, #100	; 0x64
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e200      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003522:	4b5d      	ldr	r3, [pc, #372]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0f0      	beq.n	8003510 <HAL_RCC_OscConfig+0xe4>
 800352e:	e014      	b.n	800355a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003530:	f7fe fefa 	bl	8002328 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003538:	f7fe fef6 	bl	8002328 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b64      	cmp	r3, #100	; 0x64
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e1ec      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800354a:	4b53      	ldr	r3, [pc, #332]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x10c>
 8003556:	e000      	b.n	800355a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d063      	beq.n	800362e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003566:	4b4c      	ldr	r3, [pc, #304]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f003 030c 	and.w	r3, r3, #12
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00b      	beq.n	800358a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003572:	4b49      	ldr	r3, [pc, #292]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	2b08      	cmp	r3, #8
 800357c:	d11c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x18c>
 800357e:	4b46      	ldr	r3, [pc, #280]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d116      	bne.n	80035b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358a:	4b43      	ldr	r3, [pc, #268]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <HAL_RCC_OscConfig+0x176>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d001      	beq.n	80035a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e1c0      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a2:	4b3d      	ldr	r3, [pc, #244]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4939      	ldr	r1, [pc, #228]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b6:	e03a      	b.n	800362e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d020      	beq.n	8003602 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035c0:	4b36      	ldr	r3, [pc, #216]	; (800369c <HAL_RCC_OscConfig+0x270>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c6:	f7fe feaf 	bl	8002328 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ce:	f7fe feab 	bl	8002328 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e1a1      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e0:	4b2d      	ldr	r3, [pc, #180]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ec:	4b2a      	ldr	r3, [pc, #168]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	4927      	ldr	r1, [pc, #156]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	600b      	str	r3, [r1, #0]
 8003600:	e015      	b.n	800362e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003602:	4b26      	ldr	r3, [pc, #152]	; (800369c <HAL_RCC_OscConfig+0x270>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003608:	f7fe fe8e 	bl	8002328 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003610:	f7fe fe8a 	bl	8002328 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e180      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003622:	4b1d      	ldr	r3, [pc, #116]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d03a      	beq.n	80036b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d019      	beq.n	8003676 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003642:	4b17      	ldr	r3, [pc, #92]	; (80036a0 <HAL_RCC_OscConfig+0x274>)
 8003644:	2201      	movs	r2, #1
 8003646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003648:	f7fe fe6e 	bl	8002328 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003650:	f7fe fe6a 	bl	8002328 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e160      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003662:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <HAL_RCC_OscConfig+0x26c>)
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800366e:	2001      	movs	r0, #1
 8003670:	f000 faa6 	bl	8003bc0 <RCC_Delay>
 8003674:	e01c      	b.n	80036b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003676:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <HAL_RCC_OscConfig+0x274>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367c:	f7fe fe54 	bl	8002328 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003682:	e00f      	b.n	80036a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003684:	f7fe fe50 	bl	8002328 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d908      	bls.n	80036a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e146      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
 8003696:	bf00      	nop
 8003698:	40021000 	.word	0x40021000
 800369c:	42420000 	.word	0x42420000
 80036a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a4:	4b92      	ldr	r3, [pc, #584]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1e9      	bne.n	8003684 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 80a6 	beq.w	800380a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036be:	2300      	movs	r3, #0
 80036c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036c2:	4b8b      	ldr	r3, [pc, #556]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10d      	bne.n	80036ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ce:	4b88      	ldr	r3, [pc, #544]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	4a87      	ldr	r2, [pc, #540]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 80036d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d8:	61d3      	str	r3, [r2, #28]
 80036da:	4b85      	ldr	r3, [pc, #532]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e6:	2301      	movs	r3, #1
 80036e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ea:	4b82      	ldr	r3, [pc, #520]	; (80038f4 <HAL_RCC_OscConfig+0x4c8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d118      	bne.n	8003728 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036f6:	4b7f      	ldr	r3, [pc, #508]	; (80038f4 <HAL_RCC_OscConfig+0x4c8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a7e      	ldr	r2, [pc, #504]	; (80038f4 <HAL_RCC_OscConfig+0x4c8>)
 80036fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003702:	f7fe fe11 	bl	8002328 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370a:	f7fe fe0d 	bl	8002328 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b64      	cmp	r3, #100	; 0x64
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e103      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371c:	4b75      	ldr	r3, [pc, #468]	; (80038f4 <HAL_RCC_OscConfig+0x4c8>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0f0      	beq.n	800370a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d106      	bne.n	800373e <HAL_RCC_OscConfig+0x312>
 8003730:	4b6f      	ldr	r3, [pc, #444]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	4a6e      	ldr	r2, [pc, #440]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	6213      	str	r3, [r2, #32]
 800373c:	e02d      	b.n	800379a <HAL_RCC_OscConfig+0x36e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10c      	bne.n	8003760 <HAL_RCC_OscConfig+0x334>
 8003746:	4b6a      	ldr	r3, [pc, #424]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	4a69      	ldr	r2, [pc, #420]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 800374c:	f023 0301 	bic.w	r3, r3, #1
 8003750:	6213      	str	r3, [r2, #32]
 8003752:	4b67      	ldr	r3, [pc, #412]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	4a66      	ldr	r2, [pc, #408]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003758:	f023 0304 	bic.w	r3, r3, #4
 800375c:	6213      	str	r3, [r2, #32]
 800375e:	e01c      	b.n	800379a <HAL_RCC_OscConfig+0x36e>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	2b05      	cmp	r3, #5
 8003766:	d10c      	bne.n	8003782 <HAL_RCC_OscConfig+0x356>
 8003768:	4b61      	ldr	r3, [pc, #388]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	4a60      	ldr	r2, [pc, #384]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 800376e:	f043 0304 	orr.w	r3, r3, #4
 8003772:	6213      	str	r3, [r2, #32]
 8003774:	4b5e      	ldr	r3, [pc, #376]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	4a5d      	ldr	r2, [pc, #372]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	6213      	str	r3, [r2, #32]
 8003780:	e00b      	b.n	800379a <HAL_RCC_OscConfig+0x36e>
 8003782:	4b5b      	ldr	r3, [pc, #364]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	4a5a      	ldr	r2, [pc, #360]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003788:	f023 0301 	bic.w	r3, r3, #1
 800378c:	6213      	str	r3, [r2, #32]
 800378e:	4b58      	ldr	r3, [pc, #352]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	4a57      	ldr	r2, [pc, #348]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003794:	f023 0304 	bic.w	r3, r3, #4
 8003798:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d015      	beq.n	80037ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a2:	f7fe fdc1 	bl	8002328 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a8:	e00a      	b.n	80037c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037aa:	f7fe fdbd 	bl	8002328 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e0b1      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c0:	4b4b      	ldr	r3, [pc, #300]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0ee      	beq.n	80037aa <HAL_RCC_OscConfig+0x37e>
 80037cc:	e014      	b.n	80037f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ce:	f7fe fdab 	bl	8002328 <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d4:	e00a      	b.n	80037ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d6:	f7fe fda7 	bl	8002328 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e09b      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ec:	4b40      	ldr	r3, [pc, #256]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1ee      	bne.n	80037d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037f8:	7dfb      	ldrb	r3, [r7, #23]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d105      	bne.n	800380a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037fe:	4b3c      	ldr	r3, [pc, #240]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	4a3b      	ldr	r2, [pc, #236]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003808:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 8087 	beq.w	8003922 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003814:	4b36      	ldr	r3, [pc, #216]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 030c 	and.w	r3, r3, #12
 800381c:	2b08      	cmp	r3, #8
 800381e:	d061      	beq.n	80038e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	2b02      	cmp	r3, #2
 8003826:	d146      	bne.n	80038b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003828:	4b33      	ldr	r3, [pc, #204]	; (80038f8 <HAL_RCC_OscConfig+0x4cc>)
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382e:	f7fe fd7b 	bl	8002328 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003836:	f7fe fd77 	bl	8002328 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e06d      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003848:	4b29      	ldr	r3, [pc, #164]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1f0      	bne.n	8003836 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385c:	d108      	bne.n	8003870 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800385e:	4b24      	ldr	r3, [pc, #144]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	4921      	ldr	r1, [pc, #132]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 800386c:	4313      	orrs	r3, r2
 800386e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003870:	4b1f      	ldr	r3, [pc, #124]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a19      	ldr	r1, [r3, #32]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	430b      	orrs	r3, r1
 8003882:	491b      	ldr	r1, [pc, #108]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 8003884:	4313      	orrs	r3, r2
 8003886:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003888:	4b1b      	ldr	r3, [pc, #108]	; (80038f8 <HAL_RCC_OscConfig+0x4cc>)
 800388a:	2201      	movs	r2, #1
 800388c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388e:	f7fe fd4b 	bl	8002328 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003896:	f7fe fd47 	bl	8002328 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e03d      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038a8:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0f0      	beq.n	8003896 <HAL_RCC_OscConfig+0x46a>
 80038b4:	e035      	b.n	8003922 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b6:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <HAL_RCC_OscConfig+0x4cc>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038bc:	f7fe fd34 	bl	8002328 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c4:	f7fe fd30 	bl	8002328 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e026      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d6:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <HAL_RCC_OscConfig+0x4c4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0x498>
 80038e2:	e01e      	b.n	8003922 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d107      	bne.n	80038fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e019      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
 80038f0:	40021000 	.word	0x40021000
 80038f4:	40007000 	.word	0x40007000
 80038f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038fc:	4b0b      	ldr	r3, [pc, #44]	; (800392c <HAL_RCC_OscConfig+0x500>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	429a      	cmp	r2, r3
 800390e:	d106      	bne.n	800391e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391a:	429a      	cmp	r2, r3
 800391c:	d001      	beq.n	8003922 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40021000 	.word	0x40021000

08003930 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0d0      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003944:	4b6a      	ldr	r3, [pc, #424]	; (8003af0 <HAL_RCC_ClockConfig+0x1c0>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d910      	bls.n	8003974 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003952:	4b67      	ldr	r3, [pc, #412]	; (8003af0 <HAL_RCC_ClockConfig+0x1c0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 0207 	bic.w	r2, r3, #7
 800395a:	4965      	ldr	r1, [pc, #404]	; (8003af0 <HAL_RCC_ClockConfig+0x1c0>)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	4313      	orrs	r3, r2
 8003960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003962:	4b63      	ldr	r3, [pc, #396]	; (8003af0 <HAL_RCC_ClockConfig+0x1c0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d001      	beq.n	8003974 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e0b8      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d020      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800398c:	4b59      	ldr	r3, [pc, #356]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	4a58      	ldr	r2, [pc, #352]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003992:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003996:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039a4:	4b53      	ldr	r3, [pc, #332]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	4a52      	ldr	r2, [pc, #328]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 80039aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80039ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b0:	4b50      	ldr	r3, [pc, #320]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	494d      	ldr	r1, [pc, #308]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d040      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d107      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d6:	4b47      	ldr	r3, [pc, #284]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d115      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e07f      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d107      	bne.n	80039fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ee:	4b41      	ldr	r3, [pc, #260]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d109      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e073      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039fe:	4b3d      	ldr	r3, [pc, #244]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e06b      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a0e:	4b39      	ldr	r3, [pc, #228]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f023 0203 	bic.w	r2, r3, #3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	4936      	ldr	r1, [pc, #216]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a20:	f7fe fc82 	bl	8002328 <HAL_GetTick>
 8003a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a26:	e00a      	b.n	8003a3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a28:	f7fe fc7e 	bl	8002328 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e053      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3e:	4b2d      	ldr	r3, [pc, #180]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f003 020c 	and.w	r2, r3, #12
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d1eb      	bne.n	8003a28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a50:	4b27      	ldr	r3, [pc, #156]	; (8003af0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d210      	bcs.n	8003a80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5e:	4b24      	ldr	r3, [pc, #144]	; (8003af0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 0207 	bic.w	r2, r3, #7
 8003a66:	4922      	ldr	r1, [pc, #136]	; (8003af0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6e:	4b20      	ldr	r3, [pc, #128]	; (8003af0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e032      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a8c:	4b19      	ldr	r3, [pc, #100]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4916      	ldr	r1, [pc, #88]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0308 	and.w	r3, r3, #8
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d009      	beq.n	8003abe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003aaa:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	490e      	ldr	r1, [pc, #56]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003abe:	f000 f821 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	091b      	lsrs	r3, r3, #4
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	490a      	ldr	r1, [pc, #40]	; (8003af8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad0:	5ccb      	ldrb	r3, [r1, r3]
 8003ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad6:	4a09      	ldr	r2, [pc, #36]	; (8003afc <HAL_RCC_ClockConfig+0x1cc>)
 8003ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ada:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <HAL_RCC_ClockConfig+0x1d0>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fe fbe0 	bl	80022a4 <HAL_InitTick>

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40022000 	.word	0x40022000
 8003af4:	40021000 	.word	0x40021000
 8003af8:	08004bc8 	.word	0x08004bc8
 8003afc:	20000004 	.word	0x20000004
 8003b00:	20000008 	.word	0x20000008

08003b04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b04:	b490      	push	{r4, r7}
 8003b06:	b08a      	sub	sp, #40	; 0x28
 8003b08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b0a:	4b29      	ldr	r3, [pc, #164]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0xac>)
 8003b0c:	1d3c      	adds	r4, r7, #4
 8003b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b14:	f240 2301 	movw	r3, #513	; 0x201
 8003b18:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	2300      	movs	r3, #0
 8003b24:	627b      	str	r3, [r7, #36]	; 0x24
 8003b26:	2300      	movs	r3, #0
 8003b28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b2e:	4b21      	ldr	r3, [pc, #132]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d002      	beq.n	8003b44 <HAL_RCC_GetSysClockFreq+0x40>
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d003      	beq.n	8003b4a <HAL_RCC_GetSysClockFreq+0x46>
 8003b42:	e02b      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b44:	4b1c      	ldr	r3, [pc, #112]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b46:	623b      	str	r3, [r7, #32]
      break;
 8003b48:	e02b      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	0c9b      	lsrs	r3, r3, #18
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	3328      	adds	r3, #40	; 0x28
 8003b54:	443b      	add	r3, r7
 8003b56:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b5a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d012      	beq.n	8003b8c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b66:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	0c5b      	lsrs	r3, r3, #17
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	3328      	adds	r3, #40	; 0x28
 8003b72:	443b      	add	r3, r7
 8003b74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b78:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	4a0e      	ldr	r2, [pc, #56]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b7e:	fb03 f202 	mul.w	r2, r3, r2
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8a:	e004      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	4a0b      	ldr	r2, [pc, #44]	; (8003bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b90:	fb02 f303 	mul.w	r3, r2, r3
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	623b      	str	r3, [r7, #32]
      break;
 8003b9a:	e002      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b9c:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b9e:	623b      	str	r3, [r7, #32]
      break;
 8003ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3728      	adds	r7, #40	; 0x28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc90      	pop	{r4, r7}
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	08004bb8 	.word	0x08004bb8
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	007a1200 	.word	0x007a1200
 8003bbc:	003d0900 	.word	0x003d0900

08003bc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <RCC_Delay+0x34>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a0a      	ldr	r2, [pc, #40]	; (8003bf8 <RCC_Delay+0x38>)
 8003bce:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd2:	0a5b      	lsrs	r3, r3, #9
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	fb02 f303 	mul.w	r3, r2, r3
 8003bda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bdc:	bf00      	nop
  }
  while (Delay --);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1e5a      	subs	r2, r3, #1
 8003be2:	60fa      	str	r2, [r7, #12]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1f9      	bne.n	8003bdc <RCC_Delay+0x1c>
}
 8003be8:	bf00      	nop
 8003bea:	bf00      	nop
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr
 8003bf4:	20000004 	.word	0x20000004
 8003bf8:	10624dd3 	.word	0x10624dd3

08003bfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e041      	b.n	8003c92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fe fa4e 	bl	80020c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3304      	adds	r3, #4
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	f000 fc28 	bl	8004490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d001      	beq.n	8003cb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e03a      	b.n	8003d2a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0201 	orr.w	r2, r2, #1
 8003cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a18      	ldr	r2, [pc, #96]	; (8003d34 <HAL_TIM_Base_Start_IT+0x98>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00e      	beq.n	8003cf4 <HAL_TIM_Base_Start_IT+0x58>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cde:	d009      	beq.n	8003cf4 <HAL_TIM_Base_Start_IT+0x58>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a14      	ldr	r2, [pc, #80]	; (8003d38 <HAL_TIM_Base_Start_IT+0x9c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d004      	beq.n	8003cf4 <HAL_TIM_Base_Start_IT+0x58>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a13      	ldr	r2, [pc, #76]	; (8003d3c <HAL_TIM_Base_Start_IT+0xa0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d111      	bne.n	8003d18 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b06      	cmp	r3, #6
 8003d04:	d010      	beq.n	8003d28 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0201 	orr.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d16:	e007      	b.n	8003d28 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr
 8003d34:	40012c00 	.word	0x40012c00
 8003d38:	40000400 	.word	0x40000400
 8003d3c:	40000800 	.word	0x40000800

08003d40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e041      	b.n	8003dd6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f839 	bl	8003dde <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4610      	mov	r0, r2
 8003d80:	f000 fb86 	bl	8004490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr

08003df0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d109      	bne.n	8003e14 <HAL_TIM_PWM_Start+0x24>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	bf14      	ite	ne
 8003e0c:	2301      	movne	r3, #1
 8003e0e:	2300      	moveq	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	e022      	b.n	8003e5a <HAL_TIM_PWM_Start+0x6a>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d109      	bne.n	8003e2e <HAL_TIM_PWM_Start+0x3e>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	bf14      	ite	ne
 8003e26:	2301      	movne	r3, #1
 8003e28:	2300      	moveq	r3, #0
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	e015      	b.n	8003e5a <HAL_TIM_PWM_Start+0x6a>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d109      	bne.n	8003e48 <HAL_TIM_PWM_Start+0x58>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	bf14      	ite	ne
 8003e40:	2301      	movne	r3, #1
 8003e42:	2300      	moveq	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	e008      	b.n	8003e5a <HAL_TIM_PWM_Start+0x6a>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	bf14      	ite	ne
 8003e54:	2301      	movne	r3, #1
 8003e56:	2300      	moveq	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e05e      	b.n	8003f20 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d104      	bne.n	8003e72 <HAL_TIM_PWM_Start+0x82>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e70:	e013      	b.n	8003e9a <HAL_TIM_PWM_Start+0xaa>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d104      	bne.n	8003e82 <HAL_TIM_PWM_Start+0x92>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e80:	e00b      	b.n	8003e9a <HAL_TIM_PWM_Start+0xaa>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d104      	bne.n	8003e92 <HAL_TIM_PWM_Start+0xa2>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e90:	e003      	b.n	8003e9a <HAL_TIM_PWM_Start+0xaa>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2202      	movs	r2, #2
 8003e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	6839      	ldr	r1, [r7, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fd74 	bl	8004990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a1e      	ldr	r2, [pc, #120]	; (8003f28 <HAL_TIM_PWM_Start+0x138>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d107      	bne.n	8003ec2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ec0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <HAL_TIM_PWM_Start+0x138>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00e      	beq.n	8003eea <HAL_TIM_PWM_Start+0xfa>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed4:	d009      	beq.n	8003eea <HAL_TIM_PWM_Start+0xfa>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a14      	ldr	r2, [pc, #80]	; (8003f2c <HAL_TIM_PWM_Start+0x13c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d004      	beq.n	8003eea <HAL_TIM_PWM_Start+0xfa>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a12      	ldr	r2, [pc, #72]	; (8003f30 <HAL_TIM_PWM_Start+0x140>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d111      	bne.n	8003f0e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2b06      	cmp	r3, #6
 8003efa:	d010      	beq.n	8003f1e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0c:	e007      	b.n	8003f1e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0201 	orr.w	r2, r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40012c00 	.word	0x40012c00
 8003f2c:	40000400 	.word	0x40000400
 8003f30:	40000800 	.word	0x40000800

08003f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d122      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d11b      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0202 	mvn.w	r2, #2
 8003f60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fa6f 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 8003f7c:	e005      	b.n	8003f8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fa62 	bl	8004448 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fa71 	bl	800446c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d122      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d11b      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f06f 0204 	mvn.w	r2, #4
 8003fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fa45 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 8003fd0:	e005      	b.n	8003fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fa38 	bl	8004448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 fa47 	bl	800446c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d122      	bne.n	8004038 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d11b      	bne.n	8004038 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0208 	mvn.w	r2, #8
 8004008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2204      	movs	r2, #4
 800400e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fa1b 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 8004024:	e005      	b.n	8004032 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fa0e 	bl	8004448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 fa1d 	bl	800446c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f003 0310 	and.w	r3, r3, #16
 8004042:	2b10      	cmp	r3, #16
 8004044:	d122      	bne.n	800408c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f003 0310 	and.w	r3, r3, #16
 8004050:	2b10      	cmp	r3, #16
 8004052:	d11b      	bne.n	800408c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f06f 0210 	mvn.w	r2, #16
 800405c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2208      	movs	r2, #8
 8004062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f9f1 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 8004078:	e005      	b.n	8004086 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f9e4 	bl	8004448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f9f3 	bl	800446c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b01      	cmp	r3, #1
 8004098:	d10e      	bne.n	80040b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d107      	bne.n	80040b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f06f 0201 	mvn.w	r2, #1
 80040b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7fd fd2a 	bl	8001b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c2:	2b80      	cmp	r3, #128	; 0x80
 80040c4:	d10e      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d0:	2b80      	cmp	r3, #128	; 0x80
 80040d2:	d107      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fce1 	bl	8004aa6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ee:	2b40      	cmp	r3, #64	; 0x40
 80040f0:	d10e      	bne.n	8004110 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fc:	2b40      	cmp	r3, #64	; 0x40
 80040fe:	d107      	bne.n	8004110 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f9b7 	bl	800447e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b20      	cmp	r3, #32
 800411c:	d10e      	bne.n	800413c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 0320 	and.w	r3, r3, #32
 8004128:	2b20      	cmp	r3, #32
 800412a:	d107      	bne.n	800413c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f06f 0220 	mvn.w	r2, #32
 8004134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fcac 	bl	8004a94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800413c:	bf00      	nop
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800415a:	2302      	movs	r3, #2
 800415c:	e0ac      	b.n	80042b8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b0c      	cmp	r3, #12
 800416a:	f200 809f 	bhi.w	80042ac <HAL_TIM_PWM_ConfigChannel+0x168>
 800416e:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004174:	080041a9 	.word	0x080041a9
 8004178:	080042ad 	.word	0x080042ad
 800417c:	080042ad 	.word	0x080042ad
 8004180:	080042ad 	.word	0x080042ad
 8004184:	080041e9 	.word	0x080041e9
 8004188:	080042ad 	.word	0x080042ad
 800418c:	080042ad 	.word	0x080042ad
 8004190:	080042ad 	.word	0x080042ad
 8004194:	0800422b 	.word	0x0800422b
 8004198:	080042ad 	.word	0x080042ad
 800419c:	080042ad 	.word	0x080042ad
 80041a0:	080042ad 	.word	0x080042ad
 80041a4:	0800426b 	.word	0x0800426b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68b9      	ldr	r1, [r7, #8]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 f9d0 	bl	8004554 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0208 	orr.w	r2, r2, #8
 80041c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0204 	bic.w	r2, r2, #4
 80041d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6999      	ldr	r1, [r3, #24]
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	691a      	ldr	r2, [r3, #16]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	619a      	str	r2, [r3, #24]
      break;
 80041e6:	e062      	b.n	80042ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fa16 	bl	8004620 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699a      	ldr	r2, [r3, #24]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6999      	ldr	r1, [r3, #24]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	021a      	lsls	r2, r3, #8
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	619a      	str	r2, [r3, #24]
      break;
 8004228:	e041      	b.n	80042ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68b9      	ldr	r1, [r7, #8]
 8004230:	4618      	mov	r0, r3
 8004232:	f000 fa5f 	bl	80046f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69da      	ldr	r2, [r3, #28]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f042 0208 	orr.w	r2, r2, #8
 8004244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69da      	ldr	r2, [r3, #28]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0204 	bic.w	r2, r2, #4
 8004254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69d9      	ldr	r1, [r3, #28]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	61da      	str	r2, [r3, #28]
      break;
 8004268:	e021      	b.n	80042ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68b9      	ldr	r1, [r7, #8]
 8004270:	4618      	mov	r0, r3
 8004272:	f000 faa9 	bl	80047c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69da      	ldr	r2, [r3, #28]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69da      	ldr	r2, [r3, #28]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69d9      	ldr	r1, [r3, #28]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	021a      	lsls	r2, r3, #8
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	61da      	str	r2, [r3, #28]
      break;
 80042aa:	e000      	b.n	80042ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80042ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_TIM_ConfigClockSource+0x18>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e0b3      	b.n	8004440 <HAL_TIM_ConfigClockSource+0x180>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004310:	d03e      	beq.n	8004390 <HAL_TIM_ConfigClockSource+0xd0>
 8004312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004316:	f200 8087 	bhi.w	8004428 <HAL_TIM_ConfigClockSource+0x168>
 800431a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800431e:	f000 8085 	beq.w	800442c <HAL_TIM_ConfigClockSource+0x16c>
 8004322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004326:	d87f      	bhi.n	8004428 <HAL_TIM_ConfigClockSource+0x168>
 8004328:	2b70      	cmp	r3, #112	; 0x70
 800432a:	d01a      	beq.n	8004362 <HAL_TIM_ConfigClockSource+0xa2>
 800432c:	2b70      	cmp	r3, #112	; 0x70
 800432e:	d87b      	bhi.n	8004428 <HAL_TIM_ConfigClockSource+0x168>
 8004330:	2b60      	cmp	r3, #96	; 0x60
 8004332:	d050      	beq.n	80043d6 <HAL_TIM_ConfigClockSource+0x116>
 8004334:	2b60      	cmp	r3, #96	; 0x60
 8004336:	d877      	bhi.n	8004428 <HAL_TIM_ConfigClockSource+0x168>
 8004338:	2b50      	cmp	r3, #80	; 0x50
 800433a:	d03c      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0xf6>
 800433c:	2b50      	cmp	r3, #80	; 0x50
 800433e:	d873      	bhi.n	8004428 <HAL_TIM_ConfigClockSource+0x168>
 8004340:	2b40      	cmp	r3, #64	; 0x40
 8004342:	d058      	beq.n	80043f6 <HAL_TIM_ConfigClockSource+0x136>
 8004344:	2b40      	cmp	r3, #64	; 0x40
 8004346:	d86f      	bhi.n	8004428 <HAL_TIM_ConfigClockSource+0x168>
 8004348:	2b30      	cmp	r3, #48	; 0x30
 800434a:	d064      	beq.n	8004416 <HAL_TIM_ConfigClockSource+0x156>
 800434c:	2b30      	cmp	r3, #48	; 0x30
 800434e:	d86b      	bhi.n	8004428 <HAL_TIM_ConfigClockSource+0x168>
 8004350:	2b20      	cmp	r3, #32
 8004352:	d060      	beq.n	8004416 <HAL_TIM_ConfigClockSource+0x156>
 8004354:	2b20      	cmp	r3, #32
 8004356:	d867      	bhi.n	8004428 <HAL_TIM_ConfigClockSource+0x168>
 8004358:	2b00      	cmp	r3, #0
 800435a:	d05c      	beq.n	8004416 <HAL_TIM_ConfigClockSource+0x156>
 800435c:	2b10      	cmp	r3, #16
 800435e:	d05a      	beq.n	8004416 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004360:	e062      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6899      	ldr	r1, [r3, #8]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f000 faee 	bl	8004952 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004384:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	609a      	str	r2, [r3, #8]
      break;
 800438e:	e04e      	b.n	800442e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	6899      	ldr	r1, [r3, #8]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f000 fad7 	bl	8004952 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043b2:	609a      	str	r2, [r3, #8]
      break;
 80043b4:	e03b      	b.n	800442e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	6859      	ldr	r1, [r3, #4]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	461a      	mov	r2, r3
 80043c4:	f000 fa4e 	bl	8004864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2150      	movs	r1, #80	; 0x50
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 faa5 	bl	800491e <TIM_ITRx_SetConfig>
      break;
 80043d4:	e02b      	b.n	800442e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6818      	ldr	r0, [r3, #0]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	6859      	ldr	r1, [r3, #4]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	461a      	mov	r2, r3
 80043e4:	f000 fa6c 	bl	80048c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2160      	movs	r1, #96	; 0x60
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fa95 	bl	800491e <TIM_ITRx_SetConfig>
      break;
 80043f4:	e01b      	b.n	800442e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	6859      	ldr	r1, [r3, #4]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	461a      	mov	r2, r3
 8004404:	f000 fa2e 	bl	8004864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2140      	movs	r1, #64	; 0x40
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fa85 	bl	800491e <TIM_ITRx_SetConfig>
      break;
 8004414:	e00b      	b.n	800442e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4619      	mov	r1, r3
 8004420:	4610      	mov	r0, r2
 8004422:	f000 fa7c 	bl	800491e <TIM_ITRx_SetConfig>
        break;
 8004426:	e002      	b.n	800442e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004428:	bf00      	nop
 800442a:	e000      	b.n	800442e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800442c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr

0800445a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr

0800446c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	bc80      	pop	{r7}
 800447c:	4770      	bx	lr

0800447e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr

08004490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a29      	ldr	r2, [pc, #164]	; (8004548 <TIM_Base_SetConfig+0xb8>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00b      	beq.n	80044c0 <TIM_Base_SetConfig+0x30>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ae:	d007      	beq.n	80044c0 <TIM_Base_SetConfig+0x30>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a26      	ldr	r2, [pc, #152]	; (800454c <TIM_Base_SetConfig+0xbc>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d003      	beq.n	80044c0 <TIM_Base_SetConfig+0x30>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a25      	ldr	r2, [pc, #148]	; (8004550 <TIM_Base_SetConfig+0xc0>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d108      	bne.n	80044d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a1c      	ldr	r2, [pc, #112]	; (8004548 <TIM_Base_SetConfig+0xb8>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00b      	beq.n	80044f2 <TIM_Base_SetConfig+0x62>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e0:	d007      	beq.n	80044f2 <TIM_Base_SetConfig+0x62>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a19      	ldr	r2, [pc, #100]	; (800454c <TIM_Base_SetConfig+0xbc>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d003      	beq.n	80044f2 <TIM_Base_SetConfig+0x62>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a18      	ldr	r2, [pc, #96]	; (8004550 <TIM_Base_SetConfig+0xc0>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d108      	bne.n	8004504 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4313      	orrs	r3, r2
 8004502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	4313      	orrs	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a07      	ldr	r2, [pc, #28]	; (8004548 <TIM_Base_SetConfig+0xb8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d103      	bne.n	8004538 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	615a      	str	r2, [r3, #20]
}
 800453e:	bf00      	nop
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr
 8004548:	40012c00 	.word	0x40012c00
 800454c:	40000400 	.word	0x40000400
 8004550:	40000800 	.word	0x40000800

08004554 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	f023 0201 	bic.w	r2, r3, #1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0303 	bic.w	r3, r3, #3
 800458a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f023 0302 	bic.w	r3, r3, #2
 800459c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a1c      	ldr	r2, [pc, #112]	; (800461c <TIM_OC1_SetConfig+0xc8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d10c      	bne.n	80045ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f023 0308 	bic.w	r3, r3, #8
 80045b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	4313      	orrs	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f023 0304 	bic.w	r3, r3, #4
 80045c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a13      	ldr	r2, [pc, #76]	; (800461c <TIM_OC1_SetConfig+0xc8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d111      	bne.n	80045f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	621a      	str	r2, [r3, #32]
}
 8004610:	bf00      	nop
 8004612:	371c      	adds	r7, #28
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	40012c00 	.word	0x40012c00

08004620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	f023 0210 	bic.w	r2, r3, #16
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800464e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4313      	orrs	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f023 0320 	bic.w	r3, r3, #32
 800466a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a1d      	ldr	r2, [pc, #116]	; (80046f0 <TIM_OC2_SetConfig+0xd0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d10d      	bne.n	800469c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	4313      	orrs	r3, r2
 8004692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800469a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a14      	ldr	r2, [pc, #80]	; (80046f0 <TIM_OC2_SetConfig+0xd0>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d113      	bne.n	80046cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	621a      	str	r2, [r3, #32]
}
 80046e6:	bf00      	nop
 80046e8:	371c      	adds	r7, #28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr
 80046f0:	40012c00 	.word	0x40012c00

080046f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0303 	bic.w	r3, r3, #3
 800472a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800473c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	021b      	lsls	r3, r3, #8
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a1d      	ldr	r2, [pc, #116]	; (80047c4 <TIM_OC3_SetConfig+0xd0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d10d      	bne.n	800476e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004758:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	021b      	lsls	r3, r3, #8
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800476c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a14      	ldr	r2, [pc, #80]	; (80047c4 <TIM_OC3_SetConfig+0xd0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d113      	bne.n	800479e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800477c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4313      	orrs	r3, r2
 8004790:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	621a      	str	r2, [r3, #32]
}
 80047b8:	bf00      	nop
 80047ba:	371c      	adds	r7, #28
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40012c00 	.word	0x40012c00

080047c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	021b      	lsls	r3, r3, #8
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	031b      	lsls	r3, r3, #12
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a0f      	ldr	r2, [pc, #60]	; (8004860 <TIM_OC4_SetConfig+0x98>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d109      	bne.n	800483c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800482e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	019b      	lsls	r3, r3, #6
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	4313      	orrs	r3, r2
 800483a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	621a      	str	r2, [r3, #32]
}
 8004856:	bf00      	nop
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr
 8004860:	40012c00 	.word	0x40012c00

08004864 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	f023 0201 	bic.w	r2, r3, #1
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800488e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	011b      	lsls	r3, r3, #4
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f023 030a 	bic.w	r3, r3, #10
 80048a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	621a      	str	r2, [r3, #32]
}
 80048b6:	bf00      	nop
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	f023 0210 	bic.w	r2, r3, #16
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	031b      	lsls	r3, r3, #12
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	621a      	str	r2, [r3, #32]
}
 8004914:	bf00      	nop
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	bc80      	pop	{r7}
 800491c:	4770      	bx	lr

0800491e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800491e:	b480      	push	{r7}
 8004920:	b085      	sub	sp, #20
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004934:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	f043 0307 	orr.w	r3, r3, #7
 8004940:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	609a      	str	r2, [r3, #8]
}
 8004948:	bf00      	nop
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr

08004952 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004952:	b480      	push	{r7}
 8004954:	b087      	sub	sp, #28
 8004956:	af00      	add	r7, sp, #0
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	607a      	str	r2, [r7, #4]
 800495e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800496c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	021a      	lsls	r2, r3, #8
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	431a      	orrs	r2, r3
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	4313      	orrs	r3, r2
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	609a      	str	r2, [r3, #8]
}
 8004986:	bf00      	nop
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	bc80      	pop	{r7}
 800498e:	4770      	bx	lr

08004990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f003 031f 	and.w	r3, r3, #31
 80049a2:	2201      	movs	r2, #1
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a1a      	ldr	r2, [r3, #32]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	43db      	mvns	r3, r3
 80049b2:	401a      	ands	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a1a      	ldr	r2, [r3, #32]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f003 031f 	and.w	r3, r3, #31
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	fa01 f303 	lsl.w	r3, r1, r3
 80049c8:	431a      	orrs	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	621a      	str	r2, [r3, #32]
}
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr

080049d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e046      	b.n	8004a7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a16      	ldr	r2, [pc, #88]	; (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00e      	beq.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a3c:	d009      	beq.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a12      	ldr	r2, [pc, #72]	; (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d004      	beq.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a10      	ldr	r2, [pc, #64]	; (8004a90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d10c      	bne.n	8004a6c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3714      	adds	r7, #20
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr
 8004a88:	40012c00 	.word	0x40012c00
 8004a8c:	40000400 	.word	0x40000400
 8004a90:	40000800 	.word	0x40000800

08004a94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr

08004ab8 <__libc_init_array>:
 8004ab8:	b570      	push	{r4, r5, r6, lr}
 8004aba:	2600      	movs	r6, #0
 8004abc:	4d0c      	ldr	r5, [pc, #48]	; (8004af0 <__libc_init_array+0x38>)
 8004abe:	4c0d      	ldr	r4, [pc, #52]	; (8004af4 <__libc_init_array+0x3c>)
 8004ac0:	1b64      	subs	r4, r4, r5
 8004ac2:	10a4      	asrs	r4, r4, #2
 8004ac4:	42a6      	cmp	r6, r4
 8004ac6:	d109      	bne.n	8004adc <__libc_init_array+0x24>
 8004ac8:	f000 f86a 	bl	8004ba0 <_init>
 8004acc:	2600      	movs	r6, #0
 8004ace:	4d0a      	ldr	r5, [pc, #40]	; (8004af8 <__libc_init_array+0x40>)
 8004ad0:	4c0a      	ldr	r4, [pc, #40]	; (8004afc <__libc_init_array+0x44>)
 8004ad2:	1b64      	subs	r4, r4, r5
 8004ad4:	10a4      	asrs	r4, r4, #2
 8004ad6:	42a6      	cmp	r6, r4
 8004ad8:	d105      	bne.n	8004ae6 <__libc_init_array+0x2e>
 8004ada:	bd70      	pop	{r4, r5, r6, pc}
 8004adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae0:	4798      	blx	r3
 8004ae2:	3601      	adds	r6, #1
 8004ae4:	e7ee      	b.n	8004ac4 <__libc_init_array+0xc>
 8004ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aea:	4798      	blx	r3
 8004aec:	3601      	adds	r6, #1
 8004aee:	e7f2      	b.n	8004ad6 <__libc_init_array+0x1e>
 8004af0:	08004bd8 	.word	0x08004bd8
 8004af4:	08004bd8 	.word	0x08004bd8
 8004af8:	08004bd8 	.word	0x08004bd8
 8004afc:	08004bdc 	.word	0x08004bdc

08004b00 <memset>:
 8004b00:	4603      	mov	r3, r0
 8004b02:	4402      	add	r2, r0
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d100      	bne.n	8004b0a <memset+0xa>
 8004b08:	4770      	bx	lr
 8004b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b0e:	e7f9      	b.n	8004b04 <memset+0x4>

08004b10 <round>:
 8004b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b12:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004b16:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8004b1a:	2c13      	cmp	r4, #19
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4606      	mov	r6, r0
 8004b22:	460d      	mov	r5, r1
 8004b24:	dc19      	bgt.n	8004b5a <round+0x4a>
 8004b26:	2c00      	cmp	r4, #0
 8004b28:	da09      	bge.n	8004b3e <round+0x2e>
 8004b2a:	3401      	adds	r4, #1
 8004b2c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8004b30:	d103      	bne.n	8004b3a <round+0x2a>
 8004b32:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004b36:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	e02a      	b.n	8004b94 <round+0x84>
 8004b3e:	4917      	ldr	r1, [pc, #92]	; (8004b9c <round+0x8c>)
 8004b40:	4121      	asrs	r1, r4
 8004b42:	ea03 0001 	and.w	r0, r3, r1
 8004b46:	4302      	orrs	r2, r0
 8004b48:	d010      	beq.n	8004b6c <round+0x5c>
 8004b4a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004b4e:	fa42 f404 	asr.w	r4, r2, r4
 8004b52:	4423      	add	r3, r4
 8004b54:	ea23 0301 	bic.w	r3, r3, r1
 8004b58:	e7ef      	b.n	8004b3a <round+0x2a>
 8004b5a:	2c33      	cmp	r4, #51	; 0x33
 8004b5c:	dd09      	ble.n	8004b72 <round+0x62>
 8004b5e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8004b62:	d103      	bne.n	8004b6c <round+0x5c>
 8004b64:	f7fb fc24 	bl	80003b0 <__adddf3>
 8004b68:	4606      	mov	r6, r0
 8004b6a:	460d      	mov	r5, r1
 8004b6c:	4630      	mov	r0, r6
 8004b6e:	4629      	mov	r1, r5
 8004b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b76:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004b7a:	40f9      	lsrs	r1, r7
 8004b7c:	4208      	tst	r0, r1
 8004b7e:	d0f5      	beq.n	8004b6c <round+0x5c>
 8004b80:	2001      	movs	r0, #1
 8004b82:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8004b86:	fa00 f404 	lsl.w	r4, r0, r4
 8004b8a:	1912      	adds	r2, r2, r4
 8004b8c:	bf28      	it	cs
 8004b8e:	181b      	addcs	r3, r3, r0
 8004b90:	ea22 0201 	bic.w	r2, r2, r1
 8004b94:	4619      	mov	r1, r3
 8004b96:	4610      	mov	r0, r2
 8004b98:	e7e6      	b.n	8004b68 <round+0x58>
 8004b9a:	bf00      	nop
 8004b9c:	000fffff 	.word	0x000fffff

08004ba0 <_init>:
 8004ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba2:	bf00      	nop
 8004ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ba6:	bc08      	pop	{r3}
 8004ba8:	469e      	mov	lr, r3
 8004baa:	4770      	bx	lr

08004bac <_fini>:
 8004bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bae:	bf00      	nop
 8004bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bb2:	bc08      	pop	{r3}
 8004bb4:	469e      	mov	lr, r3
 8004bb6:	4770      	bx	lr
