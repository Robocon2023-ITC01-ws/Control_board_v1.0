
Controll_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053f8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005508  08005508  00015508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005528  08005528  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005528  08005528  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005528  08005528  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005528  08005528  00015528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800552c  0800552c  0001552c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000014  08005544  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08005544  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b54c  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ede  00000000  00000000  0002b589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  0002d468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a88  00000000  00000000  0002dfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017af5  00000000  00000000  0002ea70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c230  00000000  00000000  00046565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a3e9  00000000  00000000  00052795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dcb7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003194  00000000  00000000  000dcbd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	080054f0 	.word	0x080054f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	080054f0 	.word	0x080054f0

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <__aeabi_d2f>:
 800075c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000760:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000764:	bf24      	itt	cs
 8000766:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800076a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800076e:	d90d      	bls.n	800078c <__aeabi_d2f+0x30>
 8000770:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000774:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000778:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800077c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000780:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000784:	bf08      	it	eq
 8000786:	f020 0001 	biceq.w	r0, r0, #1
 800078a:	4770      	bx	lr
 800078c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000790:	d121      	bne.n	80007d6 <__aeabi_d2f+0x7a>
 8000792:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000796:	bfbc      	itt	lt
 8000798:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800079c:	4770      	bxlt	lr
 800079e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007a6:	f1c2 0218 	rsb	r2, r2, #24
 80007aa:	f1c2 0c20 	rsb	ip, r2, #32
 80007ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80007b2:	fa20 f002 	lsr.w	r0, r0, r2
 80007b6:	bf18      	it	ne
 80007b8:	f040 0001 	orrne.w	r0, r0, #1
 80007bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007c8:	ea40 000c 	orr.w	r0, r0, ip
 80007cc:	fa23 f302 	lsr.w	r3, r3, r2
 80007d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007d4:	e7cc      	b.n	8000770 <__aeabi_d2f+0x14>
 80007d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007da:	d107      	bne.n	80007ec <__aeabi_d2f+0x90>
 80007dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007e0:	bf1e      	ittt	ne
 80007e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007ea:	4770      	bxne	lr
 80007ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop

080007fc <__aeabi_frsub>:
 80007fc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000800:	e002      	b.n	8000808 <__addsf3>
 8000802:	bf00      	nop

08000804 <__aeabi_fsub>:
 8000804:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000808 <__addsf3>:
 8000808:	0042      	lsls	r2, r0, #1
 800080a:	bf1f      	itttt	ne
 800080c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000810:	ea92 0f03 	teqne	r2, r3
 8000814:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000818:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800081c:	d06a      	beq.n	80008f4 <__addsf3+0xec>
 800081e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000822:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000826:	bfc1      	itttt	gt
 8000828:	18d2      	addgt	r2, r2, r3
 800082a:	4041      	eorgt	r1, r0
 800082c:	4048      	eorgt	r0, r1
 800082e:	4041      	eorgt	r1, r0
 8000830:	bfb8      	it	lt
 8000832:	425b      	neglt	r3, r3
 8000834:	2b19      	cmp	r3, #25
 8000836:	bf88      	it	hi
 8000838:	4770      	bxhi	lr
 800083a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800083e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000842:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000846:	bf18      	it	ne
 8000848:	4240      	negne	r0, r0
 800084a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800084e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000852:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000856:	bf18      	it	ne
 8000858:	4249      	negne	r1, r1
 800085a:	ea92 0f03 	teq	r2, r3
 800085e:	d03f      	beq.n	80008e0 <__addsf3+0xd8>
 8000860:	f1a2 0201 	sub.w	r2, r2, #1
 8000864:	fa41 fc03 	asr.w	ip, r1, r3
 8000868:	eb10 000c 	adds.w	r0, r0, ip
 800086c:	f1c3 0320 	rsb	r3, r3, #32
 8000870:	fa01 f103 	lsl.w	r1, r1, r3
 8000874:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000878:	d502      	bpl.n	8000880 <__addsf3+0x78>
 800087a:	4249      	negs	r1, r1
 800087c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000880:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000884:	d313      	bcc.n	80008ae <__addsf3+0xa6>
 8000886:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800088a:	d306      	bcc.n	800089a <__addsf3+0x92>
 800088c:	0840      	lsrs	r0, r0, #1
 800088e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000892:	f102 0201 	add.w	r2, r2, #1
 8000896:	2afe      	cmp	r2, #254	; 0xfe
 8000898:	d251      	bcs.n	800093e <__addsf3+0x136>
 800089a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800089e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008a2:	bf08      	it	eq
 80008a4:	f020 0001 	biceq.w	r0, r0, #1
 80008a8:	ea40 0003 	orr.w	r0, r0, r3
 80008ac:	4770      	bx	lr
 80008ae:	0049      	lsls	r1, r1, #1
 80008b0:	eb40 0000 	adc.w	r0, r0, r0
 80008b4:	3a01      	subs	r2, #1
 80008b6:	bf28      	it	cs
 80008b8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80008bc:	d2ed      	bcs.n	800089a <__addsf3+0x92>
 80008be:	fab0 fc80 	clz	ip, r0
 80008c2:	f1ac 0c08 	sub.w	ip, ip, #8
 80008c6:	ebb2 020c 	subs.w	r2, r2, ip
 80008ca:	fa00 f00c 	lsl.w	r0, r0, ip
 80008ce:	bfaa      	itet	ge
 80008d0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80008d4:	4252      	neglt	r2, r2
 80008d6:	4318      	orrge	r0, r3
 80008d8:	bfbc      	itt	lt
 80008da:	40d0      	lsrlt	r0, r2
 80008dc:	4318      	orrlt	r0, r3
 80008de:	4770      	bx	lr
 80008e0:	f092 0f00 	teq	r2, #0
 80008e4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008e8:	bf06      	itte	eq
 80008ea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ee:	3201      	addeq	r2, #1
 80008f0:	3b01      	subne	r3, #1
 80008f2:	e7b5      	b.n	8000860 <__addsf3+0x58>
 80008f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008fc:	bf18      	it	ne
 80008fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000902:	d021      	beq.n	8000948 <__addsf3+0x140>
 8000904:	ea92 0f03 	teq	r2, r3
 8000908:	d004      	beq.n	8000914 <__addsf3+0x10c>
 800090a:	f092 0f00 	teq	r2, #0
 800090e:	bf08      	it	eq
 8000910:	4608      	moveq	r0, r1
 8000912:	4770      	bx	lr
 8000914:	ea90 0f01 	teq	r0, r1
 8000918:	bf1c      	itt	ne
 800091a:	2000      	movne	r0, #0
 800091c:	4770      	bxne	lr
 800091e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000922:	d104      	bne.n	800092e <__addsf3+0x126>
 8000924:	0040      	lsls	r0, r0, #1
 8000926:	bf28      	it	cs
 8000928:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800092c:	4770      	bx	lr
 800092e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000932:	bf3c      	itt	cc
 8000934:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000938:	4770      	bxcc	lr
 800093a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800093e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000942:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000946:	4770      	bx	lr
 8000948:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800094c:	bf16      	itet	ne
 800094e:	4608      	movne	r0, r1
 8000950:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000954:	4601      	movne	r1, r0
 8000956:	0242      	lsls	r2, r0, #9
 8000958:	bf06      	itte	eq
 800095a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800095e:	ea90 0f01 	teqeq	r0, r1
 8000962:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000966:	4770      	bx	lr

08000968 <__aeabi_ui2f>:
 8000968:	f04f 0300 	mov.w	r3, #0
 800096c:	e004      	b.n	8000978 <__aeabi_i2f+0x8>
 800096e:	bf00      	nop

08000970 <__aeabi_i2f>:
 8000970:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000974:	bf48      	it	mi
 8000976:	4240      	negmi	r0, r0
 8000978:	ea5f 0c00 	movs.w	ip, r0
 800097c:	bf08      	it	eq
 800097e:	4770      	bxeq	lr
 8000980:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000984:	4601      	mov	r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	e01c      	b.n	80009c6 <__aeabi_l2f+0x2a>

0800098c <__aeabi_ul2f>:
 800098c:	ea50 0201 	orrs.w	r2, r0, r1
 8000990:	bf08      	it	eq
 8000992:	4770      	bxeq	lr
 8000994:	f04f 0300 	mov.w	r3, #0
 8000998:	e00a      	b.n	80009b0 <__aeabi_l2f+0x14>
 800099a:	bf00      	nop

0800099c <__aeabi_l2f>:
 800099c:	ea50 0201 	orrs.w	r2, r0, r1
 80009a0:	bf08      	it	eq
 80009a2:	4770      	bxeq	lr
 80009a4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80009a8:	d502      	bpl.n	80009b0 <__aeabi_l2f+0x14>
 80009aa:	4240      	negs	r0, r0
 80009ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009b0:	ea5f 0c01 	movs.w	ip, r1
 80009b4:	bf02      	ittt	eq
 80009b6:	4684      	moveq	ip, r0
 80009b8:	4601      	moveq	r1, r0
 80009ba:	2000      	moveq	r0, #0
 80009bc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80009c0:	bf08      	it	eq
 80009c2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80009c6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80009ca:	fabc f28c 	clz	r2, ip
 80009ce:	3a08      	subs	r2, #8
 80009d0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80009d4:	db10      	blt.n	80009f8 <__aeabi_l2f+0x5c>
 80009d6:	fa01 fc02 	lsl.w	ip, r1, r2
 80009da:	4463      	add	r3, ip
 80009dc:	fa00 fc02 	lsl.w	ip, r0, r2
 80009e0:	f1c2 0220 	rsb	r2, r2, #32
 80009e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009e8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ec:	eb43 0002 	adc.w	r0, r3, r2
 80009f0:	bf08      	it	eq
 80009f2:	f020 0001 	biceq.w	r0, r0, #1
 80009f6:	4770      	bx	lr
 80009f8:	f102 0220 	add.w	r2, r2, #32
 80009fc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a00:	f1c2 0220 	rsb	r2, r2, #32
 8000a04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a08:	fa21 f202 	lsr.w	r2, r1, r2
 8000a0c:	eb43 0002 	adc.w	r0, r3, r2
 8000a10:	bf08      	it	eq
 8000a12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a16:	4770      	bx	lr

08000a18 <__aeabi_fmul>:
 8000a18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a20:	bf1e      	ittt	ne
 8000a22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a26:	ea92 0f0c 	teqne	r2, ip
 8000a2a:	ea93 0f0c 	teqne	r3, ip
 8000a2e:	d06f      	beq.n	8000b10 <__aeabi_fmul+0xf8>
 8000a30:	441a      	add	r2, r3
 8000a32:	ea80 0c01 	eor.w	ip, r0, r1
 8000a36:	0240      	lsls	r0, r0, #9
 8000a38:	bf18      	it	ne
 8000a3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a3e:	d01e      	beq.n	8000a7e <__aeabi_fmul+0x66>
 8000a40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a58:	bf3e      	ittt	cc
 8000a5a:	0049      	lslcc	r1, r1, #1
 8000a5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a60:	005b      	lslcc	r3, r3, #1
 8000a62:	ea40 0001 	orr.w	r0, r0, r1
 8000a66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a6a:	2afd      	cmp	r2, #253	; 0xfd
 8000a6c:	d81d      	bhi.n	8000aaa <__aeabi_fmul+0x92>
 8000a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a76:	bf08      	it	eq
 8000a78:	f020 0001 	biceq.w	r0, r0, #1
 8000a7c:	4770      	bx	lr
 8000a7e:	f090 0f00 	teq	r0, #0
 8000a82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a86:	bf08      	it	eq
 8000a88:	0249      	lsleq	r1, r1, #9
 8000a8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a92:	3a7f      	subs	r2, #127	; 0x7f
 8000a94:	bfc2      	ittt	gt
 8000a96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a9e:	4770      	bxgt	lr
 8000aa0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	3a01      	subs	r2, #1
 8000aaa:	dc5d      	bgt.n	8000b68 <__aeabi_fmul+0x150>
 8000aac:	f112 0f19 	cmn.w	r2, #25
 8000ab0:	bfdc      	itt	le
 8000ab2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ab6:	4770      	bxle	lr
 8000ab8:	f1c2 0200 	rsb	r2, r2, #0
 8000abc:	0041      	lsls	r1, r0, #1
 8000abe:	fa21 f102 	lsr.w	r1, r1, r2
 8000ac2:	f1c2 0220 	rsb	r2, r2, #32
 8000ac6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000aca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ace:	f140 0000 	adc.w	r0, r0, #0
 8000ad2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ad6:	bf08      	it	eq
 8000ad8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000adc:	4770      	bx	lr
 8000ade:	f092 0f00 	teq	r2, #0
 8000ae2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ae6:	bf02      	ittt	eq
 8000ae8:	0040      	lsleq	r0, r0, #1
 8000aea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aee:	3a01      	subeq	r2, #1
 8000af0:	d0f9      	beq.n	8000ae6 <__aeabi_fmul+0xce>
 8000af2:	ea40 000c 	orr.w	r0, r0, ip
 8000af6:	f093 0f00 	teq	r3, #0
 8000afa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000afe:	bf02      	ittt	eq
 8000b00:	0049      	lsleq	r1, r1, #1
 8000b02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b06:	3b01      	subeq	r3, #1
 8000b08:	d0f9      	beq.n	8000afe <__aeabi_fmul+0xe6>
 8000b0a:	ea41 010c 	orr.w	r1, r1, ip
 8000b0e:	e78f      	b.n	8000a30 <__aeabi_fmul+0x18>
 8000b10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b14:	ea92 0f0c 	teq	r2, ip
 8000b18:	bf18      	it	ne
 8000b1a:	ea93 0f0c 	teqne	r3, ip
 8000b1e:	d00a      	beq.n	8000b36 <__aeabi_fmul+0x11e>
 8000b20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b24:	bf18      	it	ne
 8000b26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b2a:	d1d8      	bne.n	8000ade <__aeabi_fmul+0xc6>
 8000b2c:	ea80 0001 	eor.w	r0, r0, r1
 8000b30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b34:	4770      	bx	lr
 8000b36:	f090 0f00 	teq	r0, #0
 8000b3a:	bf17      	itett	ne
 8000b3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b40:	4608      	moveq	r0, r1
 8000b42:	f091 0f00 	teqne	r1, #0
 8000b46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b4a:	d014      	beq.n	8000b76 <__aeabi_fmul+0x15e>
 8000b4c:	ea92 0f0c 	teq	r2, ip
 8000b50:	d101      	bne.n	8000b56 <__aeabi_fmul+0x13e>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d10f      	bne.n	8000b76 <__aeabi_fmul+0x15e>
 8000b56:	ea93 0f0c 	teq	r3, ip
 8000b5a:	d103      	bne.n	8000b64 <__aeabi_fmul+0x14c>
 8000b5c:	024b      	lsls	r3, r1, #9
 8000b5e:	bf18      	it	ne
 8000b60:	4608      	movne	r0, r1
 8000b62:	d108      	bne.n	8000b76 <__aeabi_fmul+0x15e>
 8000b64:	ea80 0001 	eor.w	r0, r0, r1
 8000b68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b74:	4770      	bx	lr
 8000b76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_fdiv>:
 8000b80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b88:	bf1e      	ittt	ne
 8000b8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b8e:	ea92 0f0c 	teqne	r2, ip
 8000b92:	ea93 0f0c 	teqne	r3, ip
 8000b96:	d069      	beq.n	8000c6c <__aeabi_fdiv+0xec>
 8000b98:	eba2 0203 	sub.w	r2, r2, r3
 8000b9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000ba0:	0249      	lsls	r1, r1, #9
 8000ba2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ba6:	d037      	beq.n	8000c18 <__aeabi_fdiv+0x98>
 8000ba8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000bac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000bb0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000bb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	bf38      	it	cc
 8000bbc:	005b      	lslcc	r3, r3, #1
 8000bbe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000bc2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	bf24      	itt	cs
 8000bca:	1a5b      	subcs	r3, r3, r1
 8000bcc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000bd0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000bd4:	bf24      	itt	cs
 8000bd6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000bda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000bde:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000be2:	bf24      	itt	cs
 8000be4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000be8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bf0:	bf24      	itt	cs
 8000bf2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bf6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bfa:	011b      	lsls	r3, r3, #4
 8000bfc:	bf18      	it	ne
 8000bfe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000c02:	d1e0      	bne.n	8000bc6 <__aeabi_fdiv+0x46>
 8000c04:	2afd      	cmp	r2, #253	; 0xfd
 8000c06:	f63f af50 	bhi.w	8000aaa <__aeabi_fmul+0x92>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c20:	327f      	adds	r2, #127	; 0x7f
 8000c22:	bfc2      	ittt	gt
 8000c24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2c:	4770      	bxgt	lr
 8000c2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c32:	f04f 0300 	mov.w	r3, #0
 8000c36:	3a01      	subs	r2, #1
 8000c38:	e737      	b.n	8000aaa <__aeabi_fmul+0x92>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c42:	bf02      	ittt	eq
 8000c44:	0040      	lsleq	r0, r0, #1
 8000c46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c4a:	3a01      	subeq	r2, #1
 8000c4c:	d0f9      	beq.n	8000c42 <__aeabi_fdiv+0xc2>
 8000c4e:	ea40 000c 	orr.w	r0, r0, ip
 8000c52:	f093 0f00 	teq	r3, #0
 8000c56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c5a:	bf02      	ittt	eq
 8000c5c:	0049      	lsleq	r1, r1, #1
 8000c5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c62:	3b01      	subeq	r3, #1
 8000c64:	d0f9      	beq.n	8000c5a <__aeabi_fdiv+0xda>
 8000c66:	ea41 010c 	orr.w	r1, r1, ip
 8000c6a:	e795      	b.n	8000b98 <__aeabi_fdiv+0x18>
 8000c6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c70:	ea92 0f0c 	teq	r2, ip
 8000c74:	d108      	bne.n	8000c88 <__aeabi_fdiv+0x108>
 8000c76:	0242      	lsls	r2, r0, #9
 8000c78:	f47f af7d 	bne.w	8000b76 <__aeabi_fmul+0x15e>
 8000c7c:	ea93 0f0c 	teq	r3, ip
 8000c80:	f47f af70 	bne.w	8000b64 <__aeabi_fmul+0x14c>
 8000c84:	4608      	mov	r0, r1
 8000c86:	e776      	b.n	8000b76 <__aeabi_fmul+0x15e>
 8000c88:	ea93 0f0c 	teq	r3, ip
 8000c8c:	d104      	bne.n	8000c98 <__aeabi_fdiv+0x118>
 8000c8e:	024b      	lsls	r3, r1, #9
 8000c90:	f43f af4c 	beq.w	8000b2c <__aeabi_fmul+0x114>
 8000c94:	4608      	mov	r0, r1
 8000c96:	e76e      	b.n	8000b76 <__aeabi_fmul+0x15e>
 8000c98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c9c:	bf18      	it	ne
 8000c9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ca2:	d1ca      	bne.n	8000c3a <__aeabi_fdiv+0xba>
 8000ca4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ca8:	f47f af5c 	bne.w	8000b64 <__aeabi_fmul+0x14c>
 8000cac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000cb0:	f47f af3c 	bne.w	8000b2c <__aeabi_fmul+0x114>
 8000cb4:	e75f      	b.n	8000b76 <__aeabi_fmul+0x15e>
 8000cb6:	bf00      	nop

08000cb8 <__gesf2>:
 8000cb8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000cbc:	e006      	b.n	8000ccc <__cmpsf2+0x4>
 8000cbe:	bf00      	nop

08000cc0 <__lesf2>:
 8000cc0:	f04f 0c01 	mov.w	ip, #1
 8000cc4:	e002      	b.n	8000ccc <__cmpsf2+0x4>
 8000cc6:	bf00      	nop

08000cc8 <__cmpsf2>:
 8000cc8:	f04f 0c01 	mov.w	ip, #1
 8000ccc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cd0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cdc:	bf18      	it	ne
 8000cde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce2:	d011      	beq.n	8000d08 <__cmpsf2+0x40>
 8000ce4:	b001      	add	sp, #4
 8000ce6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000cea:	bf18      	it	ne
 8000cec:	ea90 0f01 	teqne	r0, r1
 8000cf0:	bf58      	it	pl
 8000cf2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cf6:	bf88      	it	hi
 8000cf8:	17c8      	asrhi	r0, r1, #31
 8000cfa:	bf38      	it	cc
 8000cfc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d00:	bf18      	it	ne
 8000d02:	f040 0001 	orrne.w	r0, r0, #1
 8000d06:	4770      	bx	lr
 8000d08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d0c:	d102      	bne.n	8000d14 <__cmpsf2+0x4c>
 8000d0e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d12:	d105      	bne.n	8000d20 <__cmpsf2+0x58>
 8000d14:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d18:	d1e4      	bne.n	8000ce4 <__cmpsf2+0x1c>
 8000d1a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d1e:	d0e1      	beq.n	8000ce4 <__cmpsf2+0x1c>
 8000d20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <__aeabi_cfrcmple>:
 8000d28:	4684      	mov	ip, r0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	4661      	mov	r1, ip
 8000d2e:	e7ff      	b.n	8000d30 <__aeabi_cfcmpeq>

08000d30 <__aeabi_cfcmpeq>:
 8000d30:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d32:	f7ff ffc9 	bl	8000cc8 <__cmpsf2>
 8000d36:	2800      	cmp	r0, #0
 8000d38:	bf48      	it	mi
 8000d3a:	f110 0f00 	cmnmi.w	r0, #0
 8000d3e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d40 <__aeabi_fcmpeq>:
 8000d40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d44:	f7ff fff4 	bl	8000d30 <__aeabi_cfcmpeq>
 8000d48:	bf0c      	ite	eq
 8000d4a:	2001      	moveq	r0, #1
 8000d4c:	2000      	movne	r0, #0
 8000d4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d52:	bf00      	nop

08000d54 <__aeabi_fcmplt>:
 8000d54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d58:	f7ff ffea 	bl	8000d30 <__aeabi_cfcmpeq>
 8000d5c:	bf34      	ite	cc
 8000d5e:	2001      	movcc	r0, #1
 8000d60:	2000      	movcs	r0, #0
 8000d62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d66:	bf00      	nop

08000d68 <__aeabi_fcmple>:
 8000d68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d6c:	f7ff ffe0 	bl	8000d30 <__aeabi_cfcmpeq>
 8000d70:	bf94      	ite	ls
 8000d72:	2001      	movls	r0, #1
 8000d74:	2000      	movhi	r0, #0
 8000d76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7a:	bf00      	nop

08000d7c <__aeabi_fcmpge>:
 8000d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d80:	f7ff ffd2 	bl	8000d28 <__aeabi_cfrcmple>
 8000d84:	bf94      	ite	ls
 8000d86:	2001      	movls	r0, #1
 8000d88:	2000      	movhi	r0, #0
 8000d8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8e:	bf00      	nop

08000d90 <__aeabi_fcmpgt>:
 8000d90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d94:	f7ff ffc8 	bl	8000d28 <__aeabi_cfrcmple>
 8000d98:	bf34      	ite	cc
 8000d9a:	2001      	movcc	r0, #1
 8000d9c:	2000      	movcs	r0, #0
 8000d9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da2:	bf00      	nop

08000da4 <__aeabi_f2uiz>:
 8000da4:	0042      	lsls	r2, r0, #1
 8000da6:	d20e      	bcs.n	8000dc6 <__aeabi_f2uiz+0x22>
 8000da8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000dac:	d30b      	bcc.n	8000dc6 <__aeabi_f2uiz+0x22>
 8000dae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000db2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000db6:	d409      	bmi.n	8000dcc <__aeabi_f2uiz+0x28>
 8000db8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000dbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000dc4:	4770      	bx	lr
 8000dc6:	f04f 0000 	mov.w	r0, #0
 8000dca:	4770      	bx	lr
 8000dcc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000dd0:	d101      	bne.n	8000dd6 <__aeabi_f2uiz+0x32>
 8000dd2:	0242      	lsls	r2, r0, #9
 8000dd4:	d102      	bne.n	8000ddc <__aeabi_f2uiz+0x38>
 8000dd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dda:	4770      	bx	lr
 8000ddc:	f04f 0000 	mov.w	r0, #0
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <PID_Init>:
 #include "PID.h"

void PID_Init(PIDController *pid, int N_input) {//nMotor is the number of motor to control
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]

	/* Clear controller variables */
	for(int i = 0;i < N_input; i++){
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	e025      	b.n	8000e40 <PID_Init+0x5c>
		pid->integrator[i] = 0.0f;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	3206      	adds	r2, #6
 8000dfa:	f04f 0100 	mov.w	r1, #0
 8000dfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pid->prevError[i]  = 0.0f;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	3208      	adds	r2, #8
 8000e08:	f04f 0100 	mov.w	r1, #0
 8000e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		pid->differentiator[i]  = 0.0f;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	320a      	adds	r2, #10
 8000e16:	f04f 0100 	mov.w	r1, #0
 8000e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pid->prevMeasurement[i] = 0.0f;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	320c      	adds	r2, #12
 8000e24:	f04f 0100 	mov.w	r1, #0
 8000e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		pid->out[i] = 0.0f;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	320e      	adds	r2, #14
 8000e32:	f04f 0100 	mov.w	r1, #0
 8000e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0;i < N_input; i++){
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dbd5      	blt.n	8000df4 <PID_Init+0x10>
	}


}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <PID>:

float PID(PIDController *pid, float setpoint, float measurement,float Kp,float Ki,float Kd, int i){// "i" input identity
 8000e54:	b5b0      	push	{r4, r5, r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	603b      	str	r3, [r7, #0]
	/*
	* -------------------------------------Error signal------------------------------------------
	*/
	float error = setpoint - measurement;;
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	68b8      	ldr	r0, [r7, #8]
 8000e66:	f7ff fccd 	bl	8000804 <__aeabi_fsub>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	617b      	str	r3, [r7, #20]
	/*
	* Proportional
	*/
    float proportional = Kp * error;
 8000e6e:	6979      	ldr	r1, [r7, #20]
 8000e70:	6838      	ldr	r0, [r7, #0]
 8000e72:	f7ff fdd1 	bl	8000a18 <__aeabi_fmul>
 8000e76:	4603      	mov	r3, r0
 8000e78:	613b      	str	r3, [r7, #16]
	/*
	* ----------------------------------------Integral-----------------------------------------------
	*/
    pid->integrator[i]	= pid->integrator[i] + 0.5f * Ki * pid->T
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e7e:	3206      	adds	r2, #6
 8000e80:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8000e84:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8000e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e8a:	f7ff fdc5 	bl	8000a18 <__aeabi_fmul>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	4619      	mov	r1, r3
 8000e98:	4610      	mov	r0, r2
 8000e9a:	f7ff fdbd 	bl	8000a18 <__aeabi_fmul>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	461d      	mov	r5, r3
    					* (error + pid->prevError[i]);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ea6:	3208      	adds	r2, #8
 8000ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eac:	6979      	ldr	r1, [r7, #20]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fcaa 	bl	8000808 <__addsf3>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4628      	mov	r0, r5
 8000eba:	f7ff fdad 	bl	8000a18 <__aeabi_fmul>
 8000ebe:	4603      	mov	r3, r0
    pid->integrator[i]	= pid->integrator[i] + 0.5f * Ki * pid->T
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f7ff fca0 	bl	8000808 <__addsf3>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4619      	mov	r1, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ed0:	3206      	adds	r2, #6
 8000ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator[i] > pid->limMaxInt) {
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000eda:	3206      	adds	r2, #6
 8000edc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	f7ff ff52 	bl	8000d90 <__aeabi_fcmpgt>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d007      	beq.n	8000f02 <PID+0xae>
        pid->integrator[i] = pid->limMaxInt;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6919      	ldr	r1, [r3, #16]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000efa:	3206      	adds	r2, #6
 8000efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000f00:	e01f      	b.n	8000f42 <PID+0xee>
    }
    else if (pid->integrator[i] < pid->limMinInt) {
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f06:	3206      	adds	r2, #6
 8000f08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	4619      	mov	r1, r3
 8000f12:	4610      	mov	r0, r2
 8000f14:	f7ff ff1e 	bl	8000d54 <__aeabi_fcmplt>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d007      	beq.n	8000f2e <PID+0xda>
        pid->integrator[i] = pid->limMinInt;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	68d9      	ldr	r1, [r3, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f26:	3206      	adds	r2, #6
 8000f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000f2c:	e009      	b.n	8000f42 <PID+0xee>
    }
    else{
    	pid->integrator[i] = pid->integrator[i];
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f32:	3206      	adds	r2, #6
 8000f34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f3c:	3206      	adds	r2, #6
 8000f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/*
	* Derivative (band-limited differentator)
	*/

    pid->differentiator[i] = -(2.0f * Kd * (measurement - pid->prevMeasurement[i])	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8000f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f44:	4619      	mov	r1, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fc5e 	bl	8000808 <__addsf3>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461c      	mov	r4, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f54:	320c      	adds	r2, #12
 8000f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff fc51 	bl	8000804 <__aeabi_fsub>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4619      	mov	r1, r3
 8000f66:	4620      	mov	r0, r4
 8000f68:	f7ff fd56 	bl	8000a18 <__aeabi_fmul>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461c      	mov	r4, r3
                        	 + (2.0f * pid->tau - pid->T) * pid->differentiator[i])
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fc46 	bl	8000808 <__addsf3>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	4619      	mov	r1, r3
 8000f86:	4610      	mov	r0, r2
 8000f88:	f7ff fc3c 	bl	8000804 <__aeabi_fsub>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f94:	320a      	adds	r2, #10
 8000f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f7ff fd3c 	bl	8000a18 <__aeabi_fmul>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	f7ff fc2f 	bl	8000808 <__addsf3>
 8000faa:	4603      	mov	r3, r0
    pid->differentiator[i] = -(2.0f * Kd * (measurement - pid->prevMeasurement[i])	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8000fac:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
							 / (2.0f * pid->tau + pid->T);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fc26 	bl	8000808 <__addsf3>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	f7ff fc1e 	bl	8000808 <__addsf3>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f7ff fdd5 	bl	8000b80 <__aeabi_fdiv>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4619      	mov	r1, r3
    pid->differentiator[i] = -(2.0f * Kd * (measurement - pid->prevMeasurement[i])	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fde:	320a      	adds	r2, #10
 8000fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	/*
	* Compute output and apply limits
	*/
    pid->out[i] = proportional + pid->integrator[i] + pid->differentiator[i];
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fe8:	3206      	adds	r2, #6
 8000fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fee:	6939      	ldr	r1, [r7, #16]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fc09 	bl	8000808 <__addsf3>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ffe:	320a      	adds	r2, #10
 8001000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001004:	4619      	mov	r1, r3
 8001006:	f7ff fbff 	bl	8000808 <__addsf3>
 800100a:	4603      	mov	r3, r0
 800100c:	4619      	mov	r1, r3
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001012:	320e      	adds	r2, #14
 8001014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    //sat[i] = pid->out[i];
    if (pid->out[i] > pid->limMax) {
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800101c:	320e      	adds	r2, #14
 800101e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	4619      	mov	r1, r3
 8001028:	4610      	mov	r0, r2
 800102a:	f7ff feb1 	bl	8000d90 <__aeabi_fcmpgt>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d007      	beq.n	8001044 <PID+0x1f0>
        pid->out[i] = pid->limMax;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6899      	ldr	r1, [r3, #8]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800103c:	320e      	adds	r2, #14
 800103e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001042:	e01f      	b.n	8001084 <PID+0x230>
    }
    else if (pid->out[i] < pid->limMin) {
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001048:	320e      	adds	r2, #14
 800104a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	4619      	mov	r1, r3
 8001054:	4610      	mov	r0, r2
 8001056:	f7ff fe7d 	bl	8000d54 <__aeabi_fcmplt>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d007      	beq.n	8001070 <PID+0x21c>
        pid->out[i] = pid->limMin;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6859      	ldr	r1, [r3, #4]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001068:	320e      	adds	r2, #14
 800106a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800106e:	e009      	b.n	8001084 <PID+0x230>
    }
    else{
    	pid->out[i] = pid->out[i];
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001074:	320e      	adds	r2, #14
 8001076:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800107e:	320e      	adds	r2, #14
 8001080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    /* Store error and measurement for later use */
    pid->prevError[i]       = error;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001088:	3208      	adds	r2, #8
 800108a:	6979      	ldr	r1, [r7, #20]
 800108c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pid->prevMeasurement[i] = measurement;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001094:	320c      	adds	r2, #12
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/* Return controller output */
    return pid->out[i];
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010a0:	320e      	adds	r2, #14
 80010a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]

}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080010b0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80010b6:	4b25      	ldr	r3, [pc, #148]	; (800114c <MX_CAN_Init+0x9c>)
 80010b8:	4a25      	ldr	r2, [pc, #148]	; (8001150 <MX_CAN_Init+0xa0>)
 80010ba:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 80010bc:	4b23      	ldr	r3, [pc, #140]	; (800114c <MX_CAN_Init+0x9c>)
 80010be:	2209      	movs	r2, #9
 80010c0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80010c2:	4b22      	ldr	r3, [pc, #136]	; (800114c <MX_CAN_Init+0x9c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010c8:	4b20      	ldr	r3, [pc, #128]	; (800114c <MX_CAN_Init+0x9c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80010ce:	4b1f      	ldr	r3, [pc, #124]	; (800114c <MX_CAN_Init+0x9c>)
 80010d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010d4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_CAN_Init+0x9c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <MX_CAN_Init+0x9c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_CAN_Init+0x9c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <MX_CAN_Init+0x9c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_CAN_Init+0x9c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <MX_CAN_Init+0x9c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_CAN_Init+0x9c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001100:	4812      	ldr	r0, [pc, #72]	; (800114c <MX_CAN_Init+0x9c>)
 8001102:	f001 fd95 	bl	8002c30 <HAL_CAN_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800110c:	f001 f95e 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001110:	2301      	movs	r3, #1
 8001112:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8001114:	230a      	movs	r3, #10
 8001116:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8001118:	2301      	movs	r3, #1
 800111a:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x222<<5;
 800111c:	f244 4340 	movw	r3, #17472	; 0x4440
 8001120:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x000<<5;
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001132:	2301      	movs	r3, #1
 8001134:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800113a:	463b      	mov	r3, r7
 800113c:	4619      	mov	r1, r3
 800113e:	4803      	ldr	r0, [pc, #12]	; (800114c <MX_CAN_Init+0x9c>)
 8001140:	f001 fe71 	bl	8002e26 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	3728      	adds	r7, #40	; 0x28
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000030 	.word	0x20000030
 8001150:	40006400 	.word	0x40006400

08001154 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a20      	ldr	r2, [pc, #128]	; (80011f0 <HAL_CAN_MspInit+0x9c>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d139      	bne.n	80011e8 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <HAL_CAN_MspInit+0xa0>)
 8001176:	69db      	ldr	r3, [r3, #28]
 8001178:	4a1e      	ldr	r2, [pc, #120]	; (80011f4 <HAL_CAN_MspInit+0xa0>)
 800117a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800117e:	61d3      	str	r3, [r2, #28]
 8001180:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <HAL_CAN_MspInit+0xa0>)
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_CAN_MspInit+0xa0>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a18      	ldr	r2, [pc, #96]	; (80011f4 <HAL_CAN_MspInit+0xa0>)
 8001192:	f043 0304 	orr.w	r3, r3, #4
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <HAL_CAN_MspInit+0xa0>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4619      	mov	r1, r3
 80011b8:	480f      	ldr	r0, [pc, #60]	; (80011f8 <HAL_CAN_MspInit+0xa4>)
 80011ba:	f002 fba9 	bl	8003910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c8:	2303      	movs	r3, #3
 80011ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	4619      	mov	r1, r3
 80011d2:	4809      	ldr	r0, [pc, #36]	; (80011f8 <HAL_CAN_MspInit+0xa4>)
 80011d4:	f002 fb9c 	bl	8003910 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2100      	movs	r1, #0
 80011dc:	2015      	movs	r0, #21
 80011de:	f002 fb60 	bl	80038a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80011e2:	2015      	movs	r0, #21
 80011e4:	f002 fb79 	bl	80038da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80011e8:	bf00      	nop
 80011ea:	3720      	adds	r7, #32
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40006400 	.word	0x40006400
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40010800 	.word	0x40010800

080011fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 0310 	add.w	r3, r7, #16
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001210:	4b4a      	ldr	r3, [pc, #296]	; (800133c <MX_GPIO_Init+0x140>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	4a49      	ldr	r2, [pc, #292]	; (800133c <MX_GPIO_Init+0x140>)
 8001216:	f043 0310 	orr.w	r3, r3, #16
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b47      	ldr	r3, [pc, #284]	; (800133c <MX_GPIO_Init+0x140>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f003 0310 	and.w	r3, r3, #16
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001228:	4b44      	ldr	r3, [pc, #272]	; (800133c <MX_GPIO_Init+0x140>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	4a43      	ldr	r2, [pc, #268]	; (800133c <MX_GPIO_Init+0x140>)
 800122e:	f043 0320 	orr.w	r3, r3, #32
 8001232:	6193      	str	r3, [r2, #24]
 8001234:	4b41      	ldr	r3, [pc, #260]	; (800133c <MX_GPIO_Init+0x140>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	f003 0320 	and.w	r3, r3, #32
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	4b3e      	ldr	r3, [pc, #248]	; (800133c <MX_GPIO_Init+0x140>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a3d      	ldr	r2, [pc, #244]	; (800133c <MX_GPIO_Init+0x140>)
 8001246:	f043 0304 	orr.w	r3, r3, #4
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b3b      	ldr	r3, [pc, #236]	; (800133c <MX_GPIO_Init+0x140>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001258:	4b38      	ldr	r3, [pc, #224]	; (800133c <MX_GPIO_Init+0x140>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a37      	ldr	r2, [pc, #220]	; (800133c <MX_GPIO_Init+0x140>)
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b35      	ldr	r3, [pc, #212]	; (800133c <MX_GPIO_Init+0x140>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M5_dir_Pin|M2_dir_Pin|M3_dir_Pin, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001276:	4832      	ldr	r0, [pc, #200]	; (8001340 <MX_GPIO_Init+0x144>)
 8001278:	f002 fce5 	bl	8003c46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_dir_Pin|M4_dir_Pin|GPIO_PIN_2|M6_dir_Pin
 800127c:	2200      	movs	r2, #0
 800127e:	f248 4107 	movw	r1, #33799	; 0x8407
 8001282:	4830      	ldr	r0, [pc, #192]	; (8001344 <MX_GPIO_Init+0x148>)
 8001284:	f002 fcdf 	bl	8003c46 <HAL_GPIO_WritePin>
                          |Sh_M2_dir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Sh_M1_dir_GPIO_Port, Sh_M1_dir_Pin, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	2108      	movs	r1, #8
 800128c:	482e      	ldr	r0, [pc, #184]	; (8001348 <MX_GPIO_Init+0x14c>)
 800128e:	f002 fcda 	bl	8003c46 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = M5_dir_Pin|M2_dir_Pin|M3_dir_Pin;
 8001292:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001298:	2301      	movs	r3, #1
 800129a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2302      	movs	r3, #2
 80012a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	4619      	mov	r1, r3
 80012aa:	4825      	ldr	r0, [pc, #148]	; (8001340 <MX_GPIO_Init+0x144>)
 80012ac:	f002 fb30 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA2 PAPin
                           PAPin */
  GPIO_InitStruct.Pin = M1_dir_Pin|M4_dir_Pin|GPIO_PIN_2|M6_dir_Pin
 80012b0:	f248 4307 	movw	r3, #33799	; 0x8407
 80012b4:	613b      	str	r3, [r7, #16]
                          |Sh_M2_dir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2302      	movs	r3, #2
 80012c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	4619      	mov	r1, r3
 80012c8:	481e      	ldr	r0, [pc, #120]	; (8001344 <MX_GPIO_Init+0x148>)
 80012ca:	f002 fb21 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = En1_C1_Pin|En1_C2_Pin|En2_C1_Pin|En2_C2_Pin;
 80012ce:	2378      	movs	r3, #120	; 0x78
 80012d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012d2:	4b1e      	ldr	r3, [pc, #120]	; (800134c <MX_GPIO_Init+0x150>)
 80012d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	4619      	mov	r1, r3
 80012e0:	4818      	ldr	r0, [pc, #96]	; (8001344 <MX_GPIO_Init+0x148>)
 80012e2:	f002 fb15 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Sh_M1_dir_Pin;
 80012e6:	2308      	movs	r3, #8
 80012e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sh_M1_dir_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	4619      	mov	r1, r3
 80012fc:	4812      	ldr	r0, [pc, #72]	; (8001348 <MX_GPIO_Init+0x14c>)
 80012fe:	f002 fb07 	bl	8003910 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2009      	movs	r0, #9
 8001308:	f002 facb 	bl	80038a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800130c:	2009      	movs	r0, #9
 800130e:	f002 fae4 	bl	80038da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	200a      	movs	r0, #10
 8001318:	f002 fac3 	bl	80038a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800131c:	200a      	movs	r0, #10
 800131e:	f002 fadc 	bl	80038da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	2017      	movs	r0, #23
 8001328:	f002 fabb 	bl	80038a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800132c:	2017      	movs	r0, #23
 800132e:	f002 fad4 	bl	80038da <HAL_NVIC_EnableIRQ>

}
 8001332:	bf00      	nop
 8001334:	3720      	adds	r7, #32
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000
 8001340:	40011000 	.word	0x40011000
 8001344:	40010800 	.word	0x40010800
 8001348:	40010c00 	.word	0x40010c00
 800134c:	10310000 	.word	0x10310000

08001350 <map>:
uint8_t cntt;

uint8_t break_loop;

float map(float Input, float Min_Input, float Max_Input, float Min_Output, float Max_Output)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
 800135c:	603b      	str	r3, [r7, #0]

	return (float)((Input - Min_Input) * (Max_Output - Min_Output) / (Max_Input - Min_Input) + Min_Output);
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f7ff fa4f 	bl	8000804 <__aeabi_fsub>
 8001366:	4603      	mov	r3, r0
 8001368:	461c      	mov	r4, r3
 800136a:	6839      	ldr	r1, [r7, #0]
 800136c:	6a38      	ldr	r0, [r7, #32]
 800136e:	f7ff fa49 	bl	8000804 <__aeabi_fsub>
 8001372:	4603      	mov	r3, r0
 8001374:	4619      	mov	r1, r3
 8001376:	4620      	mov	r0, r4
 8001378:	f7ff fb4e 	bl	8000a18 <__aeabi_fmul>
 800137c:	4603      	mov	r3, r0
 800137e:	461c      	mov	r4, r3
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff fa3e 	bl	8000804 <__aeabi_fsub>
 8001388:	4603      	mov	r3, r0
 800138a:	4619      	mov	r1, r3
 800138c:	4620      	mov	r0, r4
 800138e:	f7ff fbf7 	bl	8000b80 <__aeabi_fdiv>
 8001392:	4603      	mov	r3, r0
 8001394:	6839      	ldr	r1, [r7, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fa36 	bl	8000808 <__addsf3>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd90      	pop	{r4, r7, pc}
	...

080013a8 <servo_rotation>:

void servo_rotation(uint8_t degree){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
	float y = 0.556 * (float) degree + 25;
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fad7 	bl	8000968 <__aeabi_ui2f>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f955 	bl	800066c <__aeabi_f2d>
 80013c2:	a317      	add	r3, pc, #92	; (adr r3, 8001420 <servo_rotation+0x78>)
 80013c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c8:	f7fe fec2 	bl	8000150 <__aeabi_dmul>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4610      	mov	r0, r2
 80013d2:	4619      	mov	r1, r3
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <servo_rotation+0x80>)
 80013da:	f7fe ffe9 	bl	80003b0 <__adddf3>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff f9b9 	bl	800075c <__aeabi_d2f>
 80013ea:	4603      	mov	r3, r0
 80013ec:	60fb      	str	r3, [r7, #12]
	uint8_t pwm = round(y);
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f7ff f93c 	bl	800066c <__aeabi_f2d>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f004 f830 	bl	8005460 <round>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	f7ff f988 	bl	800071c <__aeabi_d2uiz>
 800140c:	4603      	mov	r3, r0
 800140e:	72fb      	strb	r3, [r7, #11]
	TIM3->CCR2 = pwm;
 8001410:	4a06      	ldr	r2, [pc, #24]	; (800142c <servo_rotation+0x84>)
 8001412:	7afb      	ldrb	r3, [r7, #11]
 8001414:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	83126e98 	.word	0x83126e98
 8001424:	3fe1cac0 	.word	0x3fe1cac0
 8001428:	40390000 	.word	0x40390000
 800142c:	40000400 	.word	0x40000400

08001430 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af02      	add	r7, sp, #8
 8001436:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001438:	4b84      	ldr	r3, [pc, #528]	; (800164c <HAL_CAN_RxFifo1MsgPendingCallback+0x21c>)
 800143a:	4a85      	ldr	r2, [pc, #532]	; (8001650 <HAL_CAN_RxFifo1MsgPendingCallback+0x220>)
 800143c:	2101      	movs	r1, #1
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f001 fdfe 	bl	8003040 <HAL_CAN_GetRxMessage>
	cntt++;
 8001444:	4b83      	ldr	r3, [pc, #524]	; (8001654 <HAL_CAN_RxFifo1MsgPendingCallback+0x224>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	3301      	adds	r3, #1
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b81      	ldr	r3, [pc, #516]	; (8001654 <HAL_CAN_RxFifo1MsgPendingCallback+0x224>)
 800144e:	701a      	strb	r2, [r3, #0]
	while (cntt - 100 > 0)
 8001450:	e006      	b.n	8001460 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8001452:	2104      	movs	r1, #4
 8001454:	4880      	ldr	r0, [pc, #512]	; (8001658 <HAL_CAN_RxFifo1MsgPendingCallback+0x228>)
 8001456:	f002 fc0e 	bl	8003c76 <HAL_GPIO_TogglePin>
		cntt = 0;
 800145a:	4b7e      	ldr	r3, [pc, #504]	; (8001654 <HAL_CAN_RxFifo1MsgPendingCallback+0x224>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
	while (cntt - 100 > 0)
 8001460:	4b7c      	ldr	r3, [pc, #496]	; (8001654 <HAL_CAN_RxFifo1MsgPendingCallback+0x224>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b64      	cmp	r3, #100	; 0x64
 8001466:	d8f4      	bhi.n	8001452 <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
	}

	if (RxHeader.DLC == 2 && RxHeader.StdId == 0x222)
 8001468:	4b79      	ldr	r3, [pc, #484]	; (8001650 <HAL_CAN_RxFifo1MsgPendingCallback+0x220>)
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d122      	bne.n	80014b6 <HAL_CAN_RxFifo1MsgPendingCallback+0x86>
 8001470:	4b77      	ldr	r3, [pc, #476]	; (8001650 <HAL_CAN_RxFifo1MsgPendingCallback+0x220>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f240 2222 	movw	r2, #546	; 0x222
 8001478:	4293      	cmp	r3, r2
 800147a:	d11c      	bne.n	80014b6 <HAL_CAN_RxFifo1MsgPendingCallback+0x86>
	{
		data_16 = (RxData[0] << 8) | RxData[1];
 800147c:	4b73      	ldr	r3, [pc, #460]	; (800164c <HAL_CAN_RxFifo1MsgPendingCallback+0x21c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	b21a      	sxth	r2, r3
 8001484:	4b71      	ldr	r3, [pc, #452]	; (800164c <HAL_CAN_RxFifo1MsgPendingCallback+0x21c>)
 8001486:	785b      	ldrb	r3, [r3, #1]
 8001488:	b21b      	sxth	r3, r3
 800148a:	4313      	orrs	r3, r2
 800148c:	b21b      	sxth	r3, r3
 800148e:	b29a      	uxth	r2, r3
 8001490:	4b72      	ldr	r3, [pc, #456]	; (800165c <HAL_CAN_RxFifo1MsgPendingCallback+0x22c>)
 8001492:	801a      	strh	r2, [r3, #0]
		speed = map(data_16,0,65535,0,1500);
 8001494:	4b71      	ldr	r3, [pc, #452]	; (800165c <HAL_CAN_RxFifo1MsgPendingCallback+0x22c>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fa65 	bl	8000968 <__aeabi_ui2f>
 800149e:	4b70      	ldr	r3, [pc, #448]	; (8001660 <HAL_CAN_RxFifo1MsgPendingCallback+0x230>)
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	4a6f      	ldr	r2, [pc, #444]	; (8001664 <HAL_CAN_RxFifo1MsgPendingCallback+0x234>)
 80014a8:	f04f 0100 	mov.w	r1, #0
 80014ac:	f7ff ff50 	bl	8001350 <map>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4a6d      	ldr	r2, [pc, #436]	; (8001668 <HAL_CAN_RxFifo1MsgPendingCallback+0x238>)
 80014b4:	6013      	str	r3, [r2, #0]
	}

	if (RxHeader.DLC == 1 && RxHeader.StdId == 0x444){
 80014b6:	4b66      	ldr	r3, [pc, #408]	; (8001650 <HAL_CAN_RxFifo1MsgPendingCallback+0x220>)
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d176      	bne.n	80015ac <HAL_CAN_RxFifo1MsgPendingCallback+0x17c>
 80014be:	4b64      	ldr	r3, [pc, #400]	; (8001650 <HAL_CAN_RxFifo1MsgPendingCallback+0x220>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f240 4244 	movw	r2, #1092	; 0x444
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d170      	bne.n	80015ac <HAL_CAN_RxFifo1MsgPendingCallback+0x17c>
		reload_feedback = RxData[0] >> 0 & 1;
 80014ca:	4b60      	ldr	r3, [pc, #384]	; (800164c <HAL_CAN_RxFifo1MsgPendingCallback+0x21c>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	4b65      	ldr	r3, [pc, #404]	; (800166c <HAL_CAN_RxFifo1MsgPendingCallback+0x23c>)
 80014d6:	701a      	strb	r2, [r3, #0]
		bit1 = RxData[0] >> 1 & 1;
 80014d8:	4b5c      	ldr	r3, [pc, #368]	; (800164c <HAL_CAN_RxFifo1MsgPendingCallback+0x21c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	085b      	lsrs	r3, r3, #1
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4b62      	ldr	r3, [pc, #392]	; (8001670 <HAL_CAN_RxFifo1MsgPendingCallback+0x240>)
 80014e8:	701a      	strb	r2, [r3, #0]
		bit2 = RxData[0] >> 2 & 1;
 80014ea:	4b58      	ldr	r3, [pc, #352]	; (800164c <HAL_CAN_RxFifo1MsgPendingCallback+0x21c>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	089b      	lsrs	r3, r3, #2
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	4b5e      	ldr	r3, [pc, #376]	; (8001674 <HAL_CAN_RxFifo1MsgPendingCallback+0x244>)
 80014fa:	701a      	strb	r2, [r3, #0]
		right_feedback = (bit2 << 1 ) + bit1;
 80014fc:	4b5d      	ldr	r3, [pc, #372]	; (8001674 <HAL_CAN_RxFifo1MsgPendingCallback+0x244>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b5a      	ldr	r3, [pc, #360]	; (8001670 <HAL_CAN_RxFifo1MsgPendingCallback+0x240>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4413      	add	r3, r2
 800150a:	b2da      	uxtb	r2, r3
 800150c:	4b5a      	ldr	r3, [pc, #360]	; (8001678 <HAL_CAN_RxFifo1MsgPendingCallback+0x248>)
 800150e:	701a      	strb	r2, [r3, #0]
		bit3 = RxData[0] >> 3 & 1;
 8001510:	4b4e      	ldr	r3, [pc, #312]	; (800164c <HAL_CAN_RxFifo1MsgPendingCallback+0x21c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	08db      	lsrs	r3, r3, #3
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4b57      	ldr	r3, [pc, #348]	; (800167c <HAL_CAN_RxFifo1MsgPendingCallback+0x24c>)
 8001520:	701a      	strb	r2, [r3, #0]
		bit4 = RxData[0] >> 4 & 1;
 8001522:	4b4a      	ldr	r3, [pc, #296]	; (800164c <HAL_CAN_RxFifo1MsgPendingCallback+0x21c>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	b2db      	uxtb	r3, r3
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	b2da      	uxtb	r2, r3
 8001530:	4b53      	ldr	r3, [pc, #332]	; (8001680 <HAL_CAN_RxFifo1MsgPendingCallback+0x250>)
 8001532:	701a      	strb	r2, [r3, #0]
		left_feedback = (bit4 << 1 ) + bit3;
 8001534:	4b52      	ldr	r3, [pc, #328]	; (8001680 <HAL_CAN_RxFifo1MsgPendingCallback+0x250>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	b2da      	uxtb	r2, r3
 800153c:	4b4f      	ldr	r3, [pc, #316]	; (800167c <HAL_CAN_RxFifo1MsgPendingCallback+0x24c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4413      	add	r3, r2
 8001542:	b2da      	uxtb	r2, r3
 8001544:	4b4f      	ldr	r3, [pc, #316]	; (8001684 <HAL_CAN_RxFifo1MsgPendingCallback+0x254>)
 8001546:	701a      	strb	r2, [r3, #0]

		shoot_feedback = RxData[0] >> 5 & 1;
 8001548:	4b40      	ldr	r3, [pc, #256]	; (800164c <HAL_CAN_RxFifo1MsgPendingCallback+0x21c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	095b      	lsrs	r3, r3, #5
 800154e:	b2db      	uxtb	r3, r3
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4b4c      	ldr	r3, [pc, #304]	; (8001688 <HAL_CAN_RxFifo1MsgPendingCallback+0x258>)
 8001558:	701a      	strb	r2, [r3, #0]

		right_reset = RxData[0] >> 6 & 1;
 800155a:	4b3c      	ldr	r3, [pc, #240]	; (800164c <HAL_CAN_RxFifo1MsgPendingCallback+0x21c>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	099b      	lsrs	r3, r3, #6
 8001560:	b2db      	uxtb	r3, r3
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b48      	ldr	r3, [pc, #288]	; (800168c <HAL_CAN_RxFifo1MsgPendingCallback+0x25c>)
 800156a:	701a      	strb	r2, [r3, #0]
		left_reset = RxData[0] >> 7 & 1;
 800156c:	4b37      	ldr	r3, [pc, #220]	; (800164c <HAL_CAN_RxFifo1MsgPendingCallback+0x21c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	09db      	lsrs	r3, r3, #7
 8001572:	b2da      	uxtb	r2, r3
 8001574:	4b46      	ldr	r3, [pc, #280]	; (8001690 <HAL_CAN_RxFifo1MsgPendingCallback+0x260>)
 8001576:	701a      	strb	r2, [r3, #0]

		if (right_reset == 1 || left_reset == 1){
 8001578:	4b44      	ldr	r3, [pc, #272]	; (800168c <HAL_CAN_RxFifo1MsgPendingCallback+0x25c>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d003      	beq.n	8001588 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>
 8001580:	4b43      	ldr	r3, [pc, #268]	; (8001690 <HAL_CAN_RxFifo1MsgPendingCallback+0x260>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d111      	bne.n	80015ac <HAL_CAN_RxFifo1MsgPendingCallback+0x17c>
			right_reset = 0;
 8001588:	4b40      	ldr	r3, [pc, #256]	; (800168c <HAL_CAN_RxFifo1MsgPendingCallback+0x25c>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
			left_reset = 0;
 800158e:	4b40      	ldr	r3, [pc, #256]	; (8001690 <HAL_CAN_RxFifo1MsgPendingCallback+0x260>)
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
			// break signal

			break_loop = 1;
 8001594:	4b3f      	ldr	r3, [pc, #252]	; (8001694 <HAL_CAN_RxFifo1MsgPendingCallback+0x264>)
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
			servo_rotation(150);
 800159a:	2096      	movs	r0, #150	; 0x96
 800159c:	f7ff ff04 	bl	80013a8 <servo_rotation>
			right_control = 1;
 80015a0:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <HAL_CAN_RxFifo1MsgPendingCallback+0x268>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]
			left_control = 1;
 80015a6:	4b3d      	ldr	r3, [pc, #244]	; (800169c <HAL_CAN_RxFifo1MsgPendingCallback+0x26c>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	701a      	strb	r2, [r3, #0]
		}
	}

	// working_state
	if (RxHeader.DLC == 1 && RxHeader.StdId == 0x145){
 80015ac:	4b28      	ldr	r3, [pc, #160]	; (8001650 <HAL_CAN_RxFifo1MsgPendingCallback+0x220>)
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d146      	bne.n	8001642 <HAL_CAN_RxFifo1MsgPendingCallback+0x212>
 80015b4:	4b26      	ldr	r3, [pc, #152]	; (8001650 <HAL_CAN_RxFifo1MsgPendingCallback+0x220>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f240 1245 	movw	r2, #325	; 0x145
 80015bc:	4293      	cmp	r3, r2
 80015be:	d140      	bne.n	8001642 <HAL_CAN_RxFifo1MsgPendingCallback+0x212>
		if(RxData[0] == 0){
 80015c0:	4b22      	ldr	r3, [pc, #136]	; (800164c <HAL_CAN_RxFifo1MsgPendingCallback+0x21c>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d115      	bne.n	80015f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>
			if(right_error == 0 && left_error == 0 && left_feedback != 0 && right_feedback != 0) {
 80015c8:	4b35      	ldr	r3, [pc, #212]	; (80016a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x270>)
 80015ca:	f993 3000 	ldrsb.w	r3, [r3]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d137      	bne.n	8001642 <HAL_CAN_RxFifo1MsgPendingCallback+0x212>
 80015d2:	4b34      	ldr	r3, [pc, #208]	; (80016a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x274>)
 80015d4:	f993 3000 	ldrsb.w	r3, [r3]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d132      	bne.n	8001642 <HAL_CAN_RxFifo1MsgPendingCallback+0x212>
 80015dc:	4b29      	ldr	r3, [pc, #164]	; (8001684 <HAL_CAN_RxFifo1MsgPendingCallback+0x254>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d02e      	beq.n	8001642 <HAL_CAN_RxFifo1MsgPendingCallback+0x212>
 80015e4:	4b24      	ldr	r3, [pc, #144]	; (8001678 <HAL_CAN_RxFifo1MsgPendingCallback+0x248>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d02a      	beq.n	8001642 <HAL_CAN_RxFifo1MsgPendingCallback+0x212>
				prepare = 1;
 80015ec:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x278>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
			if(shoot_state == 0 ){ // && ring_count > 0 && ring_count <= 10
				shoot = 1;
			}
		}
	}
}
 80015f2:	e026      	b.n	8001642 <HAL_CAN_RxFifo1MsgPendingCallback+0x212>
		else if(RxData[0] == 1 && start_finish == 1){
 80015f4:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_CAN_RxFifo1MsgPendingCallback+0x21c>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d111      	bne.n	8001620 <HAL_CAN_RxFifo1MsgPendingCallback+0x1f0>
 80015fc:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <HAL_CAN_RxFifo1MsgPendingCallback+0x27c>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d10d      	bne.n	8001620 <HAL_CAN_RxFifo1MsgPendingCallback+0x1f0>
			if(right_error == 0 && left_error == 0){
 8001604:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x270>)
 8001606:	f993 3000 	ldrsb.w	r3, [r3]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d118      	bne.n	8001640 <HAL_CAN_RxFifo1MsgPendingCallback+0x210>
 800160e:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x274>)
 8001610:	f993 3000 	ldrsb.w	r3, [r3]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d113      	bne.n	8001640 <HAL_CAN_RxFifo1MsgPendingCallback+0x210>
				start = 1;
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x280>)
 800161a:	2201      	movs	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]
			if(right_error == 0 && left_error == 0){
 800161e:	e00f      	b.n	8001640 <HAL_CAN_RxFifo1MsgPendingCallback+0x210>
		else if(RxData[0] == 2 && shoot_finish == 1){
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <HAL_CAN_RxFifo1MsgPendingCallback+0x21c>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d10c      	bne.n	8001642 <HAL_CAN_RxFifo1MsgPendingCallback+0x212>
 8001628:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x284>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d108      	bne.n	8001642 <HAL_CAN_RxFifo1MsgPendingCallback+0x212>
			if(shoot_state == 0 ){ // && ring_count > 0 && ring_count <= 10
 8001630:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x288>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d104      	bne.n	8001642 <HAL_CAN_RxFifo1MsgPendingCallback+0x212>
				shoot = 1;
 8001638:	4b20      	ldr	r3, [pc, #128]	; (80016bc <HAL_CAN_RxFifo1MsgPendingCallback+0x28c>)
 800163a:	2201      	movs	r2, #1
 800163c:	701a      	strb	r2, [r3, #0]
}
 800163e:	e000      	b.n	8001642 <HAL_CAN_RxFifo1MsgPendingCallback+0x212>
			if(right_error == 0 && left_error == 0){
 8001640:	bf00      	nop
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000128 	.word	0x20000128
 8001650:	2000010c 	.word	0x2000010c
 8001654:	20000130 	.word	0x20000130
 8001658:	40010800 	.word	0x40010800
 800165c:	20000058 	.word	0x20000058
 8001660:	44bb8000 	.word	0x44bb8000
 8001664:	477fff00 	.word	0x477fff00
 8001668:	2000005c 	.word	0x2000005c
 800166c:	200000f8 	.word	0x200000f8
 8001670:	20000100 	.word	0x20000100
 8001674:	20000101 	.word	0x20000101
 8001678:	20000002 	.word	0x20000002
 800167c:	20000102 	.word	0x20000102
 8001680:	20000103 	.word	0x20000103
 8001684:	20000004 	.word	0x20000004
 8001688:	200000fd 	.word	0x200000fd
 800168c:	20000109 	.word	0x20000109
 8001690:	2000010a 	.word	0x2000010a
 8001694:	20000131 	.word	0x20000131
 8001698:	20000003 	.word	0x20000003
 800169c:	20000005 	.word	0x20000005
 80016a0:	200000fb 	.word	0x200000fb
 80016a4:	200000fc 	.word	0x200000fc
 80016a8:	20000106 	.word	0x20000106
 80016ac:	20000001 	.word	0x20000001
 80016b0:	20000105 	.word	0x20000105
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000060 	.word	0x20000060
 80016bc:	20000108 	.word	0x20000108

080016c0 <prepare_function>:

/* USER CODE BEGIN PV */
// process on pick up //


void prepare_function(){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	ring_count = 0;
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <prepare_function+0x40>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
	servo_rotation(160);
 80016ca:	20a0      	movs	r0, #160	; 0xa0
 80016cc:	f7ff fe6c 	bl	80013a8 <servo_rotation>
	right_control = 0;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <prepare_function+0x44>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
	left_control = 0;
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <prepare_function+0x48>)
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 80016dc:	200a      	movs	r0, #10
 80016de:	f001 fa83 	bl	8002be8 <HAL_Delay>
	while (left_error != 0 || right_error != 0 )
 80016e2:	bf00      	nop
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <prepare_function+0x4c>)
 80016e6:	f993 3000 	ldrsb.w	r3, [r3]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1fa      	bne.n	80016e4 <prepare_function+0x24>
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <prepare_function+0x50>)
 80016f0:	f993 3000 	ldrsb.w	r3, [r3]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1f5      	bne.n	80016e4 <prepare_function+0x24>
	{
		/* code */
	}
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000104 	.word	0x20000104
 8001704:	20000003 	.word	0x20000003
 8001708:	20000005 	.word	0x20000005
 800170c:	200000fc 	.word	0x200000fc
 8001710:	200000fb 	.word	0x200000fb

08001714 <reload_function>:
//
//}
//


void reload_function(){
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0

	if(break_loop){
 8001718:	4b48      	ldr	r3, [pc, #288]	; (800183c <reload_function+0x128>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d009      	beq.n	8001734 <reload_function+0x20>
		break_loop = 0;
 8001720:	4b46      	ldr	r3, [pc, #280]	; (800183c <reload_function+0x128>)
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
		right_feedback = 1;
 8001726:	4b46      	ldr	r3, [pc, #280]	; (8001840 <reload_function+0x12c>)
 8001728:	2201      	movs	r2, #1
 800172a:	701a      	strb	r2, [r3, #0]
		left_feedback = 1;
 800172c:	4b45      	ldr	r3, [pc, #276]	; (8001844 <reload_function+0x130>)
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

}
 8001732:	e081      	b.n	8001838 <reload_function+0x124>
		reload_control = 1;
 8001734:	4b44      	ldr	r3, [pc, #272]	; (8001848 <reload_function+0x134>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
		HAL_Delay(300);
 800173a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800173e:	f001 fa53 	bl	8002be8 <HAL_Delay>
		while(reload_control != 0){
 8001742:	e005      	b.n	8001750 <reload_function+0x3c>
			right_control = 0;
 8001744:	4b41      	ldr	r3, [pc, #260]	; (800184c <reload_function+0x138>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
			left_control = 0;
 800174a:	4b41      	ldr	r3, [pc, #260]	; (8001850 <reload_function+0x13c>)
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
		while(reload_control != 0){
 8001750:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <reload_function+0x134>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1f5      	bne.n	8001744 <reload_function+0x30>
		while(reload_error != 0){
 8001758:	e00b      	b.n	8001772 <reload_function+0x5e>
			right_feedback = 0;
 800175a:	4b39      	ldr	r3, [pc, #228]	; (8001840 <reload_function+0x12c>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
			left_feedback = 0;
 8001760:	4b38      	ldr	r3, [pc, #224]	; (8001844 <reload_function+0x130>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
			right_error = 0;
 8001766:	4b3b      	ldr	r3, [pc, #236]	; (8001854 <reload_function+0x140>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
			left_error = 0;
 800176c:	4b3a      	ldr	r3, [pc, #232]	; (8001858 <reload_function+0x144>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
		while(reload_error != 0){
 8001772:	4b3a      	ldr	r3, [pc, #232]	; (800185c <reload_function+0x148>)
 8001774:	f993 3000 	ldrsb.w	r3, [r3]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1ee      	bne.n	800175a <reload_function+0x46>
		right_feedback = 0;
 800177c:	4b30      	ldr	r3, [pc, #192]	; (8001840 <reload_function+0x12c>)
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
		left_feedback = 0;
 8001782:	4b30      	ldr	r3, [pc, #192]	; (8001844 <reload_function+0x130>)
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
		while(reload_feedback != 0){
 8001788:	e002      	b.n	8001790 <reload_function+0x7c>
			HAL_Delay(10);
 800178a:	200a      	movs	r0, #10
 800178c:	f001 fa2c 	bl	8002be8 <HAL_Delay>
		while(reload_feedback != 0){
 8001790:	4b33      	ldr	r3, [pc, #204]	; (8001860 <reload_function+0x14c>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f8      	bne.n	800178a <reload_function+0x76>
		right_control = 3;
 8001798:	4b2c      	ldr	r3, [pc, #176]	; (800184c <reload_function+0x138>)
 800179a:	2203      	movs	r2, #3
 800179c:	701a      	strb	r2, [r3, #0]
		left_control = 3;
 800179e:	4b2c      	ldr	r3, [pc, #176]	; (8001850 <reload_function+0x13c>)
 80017a0:	2203      	movs	r2, #3
 80017a2:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 80017a4:	200a      	movs	r0, #10
 80017a6:	f001 fa1f 	bl	8002be8 <HAL_Delay>
		if(break_loop){
 80017aa:	4b24      	ldr	r3, [pc, #144]	; (800183c <reload_function+0x128>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d014      	beq.n	80017dc <reload_function+0xc8>
			right_control = 1;
 80017b2:	4b26      	ldr	r3, [pc, #152]	; (800184c <reload_function+0x138>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	701a      	strb	r2, [r3, #0]
			left_control = 1;
 80017b8:	4b25      	ldr	r3, [pc, #148]	; (8001850 <reload_function+0x13c>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	701a      	strb	r2, [r3, #0]
			servo_rotation(160);
 80017be:	20a0      	movs	r0, #160	; 0xa0
 80017c0:	f7ff fdf2 	bl	80013a8 <servo_rotation>
}
 80017c4:	e038      	b.n	8001838 <reload_function+0x124>
				if (break_loop){
 80017c6:	4b1d      	ldr	r3, [pc, #116]	; (800183c <reload_function+0x128>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d006      	beq.n	80017dc <reload_function+0xc8>
					right_control = 1;
 80017ce:	4b1f      	ldr	r3, [pc, #124]	; (800184c <reload_function+0x138>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	701a      	strb	r2, [r3, #0]
					left_control = 1;
 80017d4:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <reload_function+0x13c>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
					break;
 80017da:	e009      	b.n	80017f0 <reload_function+0xdc>
			while ((left_error != 0 || right_error != 0))
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <reload_function+0x144>)
 80017de:	f993 3000 	ldrsb.w	r3, [r3]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1ef      	bne.n	80017c6 <reload_function+0xb2>
 80017e6:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <reload_function+0x140>)
 80017e8:	f993 3000 	ldrsb.w	r3, [r3]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1ea      	bne.n	80017c6 <reload_function+0xb2>
			if (break_loop == 0){
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <reload_function+0x128>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d115      	bne.n	8001824 <reload_function+0x110>
				right_control = 2;
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <reload_function+0x138>)
 80017fa:	2202      	movs	r2, #2
 80017fc:	701a      	strb	r2, [r3, #0]
				left_control = 2;
 80017fe:	4b14      	ldr	r3, [pc, #80]	; (8001850 <reload_function+0x13c>)
 8001800:	2202      	movs	r2, #2
 8001802:	701a      	strb	r2, [r3, #0]
				HAL_Delay(10);
 8001804:	200a      	movs	r0, #10
 8001806:	f001 f9ef 	bl	8002be8 <HAL_Delay>
			while ((left_error != 0 || right_error != 0 ))
 800180a:	e00b      	b.n	8001824 <reload_function+0x110>
				if (break_loop){
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <reload_function+0x128>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d007      	beq.n	8001824 <reload_function+0x110>
					right_control = 1;
 8001814:	4b0d      	ldr	r3, [pc, #52]	; (800184c <reload_function+0x138>)
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
					left_control = 1;
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <reload_function+0x13c>)
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]
					break;
 8001820:	bf00      	nop
}
 8001822:	e009      	b.n	8001838 <reload_function+0x124>
			while ((left_error != 0 || right_error != 0 ))
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <reload_function+0x144>)
 8001826:	f993 3000 	ldrsb.w	r3, [r3]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1ee      	bne.n	800180c <reload_function+0xf8>
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <reload_function+0x140>)
 8001830:	f993 3000 	ldrsb.w	r3, [r3]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1e9      	bne.n	800180c <reload_function+0xf8>
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000131 	.word	0x20000131
 8001840:	20000002 	.word	0x20000002
 8001844:	20000004 	.word	0x20000004
 8001848:	200000f9 	.word	0x200000f9
 800184c:	20000003 	.word	0x20000003
 8001850:	20000005 	.word	0x20000005
 8001854:	200000fb 	.word	0x200000fb
 8001858:	200000fc 	.word	0x200000fc
 800185c:	200000fa 	.word	0x200000fa
 8001860:	200000f8 	.word	0x200000f8

08001864 <start_fucntion>:


void start_fucntion(){
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	start_finish = 0;
 8001868:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <start_fucntion+0x6c>)
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
	servo_rotation(95);
 800186e:	205f      	movs	r0, #95	; 0x5f
 8001870:	f7ff fd9a 	bl	80013a8 <servo_rotation>
	HAL_Delay(500);
 8001874:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001878:	f001 f9b6 	bl	8002be8 <HAL_Delay>
	right_control = 2;
 800187c:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <start_fucntion+0x70>)
 800187e:	2202      	movs	r2, #2
 8001880:	701a      	strb	r2, [r3, #0]
	left_control = 2;
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <start_fucntion+0x74>)
 8001884:	2202      	movs	r2, #2
 8001886:	701a      	strb	r2, [r3, #0]

	HAL_Delay(10);
 8001888:	200a      	movs	r0, #10
 800188a:	f001 f9ad 	bl	8002be8 <HAL_Delay>
	while ((left_error != 0 || right_error != 0 ) ){
 800188e:	e00a      	b.n	80018a6 <start_fucntion+0x42>
		if (break_loop){
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <start_fucntion+0x78>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d006      	beq.n	80018a6 <start_fucntion+0x42>
			right_control = 1;
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <start_fucntion+0x70>)
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
			left_control = 1;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <start_fucntion+0x74>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
			break;
 80018a4:	e009      	b.n	80018ba <start_fucntion+0x56>
	while ((left_error != 0 || right_error != 0 ) ){
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <start_fucntion+0x7c>)
 80018a8:	f993 3000 	ldrsb.w	r3, [r3]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1ef      	bne.n	8001890 <start_fucntion+0x2c>
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <start_fucntion+0x80>)
 80018b2:	f993 3000 	ldrsb.w	r3, [r3]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1ea      	bne.n	8001890 <start_fucntion+0x2c>
		}
	}

	HAL_Delay(10);
 80018ba:	200a      	movs	r0, #10
 80018bc:	f001 f994 	bl	8002be8 <HAL_Delay>
	reload_function();
 80018c0:	f7ff ff28 	bl	8001714 <reload_function>

	start_finish = 1;
 80018c4:	4b02      	ldr	r3, [pc, #8]	; (80018d0 <start_fucntion+0x6c>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	701a      	strb	r2, [r3, #0]
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000001 	.word	0x20000001
 80018d4:	20000003 	.word	0x20000003
 80018d8:	20000005 	.word	0x20000005
 80018dc:	20000131 	.word	0x20000131
 80018e0:	200000fc 	.word	0x200000fc
 80018e4:	200000fb 	.word	0x200000fb

080018e8 <shoot_function>:

void shoot_function(float speed_){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	shoot_finish = 0;
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <shoot_function+0x6c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
	speed = speed_;
 80018f6:	4a18      	ldr	r2, [pc, #96]	; (8001958 <shoot_function+0x70>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6013      	str	r3, [r2, #0]
	HAL_Delay(1000);
 80018fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001900:	f001 f972 	bl	8002be8 <HAL_Delay>
	shoot_state = 1;
 8001904:	4b15      	ldr	r3, [pc, #84]	; (800195c <shoot_function+0x74>)
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
	HAL_Delay(700);
 800190a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800190e:	f001 f96b 	bl	8002be8 <HAL_Delay>
	shoot_state = 0;
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <shoot_function+0x74>)
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
	speed = 0;
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <shoot_function+0x70>)
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

	HAL_Delay(10);
 8001920:	200a      	movs	r0, #10
 8001922:	f001 f961 	bl	8002be8 <HAL_Delay>
	while(shoot_error != 0);
 8001926:	bf00      	nop
 8001928:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <shoot_function+0x78>)
 800192a:	f993 3000 	ldrsb.w	r3, [r3]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1fa      	bne.n	8001928 <shoot_function+0x40>
	if (right_feedback != 1 && left_feedback != 1){
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <shoot_function+0x7c>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d005      	beq.n	8001946 <shoot_function+0x5e>
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <shoot_function+0x80>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d001      	beq.n	8001946 <shoot_function+0x5e>
		reload_function();
 8001942:	f7ff fee7 	bl	8001714 <reload_function>
	}
	shoot_finish = 1;
 8001946:	4b03      	ldr	r3, [pc, #12]	; (8001954 <shoot_function+0x6c>)
 8001948:	2201      	movs	r2, #1
 800194a:	701a      	strb	r2, [r3, #0]
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000000 	.word	0x20000000
 8001958:	2000005c 	.word	0x2000005c
 800195c:	20000060 	.word	0x20000060
 8001960:	200000ff 	.word	0x200000ff
 8001964:	20000002 	.word	0x20000002
 8001968:	20000004 	.word	0x20000004

0800196c <encoder>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
uint16_t encoder(int i)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	if (nowA[i] != lastA[i])
 8001974:	4a6e      	ldr	r2, [pc, #440]	; (8001b30 <encoder+0x1c4>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	b2da      	uxtb	r2, r3
 800197e:	496d      	ldr	r1, [pc, #436]	; (8001b34 <encoder+0x1c8>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	440b      	add	r3, r1
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	429a      	cmp	r2, r3
 800198a:	d05d      	beq.n	8001a48 <encoder+0xdc>
	{
		lastA[i] = nowA[i];
 800198c:	4a68      	ldr	r2, [pc, #416]	; (8001b30 <encoder+0x1c4>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	b2d9      	uxtb	r1, r3
 8001996:	4a67      	ldr	r2, [pc, #412]	; (8001b34 <encoder+0x1c8>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4413      	add	r3, r2
 800199c:	460a      	mov	r2, r1
 800199e:	701a      	strb	r2, [r3, #0]
		if (lastA[i] == 0)
 80019a0:	4a64      	ldr	r2, [pc, #400]	; (8001b34 <encoder+0x1c8>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d126      	bne.n	80019fc <encoder+0x90>
		{
			if (nowB[i] == 0)
 80019ae:	4a62      	ldr	r2, [pc, #392]	; (8001b38 <encoder+0x1cc>)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4413      	add	r3, r2
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10f      	bne.n	80019dc <encoder+0x70>
			{
				dir[i] = 0;
 80019bc:	4a5f      	ldr	r2, [pc, #380]	; (8001b3c <encoder+0x1d0>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
				cnt[i]--;
 80019c6:	4a5e      	ldr	r2, [pc, #376]	; (8001b40 <encoder+0x1d4>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	b299      	uxth	r1, r3
 80019d2:	4a5b      	ldr	r2, [pc, #364]	; (8001b40 <encoder+0x1d4>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80019da:	e035      	b.n	8001a48 <encoder+0xdc>
			}
			else
			{
				dir[i] = 1;
 80019dc:	4a57      	ldr	r2, [pc, #348]	; (8001b3c <encoder+0x1d0>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
				cnt[i]++;
 80019e6:	4a56      	ldr	r2, [pc, #344]	; (8001b40 <encoder+0x1d4>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019ee:	3301      	adds	r3, #1
 80019f0:	b299      	uxth	r1, r3
 80019f2:	4a53      	ldr	r2, [pc, #332]	; (8001b40 <encoder+0x1d4>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80019fa:	e025      	b.n	8001a48 <encoder+0xdc>
			}
		}
		else
		{
			if (nowB[i] == 1)
 80019fc:	4a4e      	ldr	r2, [pc, #312]	; (8001b38 <encoder+0x1cc>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d10f      	bne.n	8001a2a <encoder+0xbe>
			{
				dir[i] = 0;
 8001a0a:	4a4c      	ldr	r2, [pc, #304]	; (8001b3c <encoder+0x1d0>)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4413      	add	r3, r2
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
				cnt[i]--;
 8001a14:	4a4a      	ldr	r2, [pc, #296]	; (8001b40 <encoder+0x1d4>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	b299      	uxth	r1, r3
 8001a20:	4a47      	ldr	r2, [pc, #284]	; (8001b40 <encoder+0x1d4>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001a28:	e00e      	b.n	8001a48 <encoder+0xdc>
			}
			else
			{
				dir[i] = 1;
 8001a2a:	4a44      	ldr	r2, [pc, #272]	; (8001b3c <encoder+0x1d0>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
				cnt[i]++;
 8001a34:	4a42      	ldr	r2, [pc, #264]	; (8001b40 <encoder+0x1d4>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	b299      	uxth	r1, r3
 8001a40:	4a3f      	ldr	r2, [pc, #252]	; (8001b40 <encoder+0x1d4>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
		}
	}
	if (nowB[i] != lastB[i])
 8001a48:	4a3b      	ldr	r2, [pc, #236]	; (8001b38 <encoder+0x1cc>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	493c      	ldr	r1, [pc, #240]	; (8001b44 <encoder+0x1d8>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	440b      	add	r3, r1
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d05d      	beq.n	8001b1c <encoder+0x1b0>
	{
		lastB[i] = nowB[i];
 8001a60:	4a35      	ldr	r2, [pc, #212]	; (8001b38 <encoder+0x1cc>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	b2d9      	uxtb	r1, r3
 8001a6a:	4a36      	ldr	r2, [pc, #216]	; (8001b44 <encoder+0x1d8>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4413      	add	r3, r2
 8001a70:	460a      	mov	r2, r1
 8001a72:	701a      	strb	r2, [r3, #0]
		if (lastB[i] == 0)
 8001a74:	4a33      	ldr	r2, [pc, #204]	; (8001b44 <encoder+0x1d8>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d126      	bne.n	8001ad0 <encoder+0x164>
		{
			if (nowA[i] == 1)
 8001a82:	4a2b      	ldr	r2, [pc, #172]	; (8001b30 <encoder+0x1c4>)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4413      	add	r3, r2
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d10f      	bne.n	8001ab0 <encoder+0x144>
			{
				dir[i] = 0;
 8001a90:	4a2a      	ldr	r2, [pc, #168]	; (8001b3c <encoder+0x1d0>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
				cnt[i]--;
 8001a9a:	4a29      	ldr	r2, [pc, #164]	; (8001b40 <encoder+0x1d4>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b299      	uxth	r1, r3
 8001aa6:	4a26      	ldr	r2, [pc, #152]	; (8001b40 <encoder+0x1d4>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001aae:	e035      	b.n	8001b1c <encoder+0x1b0>
			}
			else
			{
				dir[i] = 1;
 8001ab0:	4a22      	ldr	r2, [pc, #136]	; (8001b3c <encoder+0x1d0>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	701a      	strb	r2, [r3, #0]
				cnt[i]++;
 8001aba:	4a21      	ldr	r2, [pc, #132]	; (8001b40 <encoder+0x1d4>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	b299      	uxth	r1, r3
 8001ac6:	4a1e      	ldr	r2, [pc, #120]	; (8001b40 <encoder+0x1d4>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001ace:	e025      	b.n	8001b1c <encoder+0x1b0>
			}
		}
		else
		{
			if (nowA[i] == 0)
 8001ad0:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <encoder+0x1c4>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10f      	bne.n	8001afe <encoder+0x192>
			{
				dir[i] = 0;
 8001ade:	4a17      	ldr	r2, [pc, #92]	; (8001b3c <encoder+0x1d0>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]
				cnt[i]--;
 8001ae8:	4a15      	ldr	r2, [pc, #84]	; (8001b40 <encoder+0x1d4>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b299      	uxth	r1, r3
 8001af4:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <encoder+0x1d4>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001afc:	e00e      	b.n	8001b1c <encoder+0x1b0>
			}
			else
			{
				dir[i] = 1;
 8001afe:	4a0f      	ldr	r2, [pc, #60]	; (8001b3c <encoder+0x1d0>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4413      	add	r3, r2
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
				cnt[i]++;
 8001b08:	4a0d      	ldr	r2, [pc, #52]	; (8001b40 <encoder+0x1d4>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b10:	3301      	adds	r3, #1
 8001b12:	b299      	uxth	r1, r3
 8001b14:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <encoder+0x1d4>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
		}
	}
	return cnt[i];
 8001b1c:	4a08      	ldr	r2, [pc, #32]	; (8001b40 <encoder+0x1d4>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	200000a4 	.word	0x200000a4
 8001b34:	200000ac 	.word	0x200000ac
 8001b38:	200000a8 	.word	0x200000a8
 8001b3c:	200000b4 	.word	0x200000b4
 8001b40:	200000b8 	.word	0x200000b8
 8001b44:	200000b0 	.word	0x200000b0

08001b48 <Motors_RPS>:
float Motors_RPS(int j, float SampleTime, float N_round)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
	new_count[Motor1] = Enc_count[0];
 8001b54:	4b72      	ldr	r3, [pc, #456]	; (8001d20 <Motors_RPS+0x1d8>)
 8001b56:	881a      	ldrh	r2, [r3, #0]
 8001b58:	4b72      	ldr	r3, [pc, #456]	; (8001d24 <Motors_RPS+0x1dc>)
 8001b5a:	801a      	strh	r2, [r3, #0]
	new_count[Motor2] = Enc_count[1];
 8001b5c:	4b70      	ldr	r3, [pc, #448]	; (8001d20 <Motors_RPS+0x1d8>)
 8001b5e:	885a      	ldrh	r2, [r3, #2]
 8001b60:	4b70      	ldr	r3, [pc, #448]	; (8001d24 <Motors_RPS+0x1dc>)
 8001b62:	805a      	strh	r2, [r3, #2]

	count_state[Motor1] = !dir[0];
 8001b64:	4b70      	ldr	r3, [pc, #448]	; (8001d28 <Motors_RPS+0x1e0>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	bf0c      	ite	eq
 8001b6e:	2301      	moveq	r3, #1
 8001b70:	2300      	movne	r3, #0
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b6d      	ldr	r3, [pc, #436]	; (8001d2c <Motors_RPS+0x1e4>)
 8001b78:	701a      	strb	r2, [r3, #0]
	count_state[Motor2] = !dir[1];
 8001b7a:	4b6b      	ldr	r3, [pc, #428]	; (8001d28 <Motors_RPS+0x1e0>)
 8001b7c:	785b      	ldrb	r3, [r3, #1]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	bf0c      	ite	eq
 8001b84:	2301      	moveq	r3, #1
 8001b86:	2300      	movne	r3, #0
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4b67      	ldr	r3, [pc, #412]	; (8001d2c <Motors_RPS+0x1e4>)
 8001b8e:	705a      	strb	r2, [r3, #1]

	if (count_state[j])
 8001b90:	4a66      	ldr	r2, [pc, #408]	; (8001d2c <Motors_RPS+0x1e4>)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4413      	add	r3, r2
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d04f      	beq.n	8001c3c <Motors_RPS+0xf4>
	{
		if (new_count[j] <= count[j])
 8001b9c:	4a61      	ldr	r2, [pc, #388]	; (8001d24 <Motors_RPS+0x1dc>)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001ba4:	4962      	ldr	r1, [pc, #392]	; (8001d30 <Motors_RPS+0x1e8>)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d80e      	bhi.n	8001bce <Motors_RPS+0x86>
		{ // Check for counter underflow
			diff[j] = count[j] - new_count[j];
 8001bb0:	4a5f      	ldr	r2, [pc, #380]	; (8001d30 <Motors_RPS+0x1e8>)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001bb8:	495a      	ldr	r1, [pc, #360]	; (8001d24 <Motors_RPS+0x1dc>)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	b299      	uxth	r1, r3
 8001bc4:	4a5b      	ldr	r2, [pc, #364]	; (8001d34 <Motors_RPS+0x1ec>)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001bcc:	e00d      	b.n	8001bea <Motors_RPS+0xa2>
		}
		else
		{
			diff[j] = (65536 - new_count[j]) + count[j];
 8001bce:	4a58      	ldr	r2, [pc, #352]	; (8001d30 <Motors_RPS+0x1e8>)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001bd6:	4953      	ldr	r1, [pc, #332]	; (8001d24 <Motors_RPS+0x1dc>)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	b299      	uxth	r1, r3
 8001be2:	4a54      	ldr	r2, [pc, #336]	; (8001d34 <Motors_RPS+0x1ec>)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		speedM[j] = (float)diff[j] * 1000.0f / (N_round * SampleTime) * -1.0;
 8001bea:	4a52      	ldr	r2, [pc, #328]	; (8001d34 <Motors_RPS+0x1ec>)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe feb8 	bl	8000968 <__aeabi_ui2f>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	494f      	ldr	r1, [pc, #316]	; (8001d38 <Motors_RPS+0x1f0>)
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe ff0b 	bl	8000a18 <__aeabi_fmul>
 8001c02:	4603      	mov	r3, r0
 8001c04:	461c      	mov	r4, r3
 8001c06:	68b9      	ldr	r1, [r7, #8]
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7fe ff05 	bl	8000a18 <__aeabi_fmul>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4619      	mov	r1, r3
 8001c12:	4620      	mov	r0, r4
 8001c14:	f7fe ffb4 	bl	8000b80 <__aeabi_fdiv>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fd26 	bl	800066c <__aeabi_f2d>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	f7fe fd98 	bl	800075c <__aeabi_d2f>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001c32:	4942      	ldr	r1, [pc, #264]	; (8001d3c <Motors_RPS+0x1f4>)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001c3a:	e043      	b.n	8001cc4 <Motors_RPS+0x17c>
	}
	else
	{
		if (new_count[j] >= count[j])
 8001c3c:	4a39      	ldr	r2, [pc, #228]	; (8001d24 <Motors_RPS+0x1dc>)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001c44:	493a      	ldr	r1, [pc, #232]	; (8001d30 <Motors_RPS+0x1e8>)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d30e      	bcc.n	8001c6e <Motors_RPS+0x126>
		{ // Check for counter overflow
			diff[j] = new_count[j] - count[j];
 8001c50:	4a34      	ldr	r2, [pc, #208]	; (8001d24 <Motors_RPS+0x1dc>)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001c58:	4935      	ldr	r1, [pc, #212]	; (8001d30 <Motors_RPS+0x1e8>)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	b299      	uxth	r1, r3
 8001c64:	4a33      	ldr	r2, [pc, #204]	; (8001d34 <Motors_RPS+0x1ec>)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001c6c:	e00d      	b.n	8001c8a <Motors_RPS+0x142>
		}
		else
		{
			diff[j] = (65536 - count[j]) + new_count[j];
 8001c6e:	4a2d      	ldr	r2, [pc, #180]	; (8001d24 <Motors_RPS+0x1dc>)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001c76:	492e      	ldr	r1, [pc, #184]	; (8001d30 <Motors_RPS+0x1e8>)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	b299      	uxth	r1, r3
 8001c82:	4a2c      	ldr	r2, [pc, #176]	; (8001d34 <Motors_RPS+0x1ec>)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		speedM[j] = (float)diff[j] * 1000.0f / (N_round * SampleTime);
 8001c8a:	4a2a      	ldr	r2, [pc, #168]	; (8001d34 <Motors_RPS+0x1ec>)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fe68 	bl	8000968 <__aeabi_ui2f>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4927      	ldr	r1, [pc, #156]	; (8001d38 <Motors_RPS+0x1f0>)
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe febb 	bl	8000a18 <__aeabi_fmul>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461c      	mov	r4, r3
 8001ca6:	68b9      	ldr	r1, [r7, #8]
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7fe feb5 	bl	8000a18 <__aeabi_fmul>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	f7fe ff64 	bl	8000b80 <__aeabi_fdiv>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4a1f      	ldr	r2, [pc, #124]	; (8001d3c <Motors_RPS+0x1f4>)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

	rdps[j] = -2.0f * pi * speedM[j];
 8001cc4:	4a1d      	ldr	r2, [pc, #116]	; (8001d3c <Motors_RPS+0x1f4>)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fccd 	bl	800066c <__aeabi_f2d>
 8001cd2:	a311      	add	r3, pc, #68	; (adr r3, 8001d18 <Motors_RPS+0x1d0>)
 8001cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd8:	f7fe fa3a 	bl	8000150 <__aeabi_dmul>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f7fe fd3a 	bl	800075c <__aeabi_d2f>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	4915      	ldr	r1, [pc, #84]	; (8001d40 <Motors_RPS+0x1f8>)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	count[j] = new_count[j];
 8001cf2:	4a0c      	ldr	r2, [pc, #48]	; (8001d24 <Motors_RPS+0x1dc>)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001cfa:	4a0d      	ldr	r2, [pc, #52]	; (8001d30 <Motors_RPS+0x1e8>)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return rdps[j];
 8001d02:	4a0f      	ldr	r2, [pc, #60]	; (8001d40 <Motors_RPS+0x1f8>)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd90      	pop	{r4, r7, pc}
 8001d12:	bf00      	nop
 8001d14:	f3af 8000 	nop.w
 8001d18:	c083126f 	.word	0xc083126f
 8001d1c:	c01921ca 	.word	0xc01921ca
 8001d20:	200000bc 	.word	0x200000bc
 8001d24:	200000c4 	.word	0x200000c4
 8001d28:	200000b4 	.word	0x200000b4
 8001d2c:	200000c8 	.word	0x200000c8
 8001d30:	200000c0 	.word	0x200000c0
 8001d34:	200000cc 	.word	0x200000cc
 8001d38:	447a0000 	.word	0x447a0000
 8001d3c:	200000d0 	.word	0x200000d0
 8001d40:	200000d8 	.word	0x200000d8

08001d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d48:	f000 feec 	bl	8002b24 <HAL_Init>

  /* USER CODE BEGIN Init */
	PID_Init(&MPID, 2);
 8001d4c:	2102      	movs	r1, #2
 8001d4e:	484d      	ldr	r0, [pc, #308]	; (8001e84 <main+0x140>)
 8001d50:	f7ff f848 	bl	8000de4 <PID_Init>
	MPID.T = 0.01; // T = 20ms
 8001d54:	4b4b      	ldr	r3, [pc, #300]	; (8001e84 <main+0x140>)
 8001d56:	4a4c      	ldr	r2, [pc, #304]	; (8001e88 <main+0x144>)
 8001d58:	615a      	str	r2, [r3, #20]
	MPID.limMax = 1000;
 8001d5a:	4b4a      	ldr	r3, [pc, #296]	; (8001e84 <main+0x140>)
 8001d5c:	4a4b      	ldr	r2, [pc, #300]	; (8001e8c <main+0x148>)
 8001d5e:	609a      	str	r2, [r3, #8]
	MPID.limMin = -10;
 8001d60:	4b48      	ldr	r3, [pc, #288]	; (8001e84 <main+0x140>)
 8001d62:	4a4b      	ldr	r2, [pc, #300]	; (8001e90 <main+0x14c>)
 8001d64:	605a      	str	r2, [r3, #4]
	MPID.limMaxInt = 1000;
 8001d66:	4b47      	ldr	r3, [pc, #284]	; (8001e84 <main+0x140>)
 8001d68:	4a48      	ldr	r2, [pc, #288]	; (8001e8c <main+0x148>)
 8001d6a:	611a      	str	r2, [r3, #16]
	MPID.limMinInt = -10;
 8001d6c:	4b45      	ldr	r3, [pc, #276]	; (8001e84 <main+0x140>)
 8001d6e:	4a48      	ldr	r2, [pc, #288]	; (8001e90 <main+0x14c>)
 8001d70:	60da      	str	r2, [r3, #12]
	MPID.tau = 0; // for Kd
 8001d72:	4b44      	ldr	r3, [pc, #272]	; (8001e84 <main+0x140>)
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d7a:	f000 f8a7 	bl	8001ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d7e:	f7ff fa3d 	bl	80011fc <MX_GPIO_Init>
  MX_TIM2_Init();
 8001d82:	f000 fc61 	bl	8002648 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001d86:	f000 fd25 	bl	80027d4 <MX_TIM4_Init>
  MX_CAN_Init();
 8001d8a:	f7ff f991 	bl	80010b0 <MX_CAN_Init>
  MX_TIM3_Init();
 8001d8e:	f000 fca9 	bl	80026e4 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001d92:	f000 fbad 	bl	80024f0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);						// TIMER INTERUPT
 8001d96:	483f      	ldr	r0, [pc, #252]	; (8001e94 <main+0x150>)
 8001d98:	f002 fbd6 	bl	8004548 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);				// M1
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	483e      	ldr	r0, [pc, #248]	; (8001e98 <main+0x154>)
 8001da0:	f002 fc7c 	bl	800469c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);				// M2
 8001da4:	2104      	movs	r1, #4
 8001da6:	483c      	ldr	r0, [pc, #240]	; (8001e98 <main+0x154>)
 8001da8:	f002 fc78 	bl	800469c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);				// M1
 8001dac:	2108      	movs	r1, #8
 8001dae:	483a      	ldr	r0, [pc, #232]	; (8001e98 <main+0x154>)
 8001db0:	f002 fc74 	bl	800469c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);				// M2
 8001db4:	210c      	movs	r1, #12
 8001db6:	4838      	ldr	r0, [pc, #224]	; (8001e98 <main+0x154>)
 8001db8:	f002 fc70 	bl	800469c <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);				// servo
 8001dbc:	2104      	movs	r1, #4
 8001dbe:	4837      	ldr	r0, [pc, #220]	; (8001e9c <main+0x158>)
 8001dc0:	f002 fc6c 	bl	800469c <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);				// M1
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4836      	ldr	r0, [pc, #216]	; (8001ea0 <main+0x15c>)
 8001dc8:	f002 fc68 	bl	800469c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);				// M2
 8001dcc:	2104      	movs	r1, #4
 8001dce:	4834      	ldr	r0, [pc, #208]	; (8001ea0 <main+0x15c>)
 8001dd0:	f002 fc64 	bl	800469c <HAL_TIM_PWM_Start>
	HAL_CAN_Start(&hcan);
 8001dd4:	4833      	ldr	r0, [pc, #204]	; (8001ea4 <main+0x160>)
 8001dd6:	f001 f8ef 	bl	8002fb8 <HAL_CAN_Start>

	// Activate the notification
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8001dda:	2110      	movs	r1, #16
 8001ddc:	4831      	ldr	r0, [pc, #196]	; (8001ea4 <main+0x160>)
 8001dde:	f001 fa40 	bl	8003262 <HAL_CAN_ActivateNotification>

	servo_rotation(160);
 8001de2:	20a0      	movs	r0, #160	; 0xa0
 8001de4:	f7ff fae0 	bl	80013a8 <servo_rotation>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GetTick() < 2000){
 8001de8:	f000 fef4 	bl	8002bd4 <HAL_GetTick>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001df2:	d206      	bcs.n	8001e02 <main+0xbe>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8001df4:	2104      	movs	r1, #4
 8001df6:	482c      	ldr	r0, [pc, #176]	; (8001ea8 <main+0x164>)
 8001df8:	f001 ff3d 	bl	8003c76 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8001dfc:	2064      	movs	r0, #100	; 0x64
 8001dfe:	f000 fef3 	bl	8002be8 <HAL_Delay>
	  }

	  if (prepare == 1){
 8001e02:	4b2a      	ldr	r3, [pc, #168]	; (8001eac <main+0x168>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d104      	bne.n	8001e14 <main+0xd0>
		  prepare = 0;
 8001e0a:	4b28      	ldr	r3, [pc, #160]	; (8001eac <main+0x168>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
		  prepare_function();
 8001e10:	f7ff fc56 	bl	80016c0 <prepare_function>
	  }
	  if(start == 1){
 8001e14:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <main+0x16c>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d104      	bne.n	8001e26 <main+0xe2>
		  start = 0;
 8001e1c:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <main+0x16c>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]
		  start_fucntion();
 8001e22:	f7ff fd1f 	bl	8001864 <start_fucntion>
	  }
	  if(reload == 1){
 8001e26:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <main+0x170>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d104      	bne.n	8001e38 <main+0xf4>
		  reload = 0;
 8001e2e:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <main+0x170>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
		  reload_function();
 8001e34:	f7ff fc6e 	bl	8001714 <reload_function>
	  }
	  if(shoot == 1 && speed > 0){
 8001e38:	4b1f      	ldr	r3, [pc, #124]	; (8001eb8 <main+0x174>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d111      	bne.n	8001e64 <main+0x120>
 8001e40:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <main+0x178>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f04f 0100 	mov.w	r1, #0
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe ffa1 	bl	8000d90 <__aeabi_fcmpgt>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d007      	beq.n	8001e64 <main+0x120>
		  shoot = 0;
 8001e54:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <main+0x174>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
		  shoot_function(speed);
 8001e5a:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <main+0x178>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fd42 	bl	80018e8 <shoot_function>
	  }

	  if(break_loop == 1 &&(right_feedback == 1 && left_feedback == 1)){
 8001e64:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <main+0x17c>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d1bd      	bne.n	8001de8 <main+0xa4>
 8001e6c:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <main+0x180>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d1b9      	bne.n	8001de8 <main+0xa4>
 8001e74:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <main+0x184>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d1b5      	bne.n	8001de8 <main+0xa4>
		  break_loop = 0;
 8001e7c:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <main+0x17c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
	  if(HAL_GetTick() < 2000){
 8001e82:	e7b1      	b.n	8001de8 <main+0xa4>
 8001e84:	20000064 	.word	0x20000064
 8001e88:	3c23d70a 	.word	0x3c23d70a
 8001e8c:	447a0000 	.word	0x447a0000
 8001e90:	c1200000 	.word	0xc1200000
 8001e94:	2000017c 	.word	0x2000017c
 8001e98:	2000020c 	.word	0x2000020c
 8001e9c:	200001c4 	.word	0x200001c4
 8001ea0:	20000134 	.word	0x20000134
 8001ea4:	20000030 	.word	0x20000030
 8001ea8:	40010800 	.word	0x40010800
 8001eac:	20000106 	.word	0x20000106
 8001eb0:	20000105 	.word	0x20000105
 8001eb4:	20000107 	.word	0x20000107
 8001eb8:	20000108 	.word	0x20000108
 8001ebc:	2000005c 	.word	0x2000005c
 8001ec0:	20000131 	.word	0x20000131
 8001ec4:	20000002 	.word	0x20000002
 8001ec8:	20000004 	.word	0x20000004

08001ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b090      	sub	sp, #64	; 0x40
 8001ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed2:	f107 0318 	add.w	r3, r7, #24
 8001ed6:	2228      	movs	r2, #40	; 0x28
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f003 fab8 	bl	8005450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ef2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ef6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001efc:	2301      	movs	r3, #1
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f00:	2302      	movs	r3, #2
 8001f02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f0a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f10:	f107 0318 	add.w	r3, r7, #24
 8001f14:	4618      	mov	r0, r3
 8001f16:	f001 fedf 	bl	8003cd8 <HAL_RCC_OscConfig>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001f20:	f000 fa54 	bl	80023cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f24:	230f      	movs	r3, #15
 8001f26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	2102      	movs	r1, #2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f002 f94c 	bl	80041dc <HAL_RCC_ClockConfig>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001f4a:	f000 fa3f 	bl	80023cc <Error_Handler>
  }
}
 8001f4e:	bf00      	nop
 8001f50:	3740      	adds	r7, #64	; 0x40
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == En1_C1_Pin || En1_C2_Pin)
	{ // ENCODER Motor 1
		nowA[0] = HAL_GPIO_ReadPin(En1_C1_GPIO_Port, En1_C1_Pin);
 8001f62:	2108      	movs	r1, #8
 8001f64:	4818      	ldr	r0, [pc, #96]	; (8001fc8 <HAL_GPIO_EXTI_Callback+0x70>)
 8001f66:	f001 fe57 	bl	8003c18 <HAL_GPIO_ReadPin>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <HAL_GPIO_EXTI_Callback+0x74>)
 8001f70:	701a      	strb	r2, [r3, #0]
		nowB[0] = HAL_GPIO_ReadPin(En1_C2_GPIO_Port, En1_C2_Pin);
 8001f72:	2110      	movs	r1, #16
 8001f74:	4814      	ldr	r0, [pc, #80]	; (8001fc8 <HAL_GPIO_EXTI_Callback+0x70>)
 8001f76:	f001 fe4f 	bl	8003c18 <HAL_GPIO_ReadPin>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <HAL_GPIO_EXTI_Callback+0x78>)
 8001f80:	701a      	strb	r2, [r3, #0]
		Enc_count[0] = encoder(0);
 8001f82:	2000      	movs	r0, #0
 8001f84:	f7ff fcf2 	bl	800196c <encoder>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001f8e:	801a      	strh	r2, [r3, #0]
	}
	if (GPIO_Pin == En2_C1_Pin || En2_C2_Pin)
	{ // ENCODER Motor 1
		nowA[1] = HAL_GPIO_ReadPin(En2_C1_GPIO_Port, En2_C1_Pin);
 8001f90:	2120      	movs	r1, #32
 8001f92:	480d      	ldr	r0, [pc, #52]	; (8001fc8 <HAL_GPIO_EXTI_Callback+0x70>)
 8001f94:	f001 fe40 	bl	8003c18 <HAL_GPIO_ReadPin>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_GPIO_EXTI_Callback+0x74>)
 8001f9e:	705a      	strb	r2, [r3, #1]
		nowB[1] = HAL_GPIO_ReadPin(En2_C2_GPIO_Port, En2_C2_Pin);
 8001fa0:	2140      	movs	r1, #64	; 0x40
 8001fa2:	4809      	ldr	r0, [pc, #36]	; (8001fc8 <HAL_GPIO_EXTI_Callback+0x70>)
 8001fa4:	f001 fe38 	bl	8003c18 <HAL_GPIO_ReadPin>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	461a      	mov	r2, r3
 8001fac:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <HAL_GPIO_EXTI_Callback+0x78>)
 8001fae:	705a      	strb	r2, [r3, #1]
		Enc_count[1] = encoder(1);
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	f7ff fcdb 	bl	800196c <encoder>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001fbc:	805a      	strh	r2, [r3, #2]
	}
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40010800 	.word	0x40010800
 8001fcc:	200000a4 	.word	0x200000a4
 8001fd0:	200000a8 	.word	0x200000a8
 8001fd4:	200000bc 	.word	0x200000bc

08001fd8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af04      	add	r7, sp, #16
 8001fde:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe8:	f040 81ca 	bne.w	8002380 <HAL_TIM_PeriodElapsedCallback+0x3a8>
		// PID // need to change for using
		M_shooter1 = PID(&MPID, speed, Motor1_speed, MKp, MKi, MKd, Motor1);
 8001fec:	4ba2      	ldr	r3, [pc, #648]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001fee:	6819      	ldr	r1, [r3, #0]
 8001ff0:	4ba2      	ldr	r3, [pc, #648]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9302      	str	r3, [sp, #8]
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	9301      	str	r3, [sp, #4]
 8001ffe:	4ba0      	ldr	r3, [pc, #640]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	4ba0      	ldr	r3, [pc, #640]	; (8002284 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002004:	48a0      	ldr	r0, [pc, #640]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002006:	f7fe ff25 	bl	8000e54 <PID>
 800200a:	4603      	mov	r3, r0
 800200c:	4a9f      	ldr	r2, [pc, #636]	; (800228c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800200e:	6013      	str	r3, [r2, #0]
		M_shooter2 = PID(&MPID, speed, Motor2_speed, MKp, MKi, MKd, Motor2);
 8002010:	4b99      	ldr	r3, [pc, #612]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002012:	6819      	ldr	r1, [r3, #0]
 8002014:	4b9e      	ldr	r3, [pc, #632]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	2301      	movs	r3, #1
 800201a:	9302      	str	r3, [sp, #8]
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	4b97      	ldr	r3, [pc, #604]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	4b97      	ldr	r3, [pc, #604]	; (8002284 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002028:	4897      	ldr	r0, [pc, #604]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800202a:	f7fe ff13 	bl	8000e54 <PID>
 800202e:	4603      	mov	r3, r0
 8002030:	4a98      	ldr	r2, [pc, #608]	; (8002294 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002032:	6013      	str	r3, [r2, #0]
		// feedback speed
		Motor1_speed = (float)fabs(Motors_RPS(Motor1, Sample_time, CPR));
 8002034:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 8002038:	4997      	ldr	r1, [pc, #604]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800203a:	2000      	movs	r0, #0
 800203c:	f7ff fd84 	bl	8001b48 <Motors_RPS>
 8002040:	4603      	mov	r3, r0
 8002042:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002046:	4a8d      	ldr	r2, [pc, #564]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002048:	6013      	str	r3, [r2, #0]
		Motor2_speed = (float)fabs(Motors_RPS(Motor2, Sample_time, CPR));
 800204a:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 800204e:	4992      	ldr	r1, [pc, #584]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002050:	2001      	movs	r0, #1
 8002052:	f7ff fd79 	bl	8001b48 <Motors_RPS>
 8002056:	4603      	mov	r3, r0
 8002058:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800205c:	4a8c      	ldr	r2, [pc, #560]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800205e:	6013      	str	r3, [r2, #0]

		// dir
			// need to config
		HAL_GPIO_WritePin(Sh_M1_dir_GPIO_Port, Sh_M1_dir_Pin, 0);
 8002060:	2200      	movs	r2, #0
 8002062:	2108      	movs	r1, #8
 8002064:	488d      	ldr	r0, [pc, #564]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002066:	f001 fdee 	bl	8003c46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Sh_M2_dir_GPIO_Port, Sh_M2_dir_Pin, 0);
 800206a:	2200      	movs	r2, #0
 800206c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002070:	488b      	ldr	r0, [pc, #556]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002072:	f001 fde8 	bl	8003c46 <HAL_GPIO_WritePin>

		// pwm
		if (M_shooter1 > 20)	// M1
 8002076:	4b85      	ldr	r3, [pc, #532]	; (800228c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	498a      	ldr	r1, [pc, #552]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fe87 	bl	8000d90 <__aeabi_fcmpgt>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d008      	beq.n	800209a <HAL_TIM_PeriodElapsedCallback+0xc2>
		{
			TIM1->CCR2 = M_shooter1;
 8002088:	4b80      	ldr	r3, [pc, #512]	; (800228c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4c86      	ldr	r4, [pc, #536]	; (80022a8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe fe88 	bl	8000da4 <__aeabi_f2uiz>
 8002094:	4603      	mov	r3, r0
 8002096:	63a3      	str	r3, [r4, #56]	; 0x38
 8002098:	e002      	b.n	80020a0 <HAL_TIM_PeriodElapsedCallback+0xc8>
		}
		else
		{
			TIM1->CCR2 = 0;
 800209a:	4b83      	ldr	r3, [pc, #524]	; (80022a8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800209c:	2200      	movs	r2, #0
 800209e:	639a      	str	r2, [r3, #56]	; 0x38
		}
		if (M_shooter2 > 20)	// M2
 80020a0:	4b7c      	ldr	r3, [pc, #496]	; (8002294 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	497f      	ldr	r1, [pc, #508]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fe72 	bl	8000d90 <__aeabi_fcmpgt>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d008      	beq.n	80020c4 <HAL_TIM_PeriodElapsedCallback+0xec>
		{
			TIM1->CCR1 = M_shooter2;
 80020b2:	4b78      	ldr	r3, [pc, #480]	; (8002294 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4c7c      	ldr	r4, [pc, #496]	; (80022a8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fe73 	bl	8000da4 <__aeabi_f2uiz>
 80020be:	4603      	mov	r3, r0
 80020c0:	6363      	str	r3, [r4, #52]	; 0x34
 80020c2:	e002      	b.n	80020ca <HAL_TIM_PeriodElapsedCallback+0xf2>
		}
		else
		{
			TIM1->CCR1 = 0;
 80020c4:	4b78      	ldr	r3, [pc, #480]	; (80022a8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	635a      	str	r2, [r3, #52]	; 0x34
		}

//
		if (pwm_M1 > 10){
 80020ca:	4b78      	ldr	r3, [pc, #480]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4972      	ldr	r1, [pc, #456]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fe5d 	bl	8000d90 <__aeabi_fcmpgt>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00d      	beq.n	80020f8 <HAL_TIM_PeriodElapsedCallback+0x120>
			HAL_GPIO_WritePin(M1_dir_GPIO_Port, M1_dir_Pin, 0);
 80020dc:	2200      	movs	r2, #0
 80020de:	2101      	movs	r1, #1
 80020e0:	486f      	ldr	r0, [pc, #444]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80020e2:	f001 fdb0 	bl	8003c46 <HAL_GPIO_WritePin>
			TIM4->CCR2 = pwm_M1;
 80020e6:	4b71      	ldr	r3, [pc, #452]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4c71      	ldr	r4, [pc, #452]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fe59 	bl	8000da4 <__aeabi_f2uiz>
 80020f2:	4603      	mov	r3, r0
 80020f4:	63a3      	str	r3, [r4, #56]	; 0x38
 80020f6:	e020      	b.n	800213a <HAL_TIM_PeriodElapsedCallback+0x162>
		}
		else if (pwm_M1 < -10){
 80020f8:	4b6c      	ldr	r3, [pc, #432]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	496d      	ldr	r1, [pc, #436]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe fe28 	bl	8000d54 <__aeabi_fcmplt>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00f      	beq.n	800212a <HAL_TIM_PeriodElapsedCallback+0x152>
			HAL_GPIO_WritePin(M1_dir_GPIO_Port, M1_dir_Pin, 1);
 800210a:	2201      	movs	r2, #1
 800210c:	2101      	movs	r1, #1
 800210e:	4864      	ldr	r0, [pc, #400]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002110:	f001 fd99 	bl	8003c46 <HAL_GPIO_WritePin>
			TIM4->CCR2 = -1 * pwm_M1;
 8002114:	4b65      	ldr	r3, [pc, #404]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800211c:	4c64      	ldr	r4, [pc, #400]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fe40 	bl	8000da4 <__aeabi_f2uiz>
 8002124:	4603      	mov	r3, r0
 8002126:	63a3      	str	r3, [r4, #56]	; 0x38
 8002128:	e007      	b.n	800213a <HAL_TIM_PeriodElapsedCallback+0x162>
		}
		else{
			HAL_GPIO_WritePin(M1_dir_GPIO_Port, M1_dir_Pin, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2101      	movs	r1, #1
 800212e:	485c      	ldr	r0, [pc, #368]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002130:	f001 fd89 	bl	8003c46 <HAL_GPIO_WritePin>
			TIM4->CCR2 = 0;
 8002134:	4b5e      	ldr	r3, [pc, #376]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002136:	2200      	movs	r2, #0
 8002138:	639a      	str	r2, [r3, #56]	; 0x38
		}
		if (pwm_M2 > 10){
 800213a:	4b5f      	ldr	r3, [pc, #380]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4956      	ldr	r1, [pc, #344]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe fe25 	bl	8000d90 <__aeabi_fcmpgt>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00e      	beq.n	800216a <HAL_TIM_PeriodElapsedCallback+0x192>
			HAL_GPIO_WritePin(M2_dir_GPIO_Port, M2_dir_Pin, 1);
 800214c:	2201      	movs	r2, #1
 800214e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002152:	485a      	ldr	r0, [pc, #360]	; (80022bc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002154:	f001 fd77 	bl	8003c46 <HAL_GPIO_WritePin>
			TIM4->CCR1 = pwm_M2;
 8002158:	4b57      	ldr	r3, [pc, #348]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4c54      	ldr	r4, [pc, #336]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe fe20 	bl	8000da4 <__aeabi_f2uiz>
 8002164:	4603      	mov	r3, r0
 8002166:	6363      	str	r3, [r4, #52]	; 0x34
 8002168:	e022      	b.n	80021b0 <HAL_TIM_PeriodElapsedCallback+0x1d8>
		}
		else if (pwm_M2 < -10){
 800216a:	4b53      	ldr	r3, [pc, #332]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4951      	ldr	r1, [pc, #324]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe fdef 	bl	8000d54 <__aeabi_fcmplt>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d010      	beq.n	800219e <HAL_TIM_PeriodElapsedCallback+0x1c6>
			HAL_GPIO_WritePin(M2_dir_GPIO_Port, M2_dir_Pin, 0);
 800217c:	2200      	movs	r2, #0
 800217e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002182:	484e      	ldr	r0, [pc, #312]	; (80022bc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002184:	f001 fd5f 	bl	8003c46 <HAL_GPIO_WritePin>
			TIM4->CCR1 = -1 * pwm_M2;
 8002188:	4b4b      	ldr	r3, [pc, #300]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002190:	4c47      	ldr	r4, [pc, #284]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe fe06 	bl	8000da4 <__aeabi_f2uiz>
 8002198:	4603      	mov	r3, r0
 800219a:	6363      	str	r3, [r4, #52]	; 0x34
 800219c:	e008      	b.n	80021b0 <HAL_TIM_PeriodElapsedCallback+0x1d8>
		}
		else{
			HAL_GPIO_WritePin(M2_dir_GPIO_Port, M2_dir_Pin, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021a4:	4845      	ldr	r0, [pc, #276]	; (80022bc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80021a6:	f001 fd4e 	bl	8003c46 <HAL_GPIO_WritePin>
			TIM4->CCR1 = 0;
 80021aa:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	635a      	str	r2, [r3, #52]	; 0x34
		}


		// reload
		reload_error = reload_control - reload_feedback;
 80021b0:	4b43      	ldr	r3, [pc, #268]	; (80022c0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80021b2:	781a      	ldrb	r2, [r3, #0]
 80021b4:	4b43      	ldr	r3, [pc, #268]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	b25a      	sxtb	r2, r3
 80021be:	4b42      	ldr	r3, [pc, #264]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80021c0:	701a      	strb	r2, [r3, #0]
		shoot_error = shoot_control - shoot_feedback;
 80021c2:	4b42      	ldr	r3, [pc, #264]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80021c4:	781a      	ldrb	r2, [r3, #0]
 80021c6:	4b42      	ldr	r3, [pc, #264]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	b25a      	sxtb	r2, r3
 80021d0:	4b40      	ldr	r3, [pc, #256]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80021d2:	701a      	strb	r2, [r3, #0]

		if(shoot_state == 1){		// load for shoot // M3
 80021d4:	4b40      	ldr	r3, [pc, #256]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d103      	bne.n	80021e4 <HAL_TIM_PeriodElapsedCallback+0x20c>
			shoot_control = 1;
 80021dc:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
 80021e2:	e002      	b.n	80021ea <HAL_TIM_PeriodElapsedCallback+0x212>
		}
		else {
			shoot_control = 0;
 80021e4:	4b39      	ldr	r3, [pc, #228]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
		}

		if (shoot_error > 0){
 80021ea:	4b3a      	ldr	r3, [pc, #232]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80021ec:	f993 3000 	ldrsb.w	r3, [r3]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	dd0a      	ble.n	800220a <HAL_TIM_PeriodElapsedCallback+0x232>
			HAL_GPIO_WritePin(M3_dir_GPIO_Port, M3_dir_Pin, 1);
 80021f4:	2201      	movs	r2, #1
 80021f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021fa:	4830      	ldr	r0, [pc, #192]	; (80022bc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80021fc:	f001 fd23 	bl	8003c46 <HAL_GPIO_WritePin>
			TIM4->CCR3 = 600;
 8002200:	4b2b      	ldr	r3, [pc, #172]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002202:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002206:	63da      	str	r2, [r3, #60]	; 0x3c
 8002208:	e018      	b.n	800223c <HAL_TIM_PeriodElapsedCallback+0x264>
		}
		else if(shoot_error < 0){
 800220a:	4b32      	ldr	r3, [pc, #200]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800220c:	f993 3000 	ldrsb.w	r3, [r3]
 8002210:	2b00      	cmp	r3, #0
 8002212:	da0a      	bge.n	800222a <HAL_TIM_PeriodElapsedCallback+0x252>
			HAL_GPIO_WritePin(M3_dir_GPIO_Port, M3_dir_Pin, 0);
 8002214:	2200      	movs	r2, #0
 8002216:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800221a:	4828      	ldr	r0, [pc, #160]	; (80022bc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800221c:	f001 fd13 	bl	8003c46 <HAL_GPIO_WritePin>
			TIM4->CCR3 = 600;
 8002220:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002222:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002226:	63da      	str	r2, [r3, #60]	; 0x3c
 8002228:	e008      	b.n	800223c <HAL_TIM_PeriodElapsedCallback+0x264>
		}
		else {
			HAL_GPIO_WritePin(M3_dir_GPIO_Port, M3_dir_Pin, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002230:	4822      	ldr	r0, [pc, #136]	; (80022bc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002232:	f001 fd08 	bl	8003c46 <HAL_GPIO_WritePin>
			TIM4->CCR3 = 0;
 8002236:	4b1e      	ldr	r3, [pc, #120]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002238:	2200      	movs	r2, #0
 800223a:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		if(reload_error > 0){	// M4
 800223c:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800223e:	f993 3000 	ldrsb.w	r3, [r3]
 8002242:	2b00      	cmp	r3, #0
 8002244:	dd09      	ble.n	800225a <HAL_TIM_PeriodElapsedCallback+0x282>

			HAL_GPIO_WritePin(M4_dir_GPIO_Port, M4_dir_Pin, 0);		// CW
 8002246:	2200      	movs	r2, #0
 8002248:	2102      	movs	r1, #2
 800224a:	4815      	ldr	r0, [pc, #84]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800224c:	f001 fcfb 	bl	8003c46 <HAL_GPIO_WritePin>
			TIM4->CCR4 = 1000;
 8002250:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002252:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002256:	641a      	str	r2, [r3, #64]	; 0x40
 8002258:	e048      	b.n	80022ec <HAL_TIM_PeriodElapsedCallback+0x314>
		}
		else if(reload_error < 0){
 800225a:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800225c:	f993 3000 	ldrsb.w	r3, [r3]
 8002260:	2b00      	cmp	r3, #0
 8002262:	da3b      	bge.n	80022dc <HAL_TIM_PeriodElapsedCallback+0x304>

			HAL_GPIO_WritePin(M4_dir_GPIO_Port, M4_dir_Pin, 1);		// CCW
 8002264:	2201      	movs	r2, #1
 8002266:	2102      	movs	r1, #2
 8002268:	480d      	ldr	r0, [pc, #52]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800226a:	f001 fcec 	bl	8003c46 <HAL_GPIO_WritePin>
			TIM4->CCR4 = 800;
 800226e:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002270:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002274:	641a      	str	r2, [r3, #64]	; 0x40
 8002276:	e039      	b.n	80022ec <HAL_TIM_PeriodElapsedCallback+0x314>
 8002278:	2000005c 	.word	0x2000005c
 800227c:	200000e0 	.word	0x200000e0
 8002280:	41ccb852 	.word	0x41ccb852
 8002284:	3f91eb85 	.word	0x3f91eb85
 8002288:	20000064 	.word	0x20000064
 800228c:	200000f0 	.word	0x200000f0
 8002290:	200000e4 	.word	0x200000e4
 8002294:	200000f4 	.word	0x200000f4
 8002298:	41200000 	.word	0x41200000
 800229c:	40010c00 	.word	0x40010c00
 80022a0:	40010800 	.word	0x40010800
 80022a4:	41a00000 	.word	0x41a00000
 80022a8:	40012c00 	.word	0x40012c00
 80022ac:	200000e8 	.word	0x200000e8
 80022b0:	40000800 	.word	0x40000800
 80022b4:	c1200000 	.word	0xc1200000
 80022b8:	200000ec 	.word	0x200000ec
 80022bc:	40011000 	.word	0x40011000
 80022c0:	200000f9 	.word	0x200000f9
 80022c4:	200000f8 	.word	0x200000f8
 80022c8:	200000fa 	.word	0x200000fa
 80022cc:	200000fe 	.word	0x200000fe
 80022d0:	200000fd 	.word	0x200000fd
 80022d4:	200000ff 	.word	0x200000ff
 80022d8:	20000060 	.word	0x20000060
		}
		else {
			HAL_GPIO_WritePin(M4_dir_GPIO_Port, M4_dir_Pin, 0);
 80022dc:	2200      	movs	r2, #0
 80022de:	2102      	movs	r1, #2
 80022e0:	4829      	ldr	r0, [pc, #164]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80022e2:	f001 fcb0 	bl	8003c46 <HAL_GPIO_WritePin>
			TIM4->CCR4 = 0;
 80022e6:	4b29      	ldr	r3, [pc, #164]	; (800238c <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	641a      	str	r2, [r3, #64]	; 0x40
		}


		//////////////////////////////////////////////////

		if(right_error > 0){	// M1
 80022ec:	4b28      	ldr	r3, [pc, #160]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80022ee:	f993 3000 	ldrsb.w	r3, [r3]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	dd03      	ble.n	80022fe <HAL_TIM_PeriodElapsedCallback+0x326>
			pwm_M1 = -520;
 80022f6:	4b27      	ldr	r3, [pc, #156]	; (8002394 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80022f8:	4a27      	ldr	r2, [pc, #156]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	e00c      	b.n	8002318 <HAL_TIM_PeriodElapsedCallback+0x340>
		}
		else if(right_error < 0){
 80022fe:	4b24      	ldr	r3, [pc, #144]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8002300:	f993 3000 	ldrsb.w	r3, [r3]
 8002304:	2b00      	cmp	r3, #0
 8002306:	da03      	bge.n	8002310 <HAL_TIM_PeriodElapsedCallback+0x338>
			pwm_M1 = 520;
 8002308:	4b22      	ldr	r3, [pc, #136]	; (8002394 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 800230a:	4a24      	ldr	r2, [pc, #144]	; (800239c <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	e003      	b.n	8002318 <HAL_TIM_PeriodElapsedCallback+0x340>
		}
		else {
			pwm_M1 = 0;
 8002310:	4b20      	ldr	r3, [pc, #128]	; (8002394 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
		}

		if(left_error > 0){	// M2
 8002318:	4b21      	ldr	r3, [pc, #132]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 800231a:	f993 3000 	ldrsb.w	r3, [r3]
 800231e:	2b00      	cmp	r3, #0
 8002320:	dd03      	ble.n	800232a <HAL_TIM_PeriodElapsedCallback+0x352>
			pwm_M2 = -450;
 8002322:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8002324:	4a20      	ldr	r2, [pc, #128]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	e00c      	b.n	8002344 <HAL_TIM_PeriodElapsedCallback+0x36c>
		}
		else if(left_error < 0){
 800232a:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 800232c:	f993 3000 	ldrsb.w	r3, [r3]
 8002330:	2b00      	cmp	r3, #0
 8002332:	da03      	bge.n	800233c <HAL_TIM_PeriodElapsedCallback+0x364>
			pwm_M2 = 450;
 8002334:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8002336:	4a1d      	ldr	r2, [pc, #116]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	e003      	b.n	8002344 <HAL_TIM_PeriodElapsedCallback+0x36c>
		}
		else {
			pwm_M2 = 0;
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
		}
		
		right_error = right_control - right_feedback;
 8002344:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8002346:	781a      	ldrb	r2, [r3, #0]
 8002348:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	b25a      	sxtb	r2, r3
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8002354:	701a      	strb	r2, [r3, #0]
		left_error = left_control - left_feedback;
 8002356:	4b18      	ldr	r3, [pc, #96]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8002358:	781a      	ldrb	r2, [r3, #0]
 800235a:	4b18      	ldr	r3, [pc, #96]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	b25a      	sxtb	r2, r3
 8002364:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8002366:	701a      	strb	r2, [r3, #0]

		if(reload_feedback == 1 && reload_error == 0){
 8002368:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d107      	bne.n	8002380 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 8002370:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8002372:	f993 3000 	ldrsb.w	r3, [r3]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d102      	bne.n	8002380 <HAL_TIM_PeriodElapsedCallback+0x3a8>
			reload_control = 0;
 800237a:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	bd90      	pop	{r4, r7, pc}
 8002388:	40010800 	.word	0x40010800
 800238c:	40000800 	.word	0x40000800
 8002390:	200000fb 	.word	0x200000fb
 8002394:	200000e8 	.word	0x200000e8
 8002398:	c4020000 	.word	0xc4020000
 800239c:	44020000 	.word	0x44020000
 80023a0:	200000fc 	.word	0x200000fc
 80023a4:	200000ec 	.word	0x200000ec
 80023a8:	c3e10000 	.word	0xc3e10000
 80023ac:	43e10000 	.word	0x43e10000
 80023b0:	20000003 	.word	0x20000003
 80023b4:	20000002 	.word	0x20000002
 80023b8:	20000005 	.word	0x20000005
 80023bc:	20000004 	.word	0x20000004
 80023c0:	200000f8 	.word	0x200000f8
 80023c4:	200000fa 	.word	0x200000fa
 80023c8:	200000f9 	.word	0x200000f9

080023cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023d0:	b672      	cpsid	i
}
 80023d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023d4:	e7fe      	b.n	80023d4 <Error_Handler+0x8>
	...

080023d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023de:	4b15      	ldr	r3, [pc, #84]	; (8002434 <HAL_MspInit+0x5c>)
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	4a14      	ldr	r2, [pc, #80]	; (8002434 <HAL_MspInit+0x5c>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6193      	str	r3, [r2, #24]
 80023ea:	4b12      	ldr	r3, [pc, #72]	; (8002434 <HAL_MspInit+0x5c>)
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023f6:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <HAL_MspInit+0x5c>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	4a0e      	ldr	r2, [pc, #56]	; (8002434 <HAL_MspInit+0x5c>)
 80023fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002400:	61d3      	str	r3, [r2, #28]
 8002402:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <HAL_MspInit+0x5c>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <HAL_MspInit+0x60>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	4a04      	ldr	r2, [pc, #16]	; (8002438 <HAL_MspInit+0x60>)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	40021000 	.word	0x40021000
 8002438:	40010000 	.word	0x40010000

0800243c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002440:	e7fe      	b.n	8002440 <NMI_Handler+0x4>

08002442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002446:	e7fe      	b.n	8002446 <HardFault_Handler+0x4>

08002448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800244c:	e7fe      	b.n	800244c <MemManage_Handler+0x4>

0800244e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002452:	e7fe      	b.n	8002452 <BusFault_Handler+0x4>

08002454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002458:	e7fe      	b.n	8002458 <UsageFault_Handler+0x4>

0800245a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002482:	f000 fb95 	bl	8002bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}

0800248a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(En1_C1_Pin);
 800248e:	2008      	movs	r0, #8
 8002490:	f001 fc0a 	bl	8003ca8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	bd80      	pop	{r7, pc}

08002498 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(En1_C2_Pin);
 800249c:	2010      	movs	r0, #16
 800249e:	f001 fc03 	bl	8003ca8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80024ac:	4802      	ldr	r0, [pc, #8]	; (80024b8 <CAN1_RX1_IRQHandler+0x10>)
 80024ae:	f000 fefd 	bl	80032ac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000030 	.word	0x20000030

080024bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(En2_C1_Pin);
 80024c0:	2020      	movs	r0, #32
 80024c2:	f001 fbf1 	bl	8003ca8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(En2_C2_Pin);
 80024c6:	2040      	movs	r0, #64	; 0x40
 80024c8:	f001 fbee 	bl	8003ca8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <TIM2_IRQHandler+0x10>)
 80024d6:	f002 f983 	bl	80047e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	2000017c 	.word	0x2000017c

080024e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b096      	sub	sp, #88	; 0x58
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	609a      	str	r2, [r3, #8]
 8002502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002504:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800250e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	60da      	str	r2, [r3, #12]
 800251c:	611a      	str	r2, [r3, #16]
 800251e:	615a      	str	r2, [r3, #20]
 8002520:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	2220      	movs	r2, #32
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f002 ff91 	bl	8005450 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800252e:	4b44      	ldr	r3, [pc, #272]	; (8002640 <MX_TIM1_Init+0x150>)
 8002530:	4a44      	ldr	r2, [pc, #272]	; (8002644 <MX_TIM1_Init+0x154>)
 8002532:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 8002534:	4b42      	ldr	r3, [pc, #264]	; (8002640 <MX_TIM1_Init+0x150>)
 8002536:	220a      	movs	r2, #10
 8002538:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253a:	4b41      	ldr	r3, [pc, #260]	; (8002640 <MX_TIM1_Init+0x150>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002540:	4b3f      	ldr	r3, [pc, #252]	; (8002640 <MX_TIM1_Init+0x150>)
 8002542:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002546:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002548:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <MX_TIM1_Init+0x150>)
 800254a:	2200      	movs	r2, #0
 800254c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800254e:	4b3c      	ldr	r3, [pc, #240]	; (8002640 <MX_TIM1_Init+0x150>)
 8002550:	2200      	movs	r2, #0
 8002552:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002554:	4b3a      	ldr	r3, [pc, #232]	; (8002640 <MX_TIM1_Init+0x150>)
 8002556:	2280      	movs	r2, #128	; 0x80
 8002558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800255a:	4839      	ldr	r0, [pc, #228]	; (8002640 <MX_TIM1_Init+0x150>)
 800255c:	f001 ffa4 	bl	80044a8 <HAL_TIM_Base_Init>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002566:	f7ff ff31 	bl	80023cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800256a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800256e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002570:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002574:	4619      	mov	r1, r3
 8002576:	4832      	ldr	r0, [pc, #200]	; (8002640 <MX_TIM1_Init+0x150>)
 8002578:	f002 faf8 	bl	8004b6c <HAL_TIM_ConfigClockSource>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002582:	f7ff ff23 	bl	80023cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002586:	482e      	ldr	r0, [pc, #184]	; (8002640 <MX_TIM1_Init+0x150>)
 8002588:	f002 f830 	bl	80045ec <HAL_TIM_PWM_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002592:	f7ff ff1b 	bl	80023cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800259e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025a2:	4619      	mov	r1, r3
 80025a4:	4826      	ldr	r0, [pc, #152]	; (8002640 <MX_TIM1_Init+0x150>)
 80025a6:	f002 fe6d 	bl	8005284 <HAL_TIMEx_MasterConfigSynchronization>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80025b0:	f7ff ff0c 	bl	80023cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025b4:	2360      	movs	r3, #96	; 0x60
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025bc:	2300      	movs	r3, #0
 80025be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025c0:	2300      	movs	r3, #0
 80025c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025c4:	2300      	movs	r3, #0
 80025c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025c8:	2300      	movs	r3, #0
 80025ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025cc:	2300      	movs	r3, #0
 80025ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d4:	2200      	movs	r2, #0
 80025d6:	4619      	mov	r1, r3
 80025d8:	4819      	ldr	r0, [pc, #100]	; (8002640 <MX_TIM1_Init+0x150>)
 80025da:	f002 fa09 	bl	80049f0 <HAL_TIM_PWM_ConfigChannel>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80025e4:	f7ff fef2 	bl	80023cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ec:	2204      	movs	r2, #4
 80025ee:	4619      	mov	r1, r3
 80025f0:	4813      	ldr	r0, [pc, #76]	; (8002640 <MX_TIM1_Init+0x150>)
 80025f2:	f002 f9fd 	bl	80049f0 <HAL_TIM_PWM_ConfigChannel>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80025fc:	f7ff fee6 	bl	80023cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002600:	2300      	movs	r3, #0
 8002602:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002604:	2300      	movs	r3, #0
 8002606:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002618:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800261a:	2300      	movs	r3, #0
 800261c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	4619      	mov	r1, r3
 8002622:	4807      	ldr	r0, [pc, #28]	; (8002640 <MX_TIM1_Init+0x150>)
 8002624:	f002 fe8c 	bl	8005340 <HAL_TIMEx_ConfigBreakDeadTime>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800262e:	f7ff fecd 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002632:	4803      	ldr	r0, [pc, #12]	; (8002640 <MX_TIM1_Init+0x150>)
 8002634:	f000 f9c6 	bl	80029c4 <HAL_TIM_MspPostInit>

}
 8002638:	bf00      	nop
 800263a:	3758      	adds	r7, #88	; 0x58
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000134 	.word	0x20000134
 8002644:	40012c00 	.word	0x40012c00

08002648 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800264e:	f107 0308 	add.w	r3, r7, #8
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	609a      	str	r2, [r3, #8]
 800265a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800265c:	463b      	mov	r3, r7
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002664:	4b1e      	ldr	r3, [pc, #120]	; (80026e0 <MX_TIM2_Init+0x98>)
 8002666:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800266a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 800266c:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <MX_TIM2_Init+0x98>)
 800266e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002672:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002674:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <MX_TIM2_Init+0x98>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800267a:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <MX_TIM2_Init+0x98>)
 800267c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002680:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002682:	4b17      	ldr	r3, [pc, #92]	; (80026e0 <MX_TIM2_Init+0x98>)
 8002684:	2200      	movs	r2, #0
 8002686:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002688:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <MX_TIM2_Init+0x98>)
 800268a:	2280      	movs	r2, #128	; 0x80
 800268c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800268e:	4814      	ldr	r0, [pc, #80]	; (80026e0 <MX_TIM2_Init+0x98>)
 8002690:	f001 ff0a 	bl	80044a8 <HAL_TIM_Base_Init>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800269a:	f7ff fe97 	bl	80023cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800269e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026a4:	f107 0308 	add.w	r3, r7, #8
 80026a8:	4619      	mov	r1, r3
 80026aa:	480d      	ldr	r0, [pc, #52]	; (80026e0 <MX_TIM2_Init+0x98>)
 80026ac:	f002 fa5e 	bl	8004b6c <HAL_TIM_ConfigClockSource>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80026b6:	f7ff fe89 	bl	80023cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ba:	2300      	movs	r3, #0
 80026bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026be:	2300      	movs	r3, #0
 80026c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026c2:	463b      	mov	r3, r7
 80026c4:	4619      	mov	r1, r3
 80026c6:	4806      	ldr	r0, [pc, #24]	; (80026e0 <MX_TIM2_Init+0x98>)
 80026c8:	f002 fddc 	bl	8005284 <HAL_TIMEx_MasterConfigSynchronization>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80026d2:	f7ff fe7b 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80026d6:	bf00      	nop
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	2000017c 	.word	0x2000017c

080026e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08e      	sub	sp, #56	; 0x38
 80026e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f8:	f107 0320 	add.w	r3, r7, #32
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002702:	1d3b      	adds	r3, r7, #4
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	611a      	str	r2, [r3, #16]
 8002710:	615a      	str	r2, [r3, #20]
 8002712:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002714:	4b2d      	ldr	r3, [pc, #180]	; (80027cc <MX_TIM3_Init+0xe8>)
 8002716:	4a2e      	ldr	r2, [pc, #184]	; (80027d0 <MX_TIM3_Init+0xec>)
 8002718:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1439;
 800271a:	4b2c      	ldr	r3, [pc, #176]	; (80027cc <MX_TIM3_Init+0xe8>)
 800271c:	f240 529f 	movw	r2, #1439	; 0x59f
 8002720:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002722:	4b2a      	ldr	r3, [pc, #168]	; (80027cc <MX_TIM3_Init+0xe8>)
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002728:	4b28      	ldr	r3, [pc, #160]	; (80027cc <MX_TIM3_Init+0xe8>)
 800272a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800272e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002730:	4b26      	ldr	r3, [pc, #152]	; (80027cc <MX_TIM3_Init+0xe8>)
 8002732:	2200      	movs	r2, #0
 8002734:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002736:	4b25      	ldr	r3, [pc, #148]	; (80027cc <MX_TIM3_Init+0xe8>)
 8002738:	2280      	movs	r2, #128	; 0x80
 800273a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800273c:	4823      	ldr	r0, [pc, #140]	; (80027cc <MX_TIM3_Init+0xe8>)
 800273e:	f001 feb3 	bl	80044a8 <HAL_TIM_Base_Init>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002748:	f7ff fe40 	bl	80023cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800274c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002750:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002752:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002756:	4619      	mov	r1, r3
 8002758:	481c      	ldr	r0, [pc, #112]	; (80027cc <MX_TIM3_Init+0xe8>)
 800275a:	f002 fa07 	bl	8004b6c <HAL_TIM_ConfigClockSource>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002764:	f7ff fe32 	bl	80023cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002768:	4818      	ldr	r0, [pc, #96]	; (80027cc <MX_TIM3_Init+0xe8>)
 800276a:	f001 ff3f 	bl	80045ec <HAL_TIM_PWM_Init>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002774:	f7ff fe2a 	bl	80023cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002778:	2300      	movs	r3, #0
 800277a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800277c:	2300      	movs	r3, #0
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002780:	f107 0320 	add.w	r3, r7, #32
 8002784:	4619      	mov	r1, r3
 8002786:	4811      	ldr	r0, [pc, #68]	; (80027cc <MX_TIM3_Init+0xe8>)
 8002788:	f002 fd7c 	bl	8005284 <HAL_TIMEx_MasterConfigSynchronization>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002792:	f7ff fe1b 	bl	80023cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002796:	2360      	movs	r3, #96	; 0x60
 8002798:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	2204      	movs	r2, #4
 80027aa:	4619      	mov	r1, r3
 80027ac:	4807      	ldr	r0, [pc, #28]	; (80027cc <MX_TIM3_Init+0xe8>)
 80027ae:	f002 f91f 	bl	80049f0 <HAL_TIM_PWM_ConfigChannel>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80027b8:	f7ff fe08 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80027bc:	4803      	ldr	r0, [pc, #12]	; (80027cc <MX_TIM3_Init+0xe8>)
 80027be:	f000 f901 	bl	80029c4 <HAL_TIM_MspPostInit>

}
 80027c2:	bf00      	nop
 80027c4:	3738      	adds	r7, #56	; 0x38
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	200001c4 	.word	0x200001c4
 80027d0:	40000400 	.word	0x40000400

080027d4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08e      	sub	sp, #56	; 0x38
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e8:	f107 0320 	add.w	r3, r7, #32
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]
 8002800:	615a      	str	r2, [r3, #20]
 8002802:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002804:	4b3d      	ldr	r3, [pc, #244]	; (80028fc <MX_TIM4_Init+0x128>)
 8002806:	4a3e      	ldr	r2, [pc, #248]	; (8002900 <MX_TIM4_Init+0x12c>)
 8002808:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 800280a:	4b3c      	ldr	r3, [pc, #240]	; (80028fc <MX_TIM4_Init+0x128>)
 800280c:	220a      	movs	r2, #10
 800280e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002810:	4b3a      	ldr	r3, [pc, #232]	; (80028fc <MX_TIM4_Init+0x128>)
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8002816:	4b39      	ldr	r3, [pc, #228]	; (80028fc <MX_TIM4_Init+0x128>)
 8002818:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800281c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800281e:	4b37      	ldr	r3, [pc, #220]	; (80028fc <MX_TIM4_Init+0x128>)
 8002820:	2200      	movs	r2, #0
 8002822:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002824:	4b35      	ldr	r3, [pc, #212]	; (80028fc <MX_TIM4_Init+0x128>)
 8002826:	2280      	movs	r2, #128	; 0x80
 8002828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800282a:	4834      	ldr	r0, [pc, #208]	; (80028fc <MX_TIM4_Init+0x128>)
 800282c:	f001 fe3c 	bl	80044a8 <HAL_TIM_Base_Init>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002836:	f7ff fdc9 	bl	80023cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800283a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800283e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002840:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002844:	4619      	mov	r1, r3
 8002846:	482d      	ldr	r0, [pc, #180]	; (80028fc <MX_TIM4_Init+0x128>)
 8002848:	f002 f990 	bl	8004b6c <HAL_TIM_ConfigClockSource>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002852:	f7ff fdbb 	bl	80023cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002856:	4829      	ldr	r0, [pc, #164]	; (80028fc <MX_TIM4_Init+0x128>)
 8002858:	f001 fec8 	bl	80045ec <HAL_TIM_PWM_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002862:	f7ff fdb3 	bl	80023cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002866:	2300      	movs	r3, #0
 8002868:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800286a:	2300      	movs	r3, #0
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800286e:	f107 0320 	add.w	r3, r7, #32
 8002872:	4619      	mov	r1, r3
 8002874:	4821      	ldr	r0, [pc, #132]	; (80028fc <MX_TIM4_Init+0x128>)
 8002876:	f002 fd05 	bl	8005284 <HAL_TIMEx_MasterConfigSynchronization>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002880:	f7ff fda4 	bl	80023cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002884:	2360      	movs	r3, #96	; 0x60
 8002886:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	2200      	movs	r2, #0
 8002898:	4619      	mov	r1, r3
 800289a:	4818      	ldr	r0, [pc, #96]	; (80028fc <MX_TIM4_Init+0x128>)
 800289c:	f002 f8a8 	bl	80049f0 <HAL_TIM_PWM_ConfigChannel>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80028a6:	f7ff fd91 	bl	80023cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028aa:	1d3b      	adds	r3, r7, #4
 80028ac:	2204      	movs	r2, #4
 80028ae:	4619      	mov	r1, r3
 80028b0:	4812      	ldr	r0, [pc, #72]	; (80028fc <MX_TIM4_Init+0x128>)
 80028b2:	f002 f89d 	bl	80049f0 <HAL_TIM_PWM_ConfigChannel>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80028bc:	f7ff fd86 	bl	80023cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028c0:	1d3b      	adds	r3, r7, #4
 80028c2:	2208      	movs	r2, #8
 80028c4:	4619      	mov	r1, r3
 80028c6:	480d      	ldr	r0, [pc, #52]	; (80028fc <MX_TIM4_Init+0x128>)
 80028c8:	f002 f892 	bl	80049f0 <HAL_TIM_PWM_ConfigChannel>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80028d2:	f7ff fd7b 	bl	80023cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	220c      	movs	r2, #12
 80028da:	4619      	mov	r1, r3
 80028dc:	4807      	ldr	r0, [pc, #28]	; (80028fc <MX_TIM4_Init+0x128>)
 80028de:	f002 f887 	bl	80049f0 <HAL_TIM_PWM_ConfigChannel>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 80028e8:	f7ff fd70 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80028ec:	4803      	ldr	r0, [pc, #12]	; (80028fc <MX_TIM4_Init+0x128>)
 80028ee:	f000 f869 	bl	80029c4 <HAL_TIM_MspPostInit>

}
 80028f2:	bf00      	nop
 80028f4:	3738      	adds	r7, #56	; 0x38
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	2000020c 	.word	0x2000020c
 8002900:	40000800 	.word	0x40000800

08002904 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a28      	ldr	r2, [pc, #160]	; (80029b4 <HAL_TIM_Base_MspInit+0xb0>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d10c      	bne.n	8002930 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002916:	4b28      	ldr	r3, [pc, #160]	; (80029b8 <HAL_TIM_Base_MspInit+0xb4>)
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	4a27      	ldr	r2, [pc, #156]	; (80029b8 <HAL_TIM_Base_MspInit+0xb4>)
 800291c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002920:	6193      	str	r3, [r2, #24]
 8002922:	4b25      	ldr	r3, [pc, #148]	; (80029b8 <HAL_TIM_Base_MspInit+0xb4>)
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800292e:	e03c      	b.n	80029aa <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002938:	d114      	bne.n	8002964 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800293a:	4b1f      	ldr	r3, [pc, #124]	; (80029b8 <HAL_TIM_Base_MspInit+0xb4>)
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	4a1e      	ldr	r2, [pc, #120]	; (80029b8 <HAL_TIM_Base_MspInit+0xb4>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	61d3      	str	r3, [r2, #28]
 8002946:	4b1c      	ldr	r3, [pc, #112]	; (80029b8 <HAL_TIM_Base_MspInit+0xb4>)
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2100      	movs	r1, #0
 8002956:	201c      	movs	r0, #28
 8002958:	f000 ffa3 	bl	80038a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800295c:	201c      	movs	r0, #28
 800295e:	f000 ffbc 	bl	80038da <HAL_NVIC_EnableIRQ>
}
 8002962:	e022      	b.n	80029aa <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a14      	ldr	r2, [pc, #80]	; (80029bc <HAL_TIM_Base_MspInit+0xb8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d10c      	bne.n	8002988 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800296e:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_TIM_Base_MspInit+0xb4>)
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	4a11      	ldr	r2, [pc, #68]	; (80029b8 <HAL_TIM_Base_MspInit+0xb4>)
 8002974:	f043 0302 	orr.w	r3, r3, #2
 8002978:	61d3      	str	r3, [r2, #28]
 800297a:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <HAL_TIM_Base_MspInit+0xb4>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
}
 8002986:	e010      	b.n	80029aa <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM4)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a0c      	ldr	r2, [pc, #48]	; (80029c0 <HAL_TIM_Base_MspInit+0xbc>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d10b      	bne.n	80029aa <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <HAL_TIM_Base_MspInit+0xb4>)
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	4a08      	ldr	r2, [pc, #32]	; (80029b8 <HAL_TIM_Base_MspInit+0xb4>)
 8002998:	f043 0304 	orr.w	r3, r3, #4
 800299c:	61d3      	str	r3, [r2, #28]
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_TIM_Base_MspInit+0xb4>)
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	60bb      	str	r3, [r7, #8]
 80029a8:	68bb      	ldr	r3, [r7, #8]
}
 80029aa:	bf00      	nop
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40012c00 	.word	0x40012c00
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40000400 	.word	0x40000400
 80029c0:	40000800 	.word	0x40000800

080029c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08a      	sub	sp, #40	; 0x28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a37      	ldr	r2, [pc, #220]	; (8002abc <HAL_TIM_MspPostInit+0xf8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d119      	bne.n	8002a18 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e4:	4b36      	ldr	r3, [pc, #216]	; (8002ac0 <HAL_TIM_MspPostInit+0xfc>)
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	4a35      	ldr	r2, [pc, #212]	; (8002ac0 <HAL_TIM_MspPostInit+0xfc>)
 80029ea:	f043 0304 	orr.w	r3, r3, #4
 80029ee:	6193      	str	r3, [r2, #24]
 80029f0:	4b33      	ldr	r3, [pc, #204]	; (8002ac0 <HAL_TIM_MspPostInit+0xfc>)
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a02:	2302      	movs	r3, #2
 8002a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a06:	2302      	movs	r3, #2
 8002a08:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0a:	f107 0314 	add.w	r3, r7, #20
 8002a0e:	4619      	mov	r1, r3
 8002a10:	482c      	ldr	r0, [pc, #176]	; (8002ac4 <HAL_TIM_MspPostInit+0x100>)
 8002a12:	f000 ff7d 	bl	8003910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002a16:	e04d      	b.n	8002ab4 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM3)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a2a      	ldr	r2, [pc, #168]	; (8002ac8 <HAL_TIM_MspPostInit+0x104>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d12a      	bne.n	8002a78 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a22:	4b27      	ldr	r3, [pc, #156]	; (8002ac0 <HAL_TIM_MspPostInit+0xfc>)
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	4a26      	ldr	r2, [pc, #152]	; (8002ac0 <HAL_TIM_MspPostInit+0xfc>)
 8002a28:	f043 0308 	orr.w	r3, r3, #8
 8002a2c:	6193      	str	r3, [r2, #24]
 8002a2e:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <HAL_TIM_MspPostInit+0xfc>)
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_Pin_Pin;
 8002a3a:	2320      	movs	r3, #32
 8002a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a42:	2302      	movs	r3, #2
 8002a44:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(Servo_Pin_GPIO_Port, &GPIO_InitStruct);
 8002a46:	f107 0314 	add.w	r3, r7, #20
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	481f      	ldr	r0, [pc, #124]	; (8002acc <HAL_TIM_MspPostInit+0x108>)
 8002a4e:	f000 ff5f 	bl	8003910 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002a52:	4b1f      	ldr	r3, [pc, #124]	; (8002ad0 <HAL_TIM_MspPostInit+0x10c>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a70:	4a17      	ldr	r2, [pc, #92]	; (8002ad0 <HAL_TIM_MspPostInit+0x10c>)
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	6053      	str	r3, [r2, #4]
}
 8002a76:	e01d      	b.n	8002ab4 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a15      	ldr	r2, [pc, #84]	; (8002ad4 <HAL_TIM_MspPostInit+0x110>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d118      	bne.n	8002ab4 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a82:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <HAL_TIM_MspPostInit+0xfc>)
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	4a0e      	ldr	r2, [pc, #56]	; (8002ac0 <HAL_TIM_MspPostInit+0xfc>)
 8002a88:	f043 0308 	orr.w	r3, r3, #8
 8002a8c:	6193      	str	r3, [r2, #24]
 8002a8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <HAL_TIM_MspPostInit+0xfc>)
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002a9a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	4619      	mov	r1, r3
 8002aae:	4807      	ldr	r0, [pc, #28]	; (8002acc <HAL_TIM_MspPostInit+0x108>)
 8002ab0:	f000 ff2e 	bl	8003910 <HAL_GPIO_Init>
}
 8002ab4:	bf00      	nop
 8002ab6:	3728      	adds	r7, #40	; 0x28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40012c00 	.word	0x40012c00
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40010800 	.word	0x40010800
 8002ac8:	40000400 	.word	0x40000400
 8002acc:	40010c00 	.word	0x40010c00
 8002ad0:	40010000 	.word	0x40010000
 8002ad4:	40000800 	.word	0x40000800

08002ad8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ad8:	480c      	ldr	r0, [pc, #48]	; (8002b0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ada:	490d      	ldr	r1, [pc, #52]	; (8002b10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002adc:	4a0d      	ldr	r2, [pc, #52]	; (8002b14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ae0:	e002      	b.n	8002ae8 <LoopCopyDataInit>

08002ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ae6:	3304      	adds	r3, #4

08002ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aec:	d3f9      	bcc.n	8002ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aee:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002af0:	4c0a      	ldr	r4, [pc, #40]	; (8002b1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002af4:	e001      	b.n	8002afa <LoopFillZerobss>

08002af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002af8:	3204      	adds	r2, #4

08002afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002afc:	d3fb      	bcc.n	8002af6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002afe:	f7ff fcf1 	bl	80024e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b02:	f002 fc81 	bl	8005408 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b06:	f7ff f91d 	bl	8001d44 <main>
  bx lr
 8002b0a:	4770      	bx	lr
  ldr r0, =_sdata
 8002b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b10:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002b14:	08005530 	.word	0x08005530
  ldr r2, =_sbss
 8002b18:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002b1c:	20000258 	.word	0x20000258

08002b20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b20:	e7fe      	b.n	8002b20 <ADC1_2_IRQHandler>
	...

08002b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b28:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <HAL_Init+0x28>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a07      	ldr	r2, [pc, #28]	; (8002b4c <HAL_Init+0x28>)
 8002b2e:	f043 0310 	orr.w	r3, r3, #16
 8002b32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b34:	2003      	movs	r0, #3
 8002b36:	f000 fea9 	bl	800388c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b3a:	200f      	movs	r0, #15
 8002b3c:	f000 f808 	bl	8002b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b40:	f7ff fc4a 	bl	80023d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40022000 	.word	0x40022000

08002b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b58:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <HAL_InitTick+0x54>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <HAL_InitTick+0x58>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	4619      	mov	r1, r3
 8002b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 fec1 	bl	80038f6 <HAL_SYSTICK_Config>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e00e      	b.n	8002b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b0f      	cmp	r3, #15
 8002b82:	d80a      	bhi.n	8002b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b84:	2200      	movs	r2, #0
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b8c:	f000 fe89 	bl	80038a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b90:	4a06      	ldr	r2, [pc, #24]	; (8002bac <HAL_InitTick+0x5c>)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	e000      	b.n	8002b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20000008 	.word	0x20000008
 8002ba8:	20000010 	.word	0x20000010
 8002bac:	2000000c 	.word	0x2000000c

08002bb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_IncTick+0x1c>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <HAL_IncTick+0x20>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	4a03      	ldr	r2, [pc, #12]	; (8002bd0 <HAL_IncTick+0x20>)
 8002bc2:	6013      	str	r3, [r2, #0]
}
 8002bc4:	bf00      	nop
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr
 8002bcc:	20000010 	.word	0x20000010
 8002bd0:	20000254 	.word	0x20000254

08002bd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bd8:	4b02      	ldr	r3, [pc, #8]	; (8002be4 <HAL_GetTick+0x10>)
 8002bda:	681b      	ldr	r3, [r3, #0]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr
 8002be4:	20000254 	.word	0x20000254

08002be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bf0:	f7ff fff0 	bl	8002bd4 <HAL_GetTick>
 8002bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c00:	d005      	beq.n	8002c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c02:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <HAL_Delay+0x44>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c0e:	bf00      	nop
 8002c10:	f7ff ffe0 	bl	8002bd4 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d8f7      	bhi.n	8002c10 <HAL_Delay+0x28>
  {
  }
}
 8002c20:	bf00      	nop
 8002c22:	bf00      	nop
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000010 	.word	0x20000010

08002c30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e0ed      	b.n	8002e1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d102      	bne.n	8002c54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7fe fa80 	bl	8001154 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c64:	f7ff ffb6 	bl	8002bd4 <HAL_GetTick>
 8002c68:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c6a:	e012      	b.n	8002c92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c6c:	f7ff ffb2 	bl	8002bd4 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b0a      	cmp	r3, #10
 8002c78:	d90b      	bls.n	8002c92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2205      	movs	r2, #5
 8002c8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e0c5      	b.n	8002e1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0e5      	beq.n	8002c6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0202 	bic.w	r2, r2, #2
 8002cae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cb0:	f7ff ff90 	bl	8002bd4 <HAL_GetTick>
 8002cb4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002cb6:	e012      	b.n	8002cde <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cb8:	f7ff ff8c 	bl	8002bd4 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b0a      	cmp	r3, #10
 8002cc4:	d90b      	bls.n	8002cde <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2205      	movs	r2, #5
 8002cd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e09f      	b.n	8002e1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1e5      	bne.n	8002cb8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	7e1b      	ldrb	r3, [r3, #24]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d108      	bne.n	8002d06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	e007      	b.n	8002d16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	7e5b      	ldrb	r3, [r3, #25]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d108      	bne.n	8002d30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	e007      	b.n	8002d40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	7e9b      	ldrb	r3, [r3, #26]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d108      	bne.n	8002d5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0220 	orr.w	r2, r2, #32
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	e007      	b.n	8002d6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0220 	bic.w	r2, r2, #32
 8002d68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	7edb      	ldrb	r3, [r3, #27]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d108      	bne.n	8002d84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0210 	bic.w	r2, r2, #16
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	e007      	b.n	8002d94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0210 	orr.w	r2, r2, #16
 8002d92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	7f1b      	ldrb	r3, [r3, #28]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d108      	bne.n	8002dae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0208 	orr.w	r2, r2, #8
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	e007      	b.n	8002dbe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0208 	bic.w	r2, r2, #8
 8002dbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	7f5b      	ldrb	r3, [r3, #29]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d108      	bne.n	8002dd8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0204 	orr.w	r2, r2, #4
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	e007      	b.n	8002de8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0204 	bic.w	r2, r2, #4
 8002de6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	ea42 0103 	orr.w	r1, r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	1e5a      	subs	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b087      	sub	sp, #28
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e3c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002e3e:	7cfb      	ldrb	r3, [r7, #19]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d003      	beq.n	8002e4c <HAL_CAN_ConfigFilter+0x26>
 8002e44:	7cfb      	ldrb	r3, [r7, #19]
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	f040 80aa 	bne.w	8002fa0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e52:	f043 0201 	orr.w	r2, r3, #1
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	2201      	movs	r2, #1
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	401a      	ands	r2, r3
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d123      	bne.n	8002ece <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	401a      	ands	r2, r3
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ea8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	3248      	adds	r2, #72	; 0x48
 8002eae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ec2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ec4:	6979      	ldr	r1, [r7, #20]
 8002ec6:	3348      	adds	r3, #72	; 0x48
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	440b      	add	r3, r1
 8002ecc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d122      	bne.n	8002f1c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ef6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	3248      	adds	r2, #72	; 0x48
 8002efc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f10:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f12:	6979      	ldr	r1, [r7, #20]
 8002f14:	3348      	adds	r3, #72	; 0x48
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	440b      	add	r3, r1
 8002f1a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d109      	bne.n	8002f38 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	401a      	ands	r2, r3
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002f36:	e007      	b.n	8002f48 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	431a      	orrs	r2, r3
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d109      	bne.n	8002f64 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	401a      	ands	r2, r3
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002f62:	e007      	b.n	8002f74 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d107      	bne.n	8002f8c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	431a      	orrs	r2, r3
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f92:	f023 0201 	bic.w	r2, r3, #1
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e006      	b.n	8002fae <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
  }
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	371c      	adds	r7, #28
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d12e      	bne.n	800302a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0201 	bic.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fe4:	f7ff fdf6 	bl	8002bd4 <HAL_GetTick>
 8002fe8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002fea:	e012      	b.n	8003012 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fec:	f7ff fdf2 	bl	8002bd4 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b0a      	cmp	r3, #10
 8002ff8:	d90b      	bls.n	8003012 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2205      	movs	r2, #5
 800300a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e012      	b.n	8003038 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1e5      	bne.n	8002fec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	e006      	b.n	8003038 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
  }
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
 800304c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003054:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003056:	7dfb      	ldrb	r3, [r7, #23]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d003      	beq.n	8003064 <HAL_CAN_GetRxMessage+0x24>
 800305c:	7dfb      	ldrb	r3, [r7, #23]
 800305e:	2b02      	cmp	r3, #2
 8003060:	f040 80f3 	bne.w	800324a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10e      	bne.n	8003088 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d116      	bne.n	80030a6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0e7      	b.n	8003258 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d107      	bne.n	80030a6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e0d8      	b.n	8003258 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	331b      	adds	r3, #27
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	4413      	add	r3, r2
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0204 	and.w	r2, r3, #4
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10c      	bne.n	80030de <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	331b      	adds	r3, #27
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	4413      	add	r3, r2
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	0d5b      	lsrs	r3, r3, #21
 80030d4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	e00b      	b.n	80030f6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	331b      	adds	r3, #27
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	4413      	add	r3, r2
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	08db      	lsrs	r3, r3, #3
 80030ee:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	331b      	adds	r3, #27
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	4413      	add	r3, r2
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0202 	and.w	r2, r3, #2
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	331b      	adds	r3, #27
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	4413      	add	r3, r2
 8003118:	3304      	adds	r3, #4
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 020f 	and.w	r2, r3, #15
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	331b      	adds	r3, #27
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	4413      	add	r3, r2
 8003130:	3304      	adds	r3, #4
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	0a1b      	lsrs	r3, r3, #8
 8003136:	b2da      	uxtb	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	331b      	adds	r3, #27
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	4413      	add	r3, r2
 8003148:	3304      	adds	r3, #4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	0c1b      	lsrs	r3, r3, #16
 800314e:	b29a      	uxth	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	4413      	add	r3, r2
 800315e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	b2da      	uxtb	r2, r3
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	4413      	add	r3, r2
 8003174:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	0a1a      	lsrs	r2, r3, #8
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	3301      	adds	r3, #1
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	4413      	add	r3, r2
 800318e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	0c1a      	lsrs	r2, r3, #16
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	3302      	adds	r3, #2
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	0e1a      	lsrs	r2, r3, #24
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	3303      	adds	r3, #3
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	3304      	adds	r3, #4
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	4413      	add	r3, r2
 80031da:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	0a1a      	lsrs	r2, r3, #8
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	3305      	adds	r3, #5
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	0c1a      	lsrs	r2, r3, #16
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	3306      	adds	r3, #6
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	4413      	add	r3, r2
 800320e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	0e1a      	lsrs	r2, r3, #24
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	3307      	adds	r3, #7
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d108      	bne.n	8003236 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0220 	orr.w	r2, r2, #32
 8003232:	60da      	str	r2, [r3, #12]
 8003234:	e007      	b.n	8003246 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f042 0220 	orr.w	r2, r2, #32
 8003244:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	e006      	b.n	8003258 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
  }
}
 8003258:	4618      	mov	r0, r3
 800325a:	371c      	adds	r7, #28
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr

08003262 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003262:	b480      	push	{r7}
 8003264:	b085      	sub	sp, #20
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003272:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d002      	beq.n	8003280 <HAL_CAN_ActivateNotification+0x1e>
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	2b02      	cmp	r3, #2
 800327e:	d109      	bne.n	8003294 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6959      	ldr	r1, [r3, #20]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	e006      	b.n	80032a2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
  }
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08a      	sub	sp, #40	; 0x28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80032b4:	2300      	movs	r3, #0
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d07c      	beq.n	80033ec <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d023      	beq.n	8003344 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2201      	movs	r2, #1
 8003302:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f983 	bl	800361a <HAL_CAN_TxMailbox0CompleteCallback>
 8003314:	e016      	b.n	8003344 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d004      	beq.n	800332a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
 8003328:	e00c      	b.n	8003344 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b00      	cmp	r3, #0
 8003332:	d004      	beq.n	800333e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800333a:	627b      	str	r3, [r7, #36]	; 0x24
 800333c:	e002      	b.n	8003344 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f986 	bl	8003650 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	2b00      	cmp	r3, #0
 800334c:	d024      	beq.n	8003398 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003356:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f962 	bl	800362c <HAL_CAN_TxMailbox1CompleteCallback>
 8003368:	e016      	b.n	8003398 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003370:	2b00      	cmp	r3, #0
 8003372:	d004      	beq.n	800337e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
 800337c:	e00c      	b.n	8003398 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003384:	2b00      	cmp	r3, #0
 8003386:	d004      	beq.n	8003392 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
 8003390:	e002      	b.n	8003398 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f965 	bl	8003662 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d024      	beq.n	80033ec <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f941 	bl	800363e <HAL_CAN_TxMailbox2CompleteCallback>
 80033bc:	e016      	b.n	80033ec <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d004      	beq.n	80033d2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
 80033d0:	e00c      	b.n	80033ec <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d004      	beq.n	80033e6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24
 80033e4:	e002      	b.n	80033ec <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f944 	bl	8003674 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00c      	beq.n	8003410 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d007      	beq.n	8003410 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003406:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2210      	movs	r2, #16
 800340e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00b      	beq.n	8003432 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b00      	cmp	r3, #0
 8003422:	d006      	beq.n	8003432 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2208      	movs	r2, #8
 800342a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f933 	bl	8003698 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d009      	beq.n	8003450 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f91b 	bl	8003686 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00c      	beq.n	8003474 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b00      	cmp	r3, #0
 8003462:	d007      	beq.n	8003474 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800346a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2210      	movs	r2, #16
 8003472:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00b      	beq.n	8003496 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b00      	cmp	r3, #0
 8003486:	d006      	beq.n	8003496 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2208      	movs	r2, #8
 800348e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f90a 	bl	80036aa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	2b00      	cmp	r3, #0
 800349e:	d009      	beq.n	80034b4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fd ffbe 	bl	8001430 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00b      	beq.n	80034d6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f003 0310 	and.w	r3, r3, #16
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d006      	beq.n	80034d6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2210      	movs	r2, #16
 80034ce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f8f3 	bl	80036bc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00b      	beq.n	80034f8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d006      	beq.n	80034f8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2208      	movs	r2, #8
 80034f0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f8eb 	bl	80036ce <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d07b      	beq.n	80035fa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d072      	beq.n	80035f2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003512:	2b00      	cmp	r3, #0
 8003514:	d008      	beq.n	8003528 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	f043 0302 	orr.w	r3, r3, #2
 8003542:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	f043 0304 	orr.w	r3, r3, #4
 800355e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003566:	2b00      	cmp	r3, #0
 8003568:	d043      	beq.n	80035f2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003570:	2b00      	cmp	r3, #0
 8003572:	d03e      	beq.n	80035f2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800357a:	2b60      	cmp	r3, #96	; 0x60
 800357c:	d02b      	beq.n	80035d6 <HAL_CAN_IRQHandler+0x32a>
 800357e:	2b60      	cmp	r3, #96	; 0x60
 8003580:	d82e      	bhi.n	80035e0 <HAL_CAN_IRQHandler+0x334>
 8003582:	2b50      	cmp	r3, #80	; 0x50
 8003584:	d022      	beq.n	80035cc <HAL_CAN_IRQHandler+0x320>
 8003586:	2b50      	cmp	r3, #80	; 0x50
 8003588:	d82a      	bhi.n	80035e0 <HAL_CAN_IRQHandler+0x334>
 800358a:	2b40      	cmp	r3, #64	; 0x40
 800358c:	d019      	beq.n	80035c2 <HAL_CAN_IRQHandler+0x316>
 800358e:	2b40      	cmp	r3, #64	; 0x40
 8003590:	d826      	bhi.n	80035e0 <HAL_CAN_IRQHandler+0x334>
 8003592:	2b30      	cmp	r3, #48	; 0x30
 8003594:	d010      	beq.n	80035b8 <HAL_CAN_IRQHandler+0x30c>
 8003596:	2b30      	cmp	r3, #48	; 0x30
 8003598:	d822      	bhi.n	80035e0 <HAL_CAN_IRQHandler+0x334>
 800359a:	2b10      	cmp	r3, #16
 800359c:	d002      	beq.n	80035a4 <HAL_CAN_IRQHandler+0x2f8>
 800359e:	2b20      	cmp	r3, #32
 80035a0:	d005      	beq.n	80035ae <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80035a2:	e01d      	b.n	80035e0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	f043 0308 	orr.w	r3, r3, #8
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035ac:	e019      	b.n	80035e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	f043 0310 	orr.w	r3, r3, #16
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035b6:	e014      	b.n	80035e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	f043 0320 	orr.w	r3, r3, #32
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035c0:	e00f      	b.n	80035e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035ca:	e00a      	b.n	80035e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035d4:	e005      	b.n	80035e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035de:	e000      	b.n	80035e2 <HAL_CAN_IRQHandler+0x336>
            break;
 80035e0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699a      	ldr	r2, [r3, #24]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80035f0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2204      	movs	r2, #4
 80035f8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f867 	bl	80036e0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003612:	bf00      	nop
 8003614:	3728      	adds	r7, #40	; 0x28
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr

0800362c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr

0800363e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr

08003650 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr

08003662 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr

08003674 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr

08003686 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr

08003698 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr

080036aa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr

080036bc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr

080036ce <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr
	...

080036f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <__NVIC_SetPriorityGrouping+0x44>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003710:	4013      	ands	r3, r2
 8003712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800371c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003726:	4a04      	ldr	r2, [pc, #16]	; (8003738 <__NVIC_SetPriorityGrouping+0x44>)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	60d3      	str	r3, [r2, #12]
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	e000ed00 	.word	0xe000ed00

0800373c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003740:	4b04      	ldr	r3, [pc, #16]	; (8003754 <__NVIC_GetPriorityGrouping+0x18>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	0a1b      	lsrs	r3, r3, #8
 8003746:	f003 0307 	and.w	r3, r3, #7
}
 800374a:	4618      	mov	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003766:	2b00      	cmp	r3, #0
 8003768:	db0b      	blt.n	8003782 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	f003 021f 	and.w	r2, r3, #31
 8003770:	4906      	ldr	r1, [pc, #24]	; (800378c <__NVIC_EnableIRQ+0x34>)
 8003772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	2001      	movs	r0, #1
 800377a:	fa00 f202 	lsl.w	r2, r0, r2
 800377e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	e000e100 	.word	0xe000e100

08003790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	6039      	str	r1, [r7, #0]
 800379a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800379c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	db0a      	blt.n	80037ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	490c      	ldr	r1, [pc, #48]	; (80037dc <__NVIC_SetPriority+0x4c>)
 80037aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ae:	0112      	lsls	r2, r2, #4
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	440b      	add	r3, r1
 80037b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b8:	e00a      	b.n	80037d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	4908      	ldr	r1, [pc, #32]	; (80037e0 <__NVIC_SetPriority+0x50>)
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	3b04      	subs	r3, #4
 80037c8:	0112      	lsls	r2, r2, #4
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	440b      	add	r3, r1
 80037ce:	761a      	strb	r2, [r3, #24]
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	e000e100 	.word	0xe000e100
 80037e0:	e000ed00 	.word	0xe000ed00

080037e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b089      	sub	sp, #36	; 0x24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f1c3 0307 	rsb	r3, r3, #7
 80037fe:	2b04      	cmp	r3, #4
 8003800:	bf28      	it	cs
 8003802:	2304      	movcs	r3, #4
 8003804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3304      	adds	r3, #4
 800380a:	2b06      	cmp	r3, #6
 800380c:	d902      	bls.n	8003814 <NVIC_EncodePriority+0x30>
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	3b03      	subs	r3, #3
 8003812:	e000      	b.n	8003816 <NVIC_EncodePriority+0x32>
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003818:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43da      	mvns	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	401a      	ands	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800382c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	fa01 f303 	lsl.w	r3, r1, r3
 8003836:	43d9      	mvns	r1, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800383c:	4313      	orrs	r3, r2
         );
}
 800383e:	4618      	mov	r0, r3
 8003840:	3724      	adds	r7, #36	; 0x24
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3b01      	subs	r3, #1
 8003854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003858:	d301      	bcc.n	800385e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800385a:	2301      	movs	r3, #1
 800385c:	e00f      	b.n	800387e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800385e:	4a0a      	ldr	r2, [pc, #40]	; (8003888 <SysTick_Config+0x40>)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3b01      	subs	r3, #1
 8003864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003866:	210f      	movs	r1, #15
 8003868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800386c:	f7ff ff90 	bl	8003790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <SysTick_Config+0x40>)
 8003872:	2200      	movs	r2, #0
 8003874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003876:	4b04      	ldr	r3, [pc, #16]	; (8003888 <SysTick_Config+0x40>)
 8003878:	2207      	movs	r2, #7
 800387a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	e000e010 	.word	0xe000e010

0800388c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff ff2d 	bl	80036f4 <__NVIC_SetPriorityGrouping>
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b086      	sub	sp, #24
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	4603      	mov	r3, r0
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	607a      	str	r2, [r7, #4]
 80038ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038b4:	f7ff ff42 	bl	800373c <__NVIC_GetPriorityGrouping>
 80038b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	6978      	ldr	r0, [r7, #20]
 80038c0:	f7ff ff90 	bl	80037e4 <NVIC_EncodePriority>
 80038c4:	4602      	mov	r2, r0
 80038c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ca:	4611      	mov	r1, r2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff ff5f 	bl	8003790 <__NVIC_SetPriority>
}
 80038d2:	bf00      	nop
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	4603      	mov	r3, r0
 80038e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff ff35 	bl	8003758 <__NVIC_EnableIRQ>
}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff ffa2 	bl	8003848 <SysTick_Config>
 8003904:	4603      	mov	r3, r0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003910:	b480      	push	{r7}
 8003912:	b08b      	sub	sp, #44	; 0x2c
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800391a:	2300      	movs	r3, #0
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800391e:	2300      	movs	r3, #0
 8003920:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003922:	e169      	b.n	8003bf8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003924:	2201      	movs	r2, #1
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	69fa      	ldr	r2, [r7, #28]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	429a      	cmp	r2, r3
 800393e:	f040 8158 	bne.w	8003bf2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	4a9a      	ldr	r2, [pc, #616]	; (8003bb0 <HAL_GPIO_Init+0x2a0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d05e      	beq.n	8003a0a <HAL_GPIO_Init+0xfa>
 800394c:	4a98      	ldr	r2, [pc, #608]	; (8003bb0 <HAL_GPIO_Init+0x2a0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d875      	bhi.n	8003a3e <HAL_GPIO_Init+0x12e>
 8003952:	4a98      	ldr	r2, [pc, #608]	; (8003bb4 <HAL_GPIO_Init+0x2a4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d058      	beq.n	8003a0a <HAL_GPIO_Init+0xfa>
 8003958:	4a96      	ldr	r2, [pc, #600]	; (8003bb4 <HAL_GPIO_Init+0x2a4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d86f      	bhi.n	8003a3e <HAL_GPIO_Init+0x12e>
 800395e:	4a96      	ldr	r2, [pc, #600]	; (8003bb8 <HAL_GPIO_Init+0x2a8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d052      	beq.n	8003a0a <HAL_GPIO_Init+0xfa>
 8003964:	4a94      	ldr	r2, [pc, #592]	; (8003bb8 <HAL_GPIO_Init+0x2a8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d869      	bhi.n	8003a3e <HAL_GPIO_Init+0x12e>
 800396a:	4a94      	ldr	r2, [pc, #592]	; (8003bbc <HAL_GPIO_Init+0x2ac>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d04c      	beq.n	8003a0a <HAL_GPIO_Init+0xfa>
 8003970:	4a92      	ldr	r2, [pc, #584]	; (8003bbc <HAL_GPIO_Init+0x2ac>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d863      	bhi.n	8003a3e <HAL_GPIO_Init+0x12e>
 8003976:	4a92      	ldr	r2, [pc, #584]	; (8003bc0 <HAL_GPIO_Init+0x2b0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d046      	beq.n	8003a0a <HAL_GPIO_Init+0xfa>
 800397c:	4a90      	ldr	r2, [pc, #576]	; (8003bc0 <HAL_GPIO_Init+0x2b0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d85d      	bhi.n	8003a3e <HAL_GPIO_Init+0x12e>
 8003982:	2b12      	cmp	r3, #18
 8003984:	d82a      	bhi.n	80039dc <HAL_GPIO_Init+0xcc>
 8003986:	2b12      	cmp	r3, #18
 8003988:	d859      	bhi.n	8003a3e <HAL_GPIO_Init+0x12e>
 800398a:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <HAL_GPIO_Init+0x80>)
 800398c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003990:	08003a0b 	.word	0x08003a0b
 8003994:	080039e5 	.word	0x080039e5
 8003998:	080039f7 	.word	0x080039f7
 800399c:	08003a39 	.word	0x08003a39
 80039a0:	08003a3f 	.word	0x08003a3f
 80039a4:	08003a3f 	.word	0x08003a3f
 80039a8:	08003a3f 	.word	0x08003a3f
 80039ac:	08003a3f 	.word	0x08003a3f
 80039b0:	08003a3f 	.word	0x08003a3f
 80039b4:	08003a3f 	.word	0x08003a3f
 80039b8:	08003a3f 	.word	0x08003a3f
 80039bc:	08003a3f 	.word	0x08003a3f
 80039c0:	08003a3f 	.word	0x08003a3f
 80039c4:	08003a3f 	.word	0x08003a3f
 80039c8:	08003a3f 	.word	0x08003a3f
 80039cc:	08003a3f 	.word	0x08003a3f
 80039d0:	08003a3f 	.word	0x08003a3f
 80039d4:	080039ed 	.word	0x080039ed
 80039d8:	08003a01 	.word	0x08003a01
 80039dc:	4a79      	ldr	r2, [pc, #484]	; (8003bc4 <HAL_GPIO_Init+0x2b4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d013      	beq.n	8003a0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80039e2:	e02c      	b.n	8003a3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	623b      	str	r3, [r7, #32]
          break;
 80039ea:	e029      	b.n	8003a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	3304      	adds	r3, #4
 80039f2:	623b      	str	r3, [r7, #32]
          break;
 80039f4:	e024      	b.n	8003a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	3308      	adds	r3, #8
 80039fc:	623b      	str	r3, [r7, #32]
          break;
 80039fe:	e01f      	b.n	8003a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	330c      	adds	r3, #12
 8003a06:	623b      	str	r3, [r7, #32]
          break;
 8003a08:	e01a      	b.n	8003a40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d102      	bne.n	8003a18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a12:	2304      	movs	r3, #4
 8003a14:	623b      	str	r3, [r7, #32]
          break;
 8003a16:	e013      	b.n	8003a40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d105      	bne.n	8003a2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a20:	2308      	movs	r3, #8
 8003a22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	611a      	str	r2, [r3, #16]
          break;
 8003a2a:	e009      	b.n	8003a40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a2c:	2308      	movs	r3, #8
 8003a2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	615a      	str	r2, [r3, #20]
          break;
 8003a36:	e003      	b.n	8003a40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	623b      	str	r3, [r7, #32]
          break;
 8003a3c:	e000      	b.n	8003a40 <HAL_GPIO_Init+0x130>
          break;
 8003a3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	2bff      	cmp	r3, #255	; 0xff
 8003a44:	d801      	bhi.n	8003a4a <HAL_GPIO_Init+0x13a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	e001      	b.n	8003a4e <HAL_GPIO_Init+0x13e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	2bff      	cmp	r3, #255	; 0xff
 8003a54:	d802      	bhi.n	8003a5c <HAL_GPIO_Init+0x14c>
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	e002      	b.n	8003a62 <HAL_GPIO_Init+0x152>
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	3b08      	subs	r3, #8
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	210f      	movs	r1, #15
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a70:	43db      	mvns	r3, r3
 8003a72:	401a      	ands	r2, r3
 8003a74:	6a39      	ldr	r1, [r7, #32]
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80b1 	beq.w	8003bf2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a90:	4b4d      	ldr	r3, [pc, #308]	; (8003bc8 <HAL_GPIO_Init+0x2b8>)
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	4a4c      	ldr	r2, [pc, #304]	; (8003bc8 <HAL_GPIO_Init+0x2b8>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	6193      	str	r3, [r2, #24]
 8003a9c:	4b4a      	ldr	r3, [pc, #296]	; (8003bc8 <HAL_GPIO_Init+0x2b8>)
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003aa8:	4a48      	ldr	r2, [pc, #288]	; (8003bcc <HAL_GPIO_Init+0x2bc>)
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	089b      	lsrs	r3, r3, #2
 8003aae:	3302      	adds	r3, #2
 8003ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	220f      	movs	r2, #15
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a40      	ldr	r2, [pc, #256]	; (8003bd0 <HAL_GPIO_Init+0x2c0>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d013      	beq.n	8003afc <HAL_GPIO_Init+0x1ec>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a3f      	ldr	r2, [pc, #252]	; (8003bd4 <HAL_GPIO_Init+0x2c4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00d      	beq.n	8003af8 <HAL_GPIO_Init+0x1e8>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a3e      	ldr	r2, [pc, #248]	; (8003bd8 <HAL_GPIO_Init+0x2c8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d007      	beq.n	8003af4 <HAL_GPIO_Init+0x1e4>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a3d      	ldr	r2, [pc, #244]	; (8003bdc <HAL_GPIO_Init+0x2cc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d101      	bne.n	8003af0 <HAL_GPIO_Init+0x1e0>
 8003aec:	2303      	movs	r3, #3
 8003aee:	e006      	b.n	8003afe <HAL_GPIO_Init+0x1ee>
 8003af0:	2304      	movs	r3, #4
 8003af2:	e004      	b.n	8003afe <HAL_GPIO_Init+0x1ee>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e002      	b.n	8003afe <HAL_GPIO_Init+0x1ee>
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <HAL_GPIO_Init+0x1ee>
 8003afc:	2300      	movs	r3, #0
 8003afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b00:	f002 0203 	and.w	r2, r2, #3
 8003b04:	0092      	lsls	r2, r2, #2
 8003b06:	4093      	lsls	r3, r2
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b0e:	492f      	ldr	r1, [pc, #188]	; (8003bcc <HAL_GPIO_Init+0x2bc>)
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	089b      	lsrs	r3, r3, #2
 8003b14:	3302      	adds	r3, #2
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d006      	beq.n	8003b36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b28:	4b2d      	ldr	r3, [pc, #180]	; (8003be0 <HAL_GPIO_Init+0x2d0>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	492c      	ldr	r1, [pc, #176]	; (8003be0 <HAL_GPIO_Init+0x2d0>)
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	600b      	str	r3, [r1, #0]
 8003b34:	e006      	b.n	8003b44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b36:	4b2a      	ldr	r3, [pc, #168]	; (8003be0 <HAL_GPIO_Init+0x2d0>)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	4928      	ldr	r1, [pc, #160]	; (8003be0 <HAL_GPIO_Init+0x2d0>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d006      	beq.n	8003b5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b50:	4b23      	ldr	r3, [pc, #140]	; (8003be0 <HAL_GPIO_Init+0x2d0>)
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	4922      	ldr	r1, [pc, #136]	; (8003be0 <HAL_GPIO_Init+0x2d0>)
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	604b      	str	r3, [r1, #4]
 8003b5c:	e006      	b.n	8003b6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b5e:	4b20      	ldr	r3, [pc, #128]	; (8003be0 <HAL_GPIO_Init+0x2d0>)
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	43db      	mvns	r3, r3
 8003b66:	491e      	ldr	r1, [pc, #120]	; (8003be0 <HAL_GPIO_Init+0x2d0>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d006      	beq.n	8003b86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b78:	4b19      	ldr	r3, [pc, #100]	; (8003be0 <HAL_GPIO_Init+0x2d0>)
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	4918      	ldr	r1, [pc, #96]	; (8003be0 <HAL_GPIO_Init+0x2d0>)
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	608b      	str	r3, [r1, #8]
 8003b84:	e006      	b.n	8003b94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b86:	4b16      	ldr	r3, [pc, #88]	; (8003be0 <HAL_GPIO_Init+0x2d0>)
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	4914      	ldr	r1, [pc, #80]	; (8003be0 <HAL_GPIO_Init+0x2d0>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d021      	beq.n	8003be4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ba0:	4b0f      	ldr	r3, [pc, #60]	; (8003be0 <HAL_GPIO_Init+0x2d0>)
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	490e      	ldr	r1, [pc, #56]	; (8003be0 <HAL_GPIO_Init+0x2d0>)
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60cb      	str	r3, [r1, #12]
 8003bac:	e021      	b.n	8003bf2 <HAL_GPIO_Init+0x2e2>
 8003bae:	bf00      	nop
 8003bb0:	10320000 	.word	0x10320000
 8003bb4:	10310000 	.word	0x10310000
 8003bb8:	10220000 	.word	0x10220000
 8003bbc:	10210000 	.word	0x10210000
 8003bc0:	10120000 	.word	0x10120000
 8003bc4:	10110000 	.word	0x10110000
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40010000 	.word	0x40010000
 8003bd0:	40010800 	.word	0x40010800
 8003bd4:	40010c00 	.word	0x40010c00
 8003bd8:	40011000 	.word	0x40011000
 8003bdc:	40011400 	.word	0x40011400
 8003be0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003be4:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <HAL_GPIO_Init+0x304>)
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	43db      	mvns	r3, r3
 8003bec:	4909      	ldr	r1, [pc, #36]	; (8003c14 <HAL_GPIO_Init+0x304>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f47f ae8e 	bne.w	8003924 <HAL_GPIO_Init+0x14>
  }
}
 8003c08:	bf00      	nop
 8003c0a:	bf00      	nop
 8003c0c:	372c      	adds	r7, #44	; 0x2c
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr
 8003c14:	40010400 	.word	0x40010400

08003c18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	887b      	ldrh	r3, [r7, #2]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c30:	2301      	movs	r3, #1
 8003c32:	73fb      	strb	r3, [r7, #15]
 8003c34:	e001      	b.n	8003c3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c36:	2300      	movs	r3, #0
 8003c38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr

08003c46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	807b      	strh	r3, [r7, #2]
 8003c52:	4613      	mov	r3, r2
 8003c54:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c56:	787b      	ldrb	r3, [r7, #1]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c5c:	887a      	ldrh	r2, [r7, #2]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003c62:	e003      	b.n	8003c6c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c64:	887b      	ldrh	r3, [r7, #2]
 8003c66:	041a      	lsls	r2, r3, #16
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	611a      	str	r2, [r3, #16]
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr

08003c76 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b085      	sub	sp, #20
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c88:	887a      	ldrh	r2, [r7, #2]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	041a      	lsls	r2, r3, #16
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	43d9      	mvns	r1, r3
 8003c94:	887b      	ldrh	r3, [r7, #2]
 8003c96:	400b      	ands	r3, r1
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	611a      	str	r2, [r3, #16]
}
 8003c9e:	bf00      	nop
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cb2:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cb4:	695a      	ldr	r2, [r3, #20]
 8003cb6:	88fb      	ldrh	r3, [r7, #6]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d006      	beq.n	8003ccc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cbe:	4a05      	ldr	r2, [pc, #20]	; (8003cd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cc0:	88fb      	ldrh	r3, [r7, #6]
 8003cc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cc4:	88fb      	ldrh	r3, [r7, #6]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fe f946 	bl	8001f58 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ccc:	bf00      	nop
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40010400 	.word	0x40010400

08003cd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e272      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 8087 	beq.w	8003e06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cf8:	4b92      	ldr	r3, [pc, #584]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 030c 	and.w	r3, r3, #12
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d00c      	beq.n	8003d1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d04:	4b8f      	ldr	r3, [pc, #572]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 030c 	and.w	r3, r3, #12
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d112      	bne.n	8003d36 <HAL_RCC_OscConfig+0x5e>
 8003d10:	4b8c      	ldr	r3, [pc, #560]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1c:	d10b      	bne.n	8003d36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d1e:	4b89      	ldr	r3, [pc, #548]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d06c      	beq.n	8003e04 <HAL_RCC_OscConfig+0x12c>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d168      	bne.n	8003e04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e24c      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3e:	d106      	bne.n	8003d4e <HAL_RCC_OscConfig+0x76>
 8003d40:	4b80      	ldr	r3, [pc, #512]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a7f      	ldr	r2, [pc, #508]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	e02e      	b.n	8003dac <HAL_RCC_OscConfig+0xd4>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10c      	bne.n	8003d70 <HAL_RCC_OscConfig+0x98>
 8003d56:	4b7b      	ldr	r3, [pc, #492]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a7a      	ldr	r2, [pc, #488]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	4b78      	ldr	r3, [pc, #480]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a77      	ldr	r2, [pc, #476]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	e01d      	b.n	8003dac <HAL_RCC_OscConfig+0xd4>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCC_OscConfig+0xbc>
 8003d7a:	4b72      	ldr	r3, [pc, #456]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a71      	ldr	r2, [pc, #452]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	4b6f      	ldr	r3, [pc, #444]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a6e      	ldr	r2, [pc, #440]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	e00b      	b.n	8003dac <HAL_RCC_OscConfig+0xd4>
 8003d94:	4b6b      	ldr	r3, [pc, #428]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a6a      	ldr	r2, [pc, #424]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	4b68      	ldr	r3, [pc, #416]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a67      	ldr	r2, [pc, #412]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003daa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d013      	beq.n	8003ddc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db4:	f7fe ff0e 	bl	8002bd4 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dbc:	f7fe ff0a 	bl	8002bd4 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b64      	cmp	r3, #100	; 0x64
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e200      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dce:	4b5d      	ldr	r3, [pc, #372]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0xe4>
 8003dda:	e014      	b.n	8003e06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fe fefa 	bl	8002bd4 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de4:	f7fe fef6 	bl	8002bd4 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	; 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e1ec      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df6:	4b53      	ldr	r3, [pc, #332]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0x10c>
 8003e02:	e000      	b.n	8003e06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d063      	beq.n	8003eda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e12:	4b4c      	ldr	r3, [pc, #304]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00b      	beq.n	8003e36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e1e:	4b49      	ldr	r3, [pc, #292]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d11c      	bne.n	8003e64 <HAL_RCC_OscConfig+0x18c>
 8003e2a:	4b46      	ldr	r3, [pc, #280]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d116      	bne.n	8003e64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e36:	4b43      	ldr	r3, [pc, #268]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <HAL_RCC_OscConfig+0x176>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d001      	beq.n	8003e4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e1c0      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e4e:	4b3d      	ldr	r3, [pc, #244]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4939      	ldr	r1, [pc, #228]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e62:	e03a      	b.n	8003eda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d020      	beq.n	8003eae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e6c:	4b36      	ldr	r3, [pc, #216]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003e6e:	2201      	movs	r2, #1
 8003e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e72:	f7fe feaf 	bl	8002bd4 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e7a:	f7fe feab 	bl	8002bd4 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e1a1      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e8c:	4b2d      	ldr	r3, [pc, #180]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e98:	4b2a      	ldr	r3, [pc, #168]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	4927      	ldr	r1, [pc, #156]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	600b      	str	r3, [r1, #0]
 8003eac:	e015      	b.n	8003eda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eae:	4b26      	ldr	r3, [pc, #152]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb4:	f7fe fe8e 	bl	8002bd4 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ebc:	f7fe fe8a 	bl	8002bd4 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e180      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ece:	4b1d      	ldr	r3, [pc, #116]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d03a      	beq.n	8003f5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d019      	beq.n	8003f22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eee:	4b17      	ldr	r3, [pc, #92]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef4:	f7fe fe6e 	bl	8002bd4 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003efc:	f7fe fe6a 	bl	8002bd4 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e160      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0f0      	beq.n	8003efc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f1a:	2001      	movs	r0, #1
 8003f1c:	f000 faa6 	bl	800446c <RCC_Delay>
 8003f20:	e01c      	b.n	8003f5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f22:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f28:	f7fe fe54 	bl	8002bd4 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f2e:	e00f      	b.n	8003f50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f30:	f7fe fe50 	bl	8002bd4 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d908      	bls.n	8003f50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e146      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
 8003f42:	bf00      	nop
 8003f44:	40021000 	.word	0x40021000
 8003f48:	42420000 	.word	0x42420000
 8003f4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f50:	4b92      	ldr	r3, [pc, #584]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1e9      	bne.n	8003f30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 80a6 	beq.w	80040b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f6e:	4b8b      	ldr	r3, [pc, #556]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10d      	bne.n	8003f96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f7a:	4b88      	ldr	r3, [pc, #544]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	4a87      	ldr	r2, [pc, #540]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 8003f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f84:	61d3      	str	r3, [r2, #28]
 8003f86:	4b85      	ldr	r3, [pc, #532]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8e:	60bb      	str	r3, [r7, #8]
 8003f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f92:	2301      	movs	r3, #1
 8003f94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f96:	4b82      	ldr	r3, [pc, #520]	; (80041a0 <HAL_RCC_OscConfig+0x4c8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d118      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fa2:	4b7f      	ldr	r3, [pc, #508]	; (80041a0 <HAL_RCC_OscConfig+0x4c8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a7e      	ldr	r2, [pc, #504]	; (80041a0 <HAL_RCC_OscConfig+0x4c8>)
 8003fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fae:	f7fe fe11 	bl	8002bd4 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb6:	f7fe fe0d 	bl	8002bd4 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b64      	cmp	r3, #100	; 0x64
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e103      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc8:	4b75      	ldr	r3, [pc, #468]	; (80041a0 <HAL_RCC_OscConfig+0x4c8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0f0      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d106      	bne.n	8003fea <HAL_RCC_OscConfig+0x312>
 8003fdc:	4b6f      	ldr	r3, [pc, #444]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	4a6e      	ldr	r2, [pc, #440]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	6213      	str	r3, [r2, #32]
 8003fe8:	e02d      	b.n	8004046 <HAL_RCC_OscConfig+0x36e>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10c      	bne.n	800400c <HAL_RCC_OscConfig+0x334>
 8003ff2:	4b6a      	ldr	r3, [pc, #424]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	4a69      	ldr	r2, [pc, #420]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 8003ff8:	f023 0301 	bic.w	r3, r3, #1
 8003ffc:	6213      	str	r3, [r2, #32]
 8003ffe:	4b67      	ldr	r3, [pc, #412]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	4a66      	ldr	r2, [pc, #408]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 8004004:	f023 0304 	bic.w	r3, r3, #4
 8004008:	6213      	str	r3, [r2, #32]
 800400a:	e01c      	b.n	8004046 <HAL_RCC_OscConfig+0x36e>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	2b05      	cmp	r3, #5
 8004012:	d10c      	bne.n	800402e <HAL_RCC_OscConfig+0x356>
 8004014:	4b61      	ldr	r3, [pc, #388]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	4a60      	ldr	r2, [pc, #384]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 800401a:	f043 0304 	orr.w	r3, r3, #4
 800401e:	6213      	str	r3, [r2, #32]
 8004020:	4b5e      	ldr	r3, [pc, #376]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	4a5d      	ldr	r2, [pc, #372]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 8004026:	f043 0301 	orr.w	r3, r3, #1
 800402a:	6213      	str	r3, [r2, #32]
 800402c:	e00b      	b.n	8004046 <HAL_RCC_OscConfig+0x36e>
 800402e:	4b5b      	ldr	r3, [pc, #364]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	4a5a      	ldr	r2, [pc, #360]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 8004034:	f023 0301 	bic.w	r3, r3, #1
 8004038:	6213      	str	r3, [r2, #32]
 800403a:	4b58      	ldr	r3, [pc, #352]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	4a57      	ldr	r2, [pc, #348]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 8004040:	f023 0304 	bic.w	r3, r3, #4
 8004044:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d015      	beq.n	800407a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800404e:	f7fe fdc1 	bl	8002bd4 <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004054:	e00a      	b.n	800406c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004056:	f7fe fdbd 	bl	8002bd4 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	f241 3288 	movw	r2, #5000	; 0x1388
 8004064:	4293      	cmp	r3, r2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e0b1      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406c:	4b4b      	ldr	r3, [pc, #300]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0ee      	beq.n	8004056 <HAL_RCC_OscConfig+0x37e>
 8004078:	e014      	b.n	80040a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800407a:	f7fe fdab 	bl	8002bd4 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004080:	e00a      	b.n	8004098 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004082:	f7fe fda7 	bl	8002bd4 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004090:	4293      	cmp	r3, r2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e09b      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004098:	4b40      	ldr	r3, [pc, #256]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1ee      	bne.n	8004082 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040a4:	7dfb      	ldrb	r3, [r7, #23]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d105      	bne.n	80040b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040aa:	4b3c      	ldr	r3, [pc, #240]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	4a3b      	ldr	r2, [pc, #236]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 80040b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 8087 	beq.w	80041ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040c0:	4b36      	ldr	r3, [pc, #216]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 030c 	and.w	r3, r3, #12
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d061      	beq.n	8004190 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d146      	bne.n	8004162 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d4:	4b33      	ldr	r3, [pc, #204]	; (80041a4 <HAL_RCC_OscConfig+0x4cc>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040da:	f7fe fd7b 	bl	8002bd4 <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e2:	f7fe fd77 	bl	8002bd4 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e06d      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040f4:	4b29      	ldr	r3, [pc, #164]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1f0      	bne.n	80040e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004108:	d108      	bne.n	800411c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800410a:	4b24      	ldr	r3, [pc, #144]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	4921      	ldr	r1, [pc, #132]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 8004118:	4313      	orrs	r3, r2
 800411a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800411c:	4b1f      	ldr	r3, [pc, #124]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a19      	ldr	r1, [r3, #32]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	430b      	orrs	r3, r1
 800412e:	491b      	ldr	r1, [pc, #108]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 8004130:	4313      	orrs	r3, r2
 8004132:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004134:	4b1b      	ldr	r3, [pc, #108]	; (80041a4 <HAL_RCC_OscConfig+0x4cc>)
 8004136:	2201      	movs	r2, #1
 8004138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413a:	f7fe fd4b 	bl	8002bd4 <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004142:	f7fe fd47 	bl	8002bd4 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e03d      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004154:	4b11      	ldr	r3, [pc, #68]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0f0      	beq.n	8004142 <HAL_RCC_OscConfig+0x46a>
 8004160:	e035      	b.n	80041ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004162:	4b10      	ldr	r3, [pc, #64]	; (80041a4 <HAL_RCC_OscConfig+0x4cc>)
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004168:	f7fe fd34 	bl	8002bd4 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004170:	f7fe fd30 	bl	8002bd4 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e026      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004182:	4b06      	ldr	r3, [pc, #24]	; (800419c <HAL_RCC_OscConfig+0x4c4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f0      	bne.n	8004170 <HAL_RCC_OscConfig+0x498>
 800418e:	e01e      	b.n	80041ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d107      	bne.n	80041a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e019      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
 800419c:	40021000 	.word	0x40021000
 80041a0:	40007000 	.word	0x40007000
 80041a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041a8:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <HAL_RCC_OscConfig+0x500>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d106      	bne.n	80041ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d001      	beq.n	80041ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3718      	adds	r7, #24
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40021000 	.word	0x40021000

080041dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0d0      	b.n	8004392 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041f0:	4b6a      	ldr	r3, [pc, #424]	; (800439c <HAL_RCC_ClockConfig+0x1c0>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d910      	bls.n	8004220 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fe:	4b67      	ldr	r3, [pc, #412]	; (800439c <HAL_RCC_ClockConfig+0x1c0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f023 0207 	bic.w	r2, r3, #7
 8004206:	4965      	ldr	r1, [pc, #404]	; (800439c <HAL_RCC_ClockConfig+0x1c0>)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	4313      	orrs	r3, r2
 800420c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800420e:	4b63      	ldr	r3, [pc, #396]	; (800439c <HAL_RCC_ClockConfig+0x1c0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d001      	beq.n	8004220 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0b8      	b.n	8004392 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d020      	beq.n	800426e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004238:	4b59      	ldr	r3, [pc, #356]	; (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	4a58      	ldr	r2, [pc, #352]	; (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 800423e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004242:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b00      	cmp	r3, #0
 800424e:	d005      	beq.n	800425c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004250:	4b53      	ldr	r3, [pc, #332]	; (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	4a52      	ldr	r2, [pc, #328]	; (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004256:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800425a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800425c:	4b50      	ldr	r3, [pc, #320]	; (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	494d      	ldr	r1, [pc, #308]	; (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 800426a:	4313      	orrs	r3, r2
 800426c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d040      	beq.n	80042fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d107      	bne.n	8004292 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004282:	4b47      	ldr	r3, [pc, #284]	; (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d115      	bne.n	80042ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e07f      	b.n	8004392 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d107      	bne.n	80042aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800429a:	4b41      	ldr	r3, [pc, #260]	; (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d109      	bne.n	80042ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e073      	b.n	8004392 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042aa:	4b3d      	ldr	r3, [pc, #244]	; (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e06b      	b.n	8004392 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ba:	4b39      	ldr	r3, [pc, #228]	; (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f023 0203 	bic.w	r2, r3, #3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	4936      	ldr	r1, [pc, #216]	; (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042cc:	f7fe fc82 	bl	8002bd4 <HAL_GetTick>
 80042d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d2:	e00a      	b.n	80042ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d4:	f7fe fc7e 	bl	8002bd4 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e053      	b.n	8004392 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ea:	4b2d      	ldr	r3, [pc, #180]	; (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f003 020c 	and.w	r2, r3, #12
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d1eb      	bne.n	80042d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042fc:	4b27      	ldr	r3, [pc, #156]	; (800439c <HAL_RCC_ClockConfig+0x1c0>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d210      	bcs.n	800432c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430a:	4b24      	ldr	r3, [pc, #144]	; (800439c <HAL_RCC_ClockConfig+0x1c0>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 0207 	bic.w	r2, r3, #7
 8004312:	4922      	ldr	r1, [pc, #136]	; (800439c <HAL_RCC_ClockConfig+0x1c0>)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	4313      	orrs	r3, r2
 8004318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800431a:	4b20      	ldr	r3, [pc, #128]	; (800439c <HAL_RCC_ClockConfig+0x1c0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e032      	b.n	8004392 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004338:	4b19      	ldr	r3, [pc, #100]	; (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	4916      	ldr	r1, [pc, #88]	; (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004346:	4313      	orrs	r3, r2
 8004348:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d009      	beq.n	800436a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004356:	4b12      	ldr	r3, [pc, #72]	; (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	490e      	ldr	r1, [pc, #56]	; (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004366:	4313      	orrs	r3, r2
 8004368:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800436a:	f000 f821 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 800436e:	4602      	mov	r2, r0
 8004370:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	091b      	lsrs	r3, r3, #4
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	490a      	ldr	r1, [pc, #40]	; (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 800437c:	5ccb      	ldrb	r3, [r1, r3]
 800437e:	fa22 f303 	lsr.w	r3, r2, r3
 8004382:	4a09      	ldr	r2, [pc, #36]	; (80043a8 <HAL_RCC_ClockConfig+0x1cc>)
 8004384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004386:	4b09      	ldr	r3, [pc, #36]	; (80043ac <HAL_RCC_ClockConfig+0x1d0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7fe fbe0 	bl	8002b50 <HAL_InitTick>

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40022000 	.word	0x40022000
 80043a0:	40021000 	.word	0x40021000
 80043a4:	08005518 	.word	0x08005518
 80043a8:	20000008 	.word	0x20000008
 80043ac:	2000000c 	.word	0x2000000c

080043b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b0:	b490      	push	{r4, r7}
 80043b2:	b08a      	sub	sp, #40	; 0x28
 80043b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80043b6:	4b29      	ldr	r3, [pc, #164]	; (800445c <HAL_RCC_GetSysClockFreq+0xac>)
 80043b8:	1d3c      	adds	r4, r7, #4
 80043ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80043c0:	f240 2301 	movw	r3, #513	; 0x201
 80043c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61fb      	str	r3, [r7, #28]
 80043ca:	2300      	movs	r3, #0
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	2300      	movs	r3, #0
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043da:	4b21      	ldr	r3, [pc, #132]	; (8004460 <HAL_RCC_GetSysClockFreq+0xb0>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	f003 030c 	and.w	r3, r3, #12
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d002      	beq.n	80043f0 <HAL_RCC_GetSysClockFreq+0x40>
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d003      	beq.n	80043f6 <HAL_RCC_GetSysClockFreq+0x46>
 80043ee:	e02b      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043f0:	4b1c      	ldr	r3, [pc, #112]	; (8004464 <HAL_RCC_GetSysClockFreq+0xb4>)
 80043f2:	623b      	str	r3, [r7, #32]
      break;
 80043f4:	e02b      	b.n	800444e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	0c9b      	lsrs	r3, r3, #18
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	3328      	adds	r3, #40	; 0x28
 8004400:	443b      	add	r3, r7
 8004402:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004406:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d012      	beq.n	8004438 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004412:	4b13      	ldr	r3, [pc, #76]	; (8004460 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	0c5b      	lsrs	r3, r3, #17
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	3328      	adds	r3, #40	; 0x28
 800441e:	443b      	add	r3, r7
 8004420:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004424:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	4a0e      	ldr	r2, [pc, #56]	; (8004464 <HAL_RCC_GetSysClockFreq+0xb4>)
 800442a:	fb03 f202 	mul.w	r2, r3, r2
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	fbb2 f3f3 	udiv	r3, r2, r3
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
 8004436:	e004      	b.n	8004442 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	4a0b      	ldr	r2, [pc, #44]	; (8004468 <HAL_RCC_GetSysClockFreq+0xb8>)
 800443c:	fb02 f303 	mul.w	r3, r2, r3
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	623b      	str	r3, [r7, #32]
      break;
 8004446:	e002      	b.n	800444e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004448:	4b06      	ldr	r3, [pc, #24]	; (8004464 <HAL_RCC_GetSysClockFreq+0xb4>)
 800444a:	623b      	str	r3, [r7, #32]
      break;
 800444c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800444e:	6a3b      	ldr	r3, [r7, #32]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3728      	adds	r7, #40	; 0x28
 8004454:	46bd      	mov	sp, r7
 8004456:	bc90      	pop	{r4, r7}
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	08005508 	.word	0x08005508
 8004460:	40021000 	.word	0x40021000
 8004464:	007a1200 	.word	0x007a1200
 8004468:	003d0900 	.word	0x003d0900

0800446c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004474:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <RCC_Delay+0x34>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a0a      	ldr	r2, [pc, #40]	; (80044a4 <RCC_Delay+0x38>)
 800447a:	fba2 2303 	umull	r2, r3, r2, r3
 800447e:	0a5b      	lsrs	r3, r3, #9
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	fb02 f303 	mul.w	r3, r2, r3
 8004486:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004488:	bf00      	nop
  }
  while (Delay --);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	1e5a      	subs	r2, r3, #1
 800448e:	60fa      	str	r2, [r7, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1f9      	bne.n	8004488 <RCC_Delay+0x1c>
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	bc80      	pop	{r7}
 800449e:	4770      	bx	lr
 80044a0:	20000008 	.word	0x20000008
 80044a4:	10624dd3 	.word	0x10624dd3

080044a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e041      	b.n	800453e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d106      	bne.n	80044d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fe fa18 	bl	8002904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3304      	adds	r3, #4
 80044e4:	4619      	mov	r1, r3
 80044e6:	4610      	mov	r0, r2
 80044e8:	f000 fc28 	bl	8004d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b01      	cmp	r3, #1
 800455a:	d001      	beq.n	8004560 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e03a      	b.n	80045d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0201 	orr.w	r2, r2, #1
 8004576:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a18      	ldr	r2, [pc, #96]	; (80045e0 <HAL_TIM_Base_Start_IT+0x98>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00e      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x58>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800458a:	d009      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x58>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a14      	ldr	r2, [pc, #80]	; (80045e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x58>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a13      	ldr	r2, [pc, #76]	; (80045e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d111      	bne.n	80045c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2b06      	cmp	r3, #6
 80045b0:	d010      	beq.n	80045d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f042 0201 	orr.w	r2, r2, #1
 80045c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c2:	e007      	b.n	80045d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0201 	orr.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	bc80      	pop	{r7}
 80045de:	4770      	bx	lr
 80045e0:	40012c00 	.word	0x40012c00
 80045e4:	40000400 	.word	0x40000400
 80045e8:	40000800 	.word	0x40000800

080045ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e041      	b.n	8004682 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f839 	bl	800468a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3304      	adds	r3, #4
 8004628:	4619      	mov	r1, r3
 800462a:	4610      	mov	r0, r2
 800462c:	f000 fb86 	bl	8004d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	bc80      	pop	{r7}
 800469a:	4770      	bx	lr

0800469c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d109      	bne.n	80046c0 <HAL_TIM_PWM_Start+0x24>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	bf14      	ite	ne
 80046b8:	2301      	movne	r3, #1
 80046ba:	2300      	moveq	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	e022      	b.n	8004706 <HAL_TIM_PWM_Start+0x6a>
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d109      	bne.n	80046da <HAL_TIM_PWM_Start+0x3e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	bf14      	ite	ne
 80046d2:	2301      	movne	r3, #1
 80046d4:	2300      	moveq	r3, #0
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	e015      	b.n	8004706 <HAL_TIM_PWM_Start+0x6a>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d109      	bne.n	80046f4 <HAL_TIM_PWM_Start+0x58>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	bf14      	ite	ne
 80046ec:	2301      	movne	r3, #1
 80046ee:	2300      	moveq	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	e008      	b.n	8004706 <HAL_TIM_PWM_Start+0x6a>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	bf14      	ite	ne
 8004700:	2301      	movne	r3, #1
 8004702:	2300      	moveq	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e05e      	b.n	80047cc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d104      	bne.n	800471e <HAL_TIM_PWM_Start+0x82>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800471c:	e013      	b.n	8004746 <HAL_TIM_PWM_Start+0xaa>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b04      	cmp	r3, #4
 8004722:	d104      	bne.n	800472e <HAL_TIM_PWM_Start+0x92>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800472c:	e00b      	b.n	8004746 <HAL_TIM_PWM_Start+0xaa>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2b08      	cmp	r3, #8
 8004732:	d104      	bne.n	800473e <HAL_TIM_PWM_Start+0xa2>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800473c:	e003      	b.n	8004746 <HAL_TIM_PWM_Start+0xaa>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2202      	movs	r2, #2
 8004742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2201      	movs	r2, #1
 800474c:	6839      	ldr	r1, [r7, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fd74 	bl	800523c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a1e      	ldr	r2, [pc, #120]	; (80047d4 <HAL_TIM_PWM_Start+0x138>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d107      	bne.n	800476e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800476c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a18      	ldr	r2, [pc, #96]	; (80047d4 <HAL_TIM_PWM_Start+0x138>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d00e      	beq.n	8004796 <HAL_TIM_PWM_Start+0xfa>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004780:	d009      	beq.n	8004796 <HAL_TIM_PWM_Start+0xfa>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a14      	ldr	r2, [pc, #80]	; (80047d8 <HAL_TIM_PWM_Start+0x13c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d004      	beq.n	8004796 <HAL_TIM_PWM_Start+0xfa>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a12      	ldr	r2, [pc, #72]	; (80047dc <HAL_TIM_PWM_Start+0x140>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d111      	bne.n	80047ba <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b06      	cmp	r3, #6
 80047a6:	d010      	beq.n	80047ca <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b8:	e007      	b.n	80047ca <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 0201 	orr.w	r2, r2, #1
 80047c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40012c00 	.word	0x40012c00
 80047d8:	40000400 	.word	0x40000400
 80047dc:	40000800 	.word	0x40000800

080047e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d122      	bne.n	800483c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b02      	cmp	r3, #2
 8004802:	d11b      	bne.n	800483c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f06f 0202 	mvn.w	r2, #2
 800480c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fa6f 	bl	8004d06 <HAL_TIM_IC_CaptureCallback>
 8004828:	e005      	b.n	8004836 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fa62 	bl	8004cf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 fa71 	bl	8004d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b04      	cmp	r3, #4
 8004848:	d122      	bne.n	8004890 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b04      	cmp	r3, #4
 8004856:	d11b      	bne.n	8004890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f06f 0204 	mvn.w	r2, #4
 8004860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2202      	movs	r2, #2
 8004866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fa45 	bl	8004d06 <HAL_TIM_IC_CaptureCallback>
 800487c:	e005      	b.n	800488a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fa38 	bl	8004cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 fa47 	bl	8004d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b08      	cmp	r3, #8
 800489c:	d122      	bne.n	80048e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d11b      	bne.n	80048e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f06f 0208 	mvn.w	r2, #8
 80048b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2204      	movs	r2, #4
 80048ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fa1b 	bl	8004d06 <HAL_TIM_IC_CaptureCallback>
 80048d0:	e005      	b.n	80048de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fa0e 	bl	8004cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 fa1d 	bl	8004d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	f003 0310 	and.w	r3, r3, #16
 80048ee:	2b10      	cmp	r3, #16
 80048f0:	d122      	bne.n	8004938 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	2b10      	cmp	r3, #16
 80048fe:	d11b      	bne.n	8004938 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0210 	mvn.w	r2, #16
 8004908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2208      	movs	r2, #8
 800490e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f9f1 	bl	8004d06 <HAL_TIM_IC_CaptureCallback>
 8004924:	e005      	b.n	8004932 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f9e4 	bl	8004cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f9f3 	bl	8004d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b01      	cmp	r3, #1
 8004944:	d10e      	bne.n	8004964 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b01      	cmp	r3, #1
 8004952:	d107      	bne.n	8004964 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0201 	mvn.w	r2, #1
 800495c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fd fb3a 	bl	8001fd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496e:	2b80      	cmp	r3, #128	; 0x80
 8004970:	d10e      	bne.n	8004990 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497c:	2b80      	cmp	r3, #128	; 0x80
 800497e:	d107      	bne.n	8004990 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fd32 	bl	80053f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499a:	2b40      	cmp	r3, #64	; 0x40
 800499c:	d10e      	bne.n	80049bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a8:	2b40      	cmp	r3, #64	; 0x40
 80049aa:	d107      	bne.n	80049bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f9b7 	bl	8004d2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	d10e      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b20      	cmp	r3, #32
 80049d6:	d107      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0220 	mvn.w	r2, #32
 80049e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fcfd 	bl	80053e2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049e8:	bf00      	nop
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a06:	2302      	movs	r3, #2
 8004a08:	e0ac      	b.n	8004b64 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b0c      	cmp	r3, #12
 8004a16:	f200 809f 	bhi.w	8004b58 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004a1a:	a201      	add	r2, pc, #4	; (adr r2, 8004a20 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a20:	08004a55 	.word	0x08004a55
 8004a24:	08004b59 	.word	0x08004b59
 8004a28:	08004b59 	.word	0x08004b59
 8004a2c:	08004b59 	.word	0x08004b59
 8004a30:	08004a95 	.word	0x08004a95
 8004a34:	08004b59 	.word	0x08004b59
 8004a38:	08004b59 	.word	0x08004b59
 8004a3c:	08004b59 	.word	0x08004b59
 8004a40:	08004ad7 	.word	0x08004ad7
 8004a44:	08004b59 	.word	0x08004b59
 8004a48:	08004b59 	.word	0x08004b59
 8004a4c:	08004b59 	.word	0x08004b59
 8004a50:	08004b17 	.word	0x08004b17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68b9      	ldr	r1, [r7, #8]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 f9d0 	bl	8004e00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699a      	ldr	r2, [r3, #24]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0208 	orr.w	r2, r2, #8
 8004a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699a      	ldr	r2, [r3, #24]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0204 	bic.w	r2, r2, #4
 8004a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6999      	ldr	r1, [r3, #24]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	691a      	ldr	r2, [r3, #16]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	619a      	str	r2, [r3, #24]
      break;
 8004a92:	e062      	b.n	8004b5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68b9      	ldr	r1, [r7, #8]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fa16 	bl	8004ecc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699a      	ldr	r2, [r3, #24]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699a      	ldr	r2, [r3, #24]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6999      	ldr	r1, [r3, #24]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	021a      	lsls	r2, r3, #8
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	619a      	str	r2, [r3, #24]
      break;
 8004ad4:	e041      	b.n	8004b5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68b9      	ldr	r1, [r7, #8]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 fa5f 	bl	8004fa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69da      	ldr	r2, [r3, #28]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0208 	orr.w	r2, r2, #8
 8004af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0204 	bic.w	r2, r2, #4
 8004b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69d9      	ldr	r1, [r3, #28]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	61da      	str	r2, [r3, #28]
      break;
 8004b14:	e021      	b.n	8004b5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 faa9 	bl	8005074 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69da      	ldr	r2, [r3, #28]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69d9      	ldr	r1, [r3, #28]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	021a      	lsls	r2, r3, #8
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	61da      	str	r2, [r3, #28]
      break;
 8004b56:	e000      	b.n	8004b5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004b58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d101      	bne.n	8004b84 <HAL_TIM_ConfigClockSource+0x18>
 8004b80:	2302      	movs	r3, #2
 8004b82:	e0b3      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x180>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ba2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004baa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bbc:	d03e      	beq.n	8004c3c <HAL_TIM_ConfigClockSource+0xd0>
 8004bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc2:	f200 8087 	bhi.w	8004cd4 <HAL_TIM_ConfigClockSource+0x168>
 8004bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bca:	f000 8085 	beq.w	8004cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd2:	d87f      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x168>
 8004bd4:	2b70      	cmp	r3, #112	; 0x70
 8004bd6:	d01a      	beq.n	8004c0e <HAL_TIM_ConfigClockSource+0xa2>
 8004bd8:	2b70      	cmp	r3, #112	; 0x70
 8004bda:	d87b      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x168>
 8004bdc:	2b60      	cmp	r3, #96	; 0x60
 8004bde:	d050      	beq.n	8004c82 <HAL_TIM_ConfigClockSource+0x116>
 8004be0:	2b60      	cmp	r3, #96	; 0x60
 8004be2:	d877      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x168>
 8004be4:	2b50      	cmp	r3, #80	; 0x50
 8004be6:	d03c      	beq.n	8004c62 <HAL_TIM_ConfigClockSource+0xf6>
 8004be8:	2b50      	cmp	r3, #80	; 0x50
 8004bea:	d873      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x168>
 8004bec:	2b40      	cmp	r3, #64	; 0x40
 8004bee:	d058      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0x136>
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d86f      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x168>
 8004bf4:	2b30      	cmp	r3, #48	; 0x30
 8004bf6:	d064      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x156>
 8004bf8:	2b30      	cmp	r3, #48	; 0x30
 8004bfa:	d86b      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x168>
 8004bfc:	2b20      	cmp	r3, #32
 8004bfe:	d060      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x156>
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d867      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x168>
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d05c      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x156>
 8004c08:	2b10      	cmp	r3, #16
 8004c0a:	d05a      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c0c:	e062      	b.n	8004cd4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	6899      	ldr	r1, [r3, #8]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f000 faee 	bl	80051fe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	609a      	str	r2, [r3, #8]
      break;
 8004c3a:	e04e      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6818      	ldr	r0, [r3, #0]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	6899      	ldr	r1, [r3, #8]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f000 fad7 	bl	80051fe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c5e:	609a      	str	r2, [r3, #8]
      break;
 8004c60:	e03b      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6818      	ldr	r0, [r3, #0]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	6859      	ldr	r1, [r3, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	f000 fa4e 	bl	8005110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2150      	movs	r1, #80	; 0x50
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 faa5 	bl	80051ca <TIM_ITRx_SetConfig>
      break;
 8004c80:	e02b      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	6859      	ldr	r1, [r3, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f000 fa6c 	bl	800516c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2160      	movs	r1, #96	; 0x60
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fa95 	bl	80051ca <TIM_ITRx_SetConfig>
      break;
 8004ca0:	e01b      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	6859      	ldr	r1, [r3, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f000 fa2e 	bl	8005110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2140      	movs	r1, #64	; 0x40
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fa85 	bl	80051ca <TIM_ITRx_SetConfig>
      break;
 8004cc0:	e00b      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4619      	mov	r1, r3
 8004ccc:	4610      	mov	r0, r2
 8004cce:	f000 fa7c 	bl	80051ca <TIM_ITRx_SetConfig>
        break;
 8004cd2:	e002      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004cd4:	bf00      	nop
 8004cd6:	e000      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004cd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bc80      	pop	{r7}
 8004d04:	4770      	bx	lr

08004d06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bc80      	pop	{r7}
 8004d16:	4770      	bx	lr

08004d18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bc80      	pop	{r7}
 8004d28:	4770      	bx	lr

08004d2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr

08004d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a29      	ldr	r2, [pc, #164]	; (8004df4 <TIM_Base_SetConfig+0xb8>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d00b      	beq.n	8004d6c <TIM_Base_SetConfig+0x30>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d5a:	d007      	beq.n	8004d6c <TIM_Base_SetConfig+0x30>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a26      	ldr	r2, [pc, #152]	; (8004df8 <TIM_Base_SetConfig+0xbc>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d003      	beq.n	8004d6c <TIM_Base_SetConfig+0x30>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a25      	ldr	r2, [pc, #148]	; (8004dfc <TIM_Base_SetConfig+0xc0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d108      	bne.n	8004d7e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a1c      	ldr	r2, [pc, #112]	; (8004df4 <TIM_Base_SetConfig+0xb8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00b      	beq.n	8004d9e <TIM_Base_SetConfig+0x62>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d8c:	d007      	beq.n	8004d9e <TIM_Base_SetConfig+0x62>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a19      	ldr	r2, [pc, #100]	; (8004df8 <TIM_Base_SetConfig+0xbc>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d003      	beq.n	8004d9e <TIM_Base_SetConfig+0x62>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a18      	ldr	r2, [pc, #96]	; (8004dfc <TIM_Base_SetConfig+0xc0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d108      	bne.n	8004db0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a07      	ldr	r2, [pc, #28]	; (8004df4 <TIM_Base_SetConfig+0xb8>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d103      	bne.n	8004de4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	615a      	str	r2, [r3, #20]
}
 8004dea:	bf00      	nop
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr
 8004df4:	40012c00 	.word	0x40012c00
 8004df8:	40000400 	.word	0x40000400
 8004dfc:	40000800 	.word	0x40000800

08004e00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	f023 0201 	bic.w	r2, r3, #1
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0303 	bic.w	r3, r3, #3
 8004e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f023 0302 	bic.w	r3, r3, #2
 8004e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a1c      	ldr	r2, [pc, #112]	; (8004ec8 <TIM_OC1_SetConfig+0xc8>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d10c      	bne.n	8004e76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f023 0308 	bic.w	r3, r3, #8
 8004e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f023 0304 	bic.w	r3, r3, #4
 8004e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a13      	ldr	r2, [pc, #76]	; (8004ec8 <TIM_OC1_SetConfig+0xc8>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d111      	bne.n	8004ea2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	621a      	str	r2, [r3, #32]
}
 8004ebc:	bf00      	nop
 8004ebe:	371c      	adds	r7, #28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40012c00 	.word	0x40012c00

08004ecc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	f023 0210 	bic.w	r2, r3, #16
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	021b      	lsls	r3, r3, #8
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f023 0320 	bic.w	r3, r3, #32
 8004f16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a1d      	ldr	r2, [pc, #116]	; (8004f9c <TIM_OC2_SetConfig+0xd0>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d10d      	bne.n	8004f48 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a14      	ldr	r2, [pc, #80]	; (8004f9c <TIM_OC2_SetConfig+0xd0>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d113      	bne.n	8004f78 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	621a      	str	r2, [r3, #32]
}
 8004f92:	bf00      	nop
 8004f94:	371c      	adds	r7, #28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr
 8004f9c:	40012c00 	.word	0x40012c00

08004fa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0303 	bic.w	r3, r3, #3
 8004fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	021b      	lsls	r3, r3, #8
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a1d      	ldr	r2, [pc, #116]	; (8005070 <TIM_OC3_SetConfig+0xd0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d10d      	bne.n	800501a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005004:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	021b      	lsls	r3, r3, #8
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a14      	ldr	r2, [pc, #80]	; (8005070 <TIM_OC3_SetConfig+0xd0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d113      	bne.n	800504a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4313      	orrs	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	621a      	str	r2, [r3, #32]
}
 8005064:	bf00      	nop
 8005066:	371c      	adds	r7, #28
 8005068:	46bd      	mov	sp, r7
 800506a:	bc80      	pop	{r7}
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	40012c00 	.word	0x40012c00

08005074 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	021b      	lsls	r3, r3, #8
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	031b      	lsls	r3, r3, #12
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a0f      	ldr	r2, [pc, #60]	; (800510c <TIM_OC4_SetConfig+0x98>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d109      	bne.n	80050e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	019b      	lsls	r3, r3, #6
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	621a      	str	r2, [r3, #32]
}
 8005102:	bf00      	nop
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	bc80      	pop	{r7}
 800510a:	4770      	bx	lr
 800510c:	40012c00 	.word	0x40012c00

08005110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	f023 0201 	bic.w	r2, r3, #1
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800513a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f023 030a 	bic.w	r3, r3, #10
 800514c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4313      	orrs	r3, r2
 8005154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	621a      	str	r2, [r3, #32]
}
 8005162:	bf00      	nop
 8005164:	371c      	adds	r7, #28
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr

0800516c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	f023 0210 	bic.w	r2, r3, #16
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005196:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	031b      	lsls	r3, r3, #12
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	621a      	str	r2, [r3, #32]
}
 80051c0:	bf00      	nop
 80051c2:	371c      	adds	r7, #28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bc80      	pop	{r7}
 80051c8:	4770      	bx	lr

080051ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b085      	sub	sp, #20
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f043 0307 	orr.w	r3, r3, #7
 80051ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	609a      	str	r2, [r3, #8]
}
 80051f4:	bf00      	nop
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bc80      	pop	{r7}
 80051fc:	4770      	bx	lr

080051fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051fe:	b480      	push	{r7}
 8005200:	b087      	sub	sp, #28
 8005202:	af00      	add	r7, sp, #0
 8005204:	60f8      	str	r0, [r7, #12]
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	607a      	str	r2, [r7, #4]
 800520a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005218:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	021a      	lsls	r2, r3, #8
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	431a      	orrs	r2, r3
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	4313      	orrs	r3, r2
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	609a      	str	r2, [r3, #8]
}
 8005232:	bf00      	nop
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	bc80      	pop	{r7}
 800523a:	4770      	bx	lr

0800523c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f003 031f 	and.w	r3, r3, #31
 800524e:	2201      	movs	r2, #1
 8005250:	fa02 f303 	lsl.w	r3, r2, r3
 8005254:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a1a      	ldr	r2, [r3, #32]
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	43db      	mvns	r3, r3
 800525e:	401a      	ands	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a1a      	ldr	r2, [r3, #32]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f003 031f 	and.w	r3, r3, #31
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	fa01 f303 	lsl.w	r3, r1, r3
 8005274:	431a      	orrs	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	621a      	str	r2, [r3, #32]
}
 800527a:	bf00      	nop
 800527c:	371c      	adds	r7, #28
 800527e:	46bd      	mov	sp, r7
 8005280:	bc80      	pop	{r7}
 8005282:	4770      	bx	lr

08005284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005294:	2b01      	cmp	r3, #1
 8005296:	d101      	bne.n	800529c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005298:	2302      	movs	r3, #2
 800529a:	e046      	b.n	800532a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a16      	ldr	r2, [pc, #88]	; (8005334 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00e      	beq.n	80052fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e8:	d009      	beq.n	80052fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a12      	ldr	r2, [pc, #72]	; (8005338 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d004      	beq.n	80052fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a10      	ldr	r2, [pc, #64]	; (800533c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d10c      	bne.n	8005318 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005304:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	4313      	orrs	r3, r2
 800530e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	bc80      	pop	{r7}
 8005332:	4770      	bx	lr
 8005334:	40012c00 	.word	0x40012c00
 8005338:	40000400 	.word	0x40000400
 800533c:	40000800 	.word	0x40000800

08005340 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005358:	2302      	movs	r3, #2
 800535a:	e03d      	b.n	80053d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4313      	orrs	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	bc80      	pop	{r7}
 80053e0:	4770      	bx	lr

080053e2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053ea:	bf00      	nop
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bc80      	pop	{r7}
 80053f2:	4770      	bx	lr

080053f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	bc80      	pop	{r7}
 8005404:	4770      	bx	lr
	...

08005408 <__libc_init_array>:
 8005408:	b570      	push	{r4, r5, r6, lr}
 800540a:	2600      	movs	r6, #0
 800540c:	4d0c      	ldr	r5, [pc, #48]	; (8005440 <__libc_init_array+0x38>)
 800540e:	4c0d      	ldr	r4, [pc, #52]	; (8005444 <__libc_init_array+0x3c>)
 8005410:	1b64      	subs	r4, r4, r5
 8005412:	10a4      	asrs	r4, r4, #2
 8005414:	42a6      	cmp	r6, r4
 8005416:	d109      	bne.n	800542c <__libc_init_array+0x24>
 8005418:	f000 f86a 	bl	80054f0 <_init>
 800541c:	2600      	movs	r6, #0
 800541e:	4d0a      	ldr	r5, [pc, #40]	; (8005448 <__libc_init_array+0x40>)
 8005420:	4c0a      	ldr	r4, [pc, #40]	; (800544c <__libc_init_array+0x44>)
 8005422:	1b64      	subs	r4, r4, r5
 8005424:	10a4      	asrs	r4, r4, #2
 8005426:	42a6      	cmp	r6, r4
 8005428:	d105      	bne.n	8005436 <__libc_init_array+0x2e>
 800542a:	bd70      	pop	{r4, r5, r6, pc}
 800542c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005430:	4798      	blx	r3
 8005432:	3601      	adds	r6, #1
 8005434:	e7ee      	b.n	8005414 <__libc_init_array+0xc>
 8005436:	f855 3b04 	ldr.w	r3, [r5], #4
 800543a:	4798      	blx	r3
 800543c:	3601      	adds	r6, #1
 800543e:	e7f2      	b.n	8005426 <__libc_init_array+0x1e>
 8005440:	08005528 	.word	0x08005528
 8005444:	08005528 	.word	0x08005528
 8005448:	08005528 	.word	0x08005528
 800544c:	0800552c 	.word	0x0800552c

08005450 <memset>:
 8005450:	4603      	mov	r3, r0
 8005452:	4402      	add	r2, r0
 8005454:	4293      	cmp	r3, r2
 8005456:	d100      	bne.n	800545a <memset+0xa>
 8005458:	4770      	bx	lr
 800545a:	f803 1b01 	strb.w	r1, [r3], #1
 800545e:	e7f9      	b.n	8005454 <memset+0x4>

08005460 <round>:
 8005460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005462:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005466:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 800546a:	2c13      	cmp	r4, #19
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	4606      	mov	r6, r0
 8005472:	460d      	mov	r5, r1
 8005474:	dc19      	bgt.n	80054aa <round+0x4a>
 8005476:	2c00      	cmp	r4, #0
 8005478:	da09      	bge.n	800548e <round+0x2e>
 800547a:	3401      	adds	r4, #1
 800547c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8005480:	d103      	bne.n	800548a <round+0x2a>
 8005482:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005486:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800548a:	2200      	movs	r2, #0
 800548c:	e02a      	b.n	80054e4 <round+0x84>
 800548e:	4917      	ldr	r1, [pc, #92]	; (80054ec <round+0x8c>)
 8005490:	4121      	asrs	r1, r4
 8005492:	ea03 0001 	and.w	r0, r3, r1
 8005496:	4302      	orrs	r2, r0
 8005498:	d010      	beq.n	80054bc <round+0x5c>
 800549a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800549e:	fa42 f404 	asr.w	r4, r2, r4
 80054a2:	4423      	add	r3, r4
 80054a4:	ea23 0301 	bic.w	r3, r3, r1
 80054a8:	e7ef      	b.n	800548a <round+0x2a>
 80054aa:	2c33      	cmp	r4, #51	; 0x33
 80054ac:	dd09      	ble.n	80054c2 <round+0x62>
 80054ae:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80054b2:	d103      	bne.n	80054bc <round+0x5c>
 80054b4:	f7fa ff7c 	bl	80003b0 <__adddf3>
 80054b8:	4606      	mov	r6, r0
 80054ba:	460d      	mov	r5, r1
 80054bc:	4630      	mov	r0, r6
 80054be:	4629      	mov	r1, r5
 80054c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80054c6:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80054ca:	40f9      	lsrs	r1, r7
 80054cc:	4208      	tst	r0, r1
 80054ce:	d0f5      	beq.n	80054bc <round+0x5c>
 80054d0:	2001      	movs	r0, #1
 80054d2:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80054d6:	fa00 f404 	lsl.w	r4, r0, r4
 80054da:	1912      	adds	r2, r2, r4
 80054dc:	bf28      	it	cs
 80054de:	181b      	addcs	r3, r3, r0
 80054e0:	ea22 0201 	bic.w	r2, r2, r1
 80054e4:	4619      	mov	r1, r3
 80054e6:	4610      	mov	r0, r2
 80054e8:	e7e6      	b.n	80054b8 <round+0x58>
 80054ea:	bf00      	nop
 80054ec:	000fffff 	.word	0x000fffff

080054f0 <_init>:
 80054f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f2:	bf00      	nop
 80054f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054f6:	bc08      	pop	{r3}
 80054f8:	469e      	mov	lr, r3
 80054fa:	4770      	bx	lr

080054fc <_fini>:
 80054fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fe:	bf00      	nop
 8005500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005502:	bc08      	pop	{r3}
 8005504:	469e      	mov	lr, r3
 8005506:	4770      	bx	lr
